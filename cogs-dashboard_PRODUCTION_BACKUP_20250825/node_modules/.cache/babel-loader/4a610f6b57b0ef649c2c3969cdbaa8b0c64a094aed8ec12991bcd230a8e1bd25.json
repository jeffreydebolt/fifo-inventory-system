{"ast":null,"code":"import { createTransport } from '@sentry/core';\nimport { rejectedSyncPromise } from '@sentry/utils';\nimport { getNativeFetchImplementation, clearCachedFetchImplementation } from './utils.js';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nfunction makeFetchTransport(options) {\n  let nativeFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getNativeFetchImplementation();\n  let pendingBodySize = 0;\n  let pendingCount = 0;\n  function makeRequest(request) {\n    const requestSize = request.body.length;\n    pendingBodySize += requestSize;\n    pendingCount++;\n    const requestOptions = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n      // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).\n      // Gotchas:\n      // - `keepalive` isn't supported by Firefox\n      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):\n      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.\n      //   We will therefore only activate the flag when we're below that limit.\n      // There is also a limit of requests that can be open at the same time, so we also limit this to 15\n      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details\n      keepalive: pendingBodySize <= 60000 && pendingCount < 15,\n      ...options.fetchOptions\n    };\n    try {\n      return nativeFetch(options.url, requestOptions).then(response => {\n        pendingBodySize -= requestSize;\n        pendingCount--;\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After')\n          }\n        };\n      });\n    } catch (e) {\n      clearCachedFetchImplementation();\n      pendingBodySize -= requestSize;\n      pendingCount--;\n      return rejectedSyncPromise(e);\n    }\n  }\n  return createTransport(options, makeRequest);\n}\nexport { makeFetchTransport };","map":{"version":3,"names":["makeFetchTransport","options","nativeFetch","arguments","length","undefined","getNativeFetchImplementation","pendingBodySize","pendingCount","makeRequest","request","requestSize","body","requestOptions","method","referrerPolicy","headers","keepalive","fetchOptions","url","then","response","statusCode","status","get","e","clearCachedFetchImplementation","rejectedSyncPromise","createTransport"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/transports/fetch.ts"],"sourcesContent":["import { createTransport } from '@sentry/core';\nimport type { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { rejectedSyncPromise } from '@sentry/utils';\n\nimport type { BrowserTransportOptions } from './types';\nimport type { FetchImpl } from './utils';\nimport { clearCachedFetchImplementation, getNativeFetchImplementation } from './utils';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeFetchTransport(\n  options: BrowserTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): Transport {\n  let pendingBodySize = 0;\n  let pendingCount = 0;\n\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestSize = request.body.length;\n    pendingBodySize += requestSize;\n    pendingCount++;\n\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n      // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).\n      // Gotchas:\n      // - `keepalive` isn't supported by Firefox\n      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):\n      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.\n      //   We will therefore only activate the flag when we're below that limit.\n      // There is also a limit of requests that can be open at the same time, so we also limit this to 15\n      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details\n      keepalive: pendingBodySize <= 60_000 && pendingCount < 15,\n      ...options.fetchOptions,\n    };\n\n    try {\n      return nativeFetch(options.url, requestOptions).then(response => {\n        pendingBodySize -= requestSize;\n        pendingCount--;\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After'),\n          },\n        };\n      });\n    } catch (e) {\n      clearCachedFetchImplementation();\n      pendingBodySize -= requestSize;\n      pendingCount--;\n      return rejectedSyncPromise(e);\n    }\n  }\n\n  return createTransport(options, makeRequest);\n}\n"],"mappings":";;;;AAQA;AACA;AACA;AACO,SAASA,kBAAkBA,CAChCC,OAAO,EAEI;EAAA,IADXC,WAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAcG,4BAA4B,EAAE;EAEvD,IAAIC,eAAgB,GAAE,CAAC;EACvB,IAAIC,YAAa,GAAE,CAAC;EAEpB,SAASC,WAAWA,CAACC,OAAO,EAA+D;IACzF,MAAMC,WAAY,GAAED,OAAO,CAACE,IAAI,CAACR,MAAM;IACvCG,eAAA,IAAmBI,WAAW;IAC9BH,YAAY,EAAE;IAEd,MAAMK,cAAc,GAAgB;MAClCD,IAAI,EAAEF,OAAO,CAACE,IAAI;MAClBE,MAAM,EAAE,MAAM;MACdC,cAAc,EAAE,QAAQ;MACxBC,OAAO,EAAEf,OAAO,CAACe,OAAO;MAC9B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACMC,SAAS,EAAEV,eAAgB,IAAG,SAAUC,YAAA,GAAe,EAAE;MACzD,GAAGP,OAAO,CAACiB;IACjB,CAAK;IAED,IAAI;MACF,OAAOhB,WAAW,CAACD,OAAO,CAACkB,GAAG,EAAEN,cAAc,CAAC,CAACO,IAAI,CAACC,QAAA,IAAY;QAC/Dd,eAAA,IAAmBI,WAAW;QAC9BH,YAAY,EAAE;QACd,OAAO;UACLc,UAAU,EAAED,QAAQ,CAACE,MAAM;UAC3BP,OAAO,EAAE;YACP,sBAAsB,EAAEK,QAAQ,CAACL,OAAO,CAACQ,GAAG,CAAC,sBAAsB,CAAC;YACpE,aAAa,EAAEH,QAAQ,CAACL,OAAO,CAACQ,GAAG,CAAC,aAAa;UAC7D;QACA,CAAS;MACT,CAAO,CAAC;IACR,CAAM,QAAOC,CAAC,EAAE;MACVC,8BAA8B,EAAE;MAChCnB,eAAA,IAAmBI,WAAW;MAC9BH,YAAY,EAAE;MACd,OAAOmB,mBAAmB,CAACF,CAAC,CAAC;IACnC;EACA;EAEE,OAAOG,eAAe,CAAC3B,OAAO,EAAEQ,WAAW,CAAC;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}