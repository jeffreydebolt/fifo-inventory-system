{"ast":null,"code":"import { timestampInSeconds, uuid4, dropUndefinedKeys } from '@sentry/utils';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nfunction makeSession(context) {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n  const session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session)\n  };\n  if (context) {\n    updateSession(session, context);\n  }\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nfunction updateSession(session) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n  session.timestamp = context.timestamp || timestampInSeconds();\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nfunction closeSession(session, status) {\n  let context = {};\n  if (status) {\n    context = {\n      status\n    };\n  } else if (session.status === 'ok') {\n    context = {\n      status: 'exited'\n    };\n  }\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session) {\n  return dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent\n    }\n  });\n}\nexport { closeSession, makeSession, updateSession };","map":{"version":3,"names":["makeSession","context","startingTime","timestampInSeconds","session","sid","uuid4","init","timestamp","started","duration","status","errors","ignoreDuration","toJSON","sessionToJSON","updateSession","arguments","length","undefined","user","ipAddress","ip_address","did","id","email","username","abnormal_mechanism","release","environment","userAgent","closeSession","dropUndefinedKeys","Date","toISOString","attrs","user_agent"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/@sentry/src/session.ts"],"sourcesContent":["import type { SerializedSession, Session, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}