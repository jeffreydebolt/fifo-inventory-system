{"ast":null,"code":"import { makePromiseBuffer, forEachEnvelopeItem, envelopeItemTypeToDataCategory, isRateLimited, resolvedSyncPromise, createEnvelope, SentryError, logger, serializeEnvelope, updateRateLimits } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nfunction createTransport(options, makeRequest) {\n  let buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : makePromiseBuffer(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE);\n  let rateLimits = {};\n  const flush = timeout => buffer.drain(timeout);\n  function send(envelope) {\n    const filteredEnvelopeItems = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const dataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, dataCategory)) {\n        const event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent('ratelimit_backoff', dataCategory, event);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredEnvelope = createEnvelope(envelope[0], filteredEnvelopeItems);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = reason => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        const event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type), event);\n      });\n    };\n    const requestTask = () => makeRequest({\n      body: serializeEnvelope(filteredEnvelope, options.textEncoder)\n    }).then(response => {\n      // We don't want to throw on NOK responses, but we want to at least log them\n      if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n        DEBUG_BUILD && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n      }\n      rateLimits = updateRateLimits(rateLimits, response);\n      return response;\n    }, error => {\n      recordEnvelopeLoss('network_error');\n      throw error;\n    });\n    return buffer.add(requestTask).then(result => result, error => {\n      if (error instanceof SentryError) {\n        DEBUG_BUILD && logger.error('Skipped sending event because buffer is full.');\n        recordEnvelopeLoss('queue_overflow');\n        return resolvedSyncPromise();\n      } else {\n        throw error;\n      }\n    });\n  }\n\n  // We use this to identifify if the transport is the base transport\n  // TODO (v8): Remove this again as we'll no longer need it\n  send.__sentry__baseTransport__ = true;\n  return {\n    send,\n    flush\n  };\n}\nfunction getEventForEnvelopeItem(item, type) {\n  if (type !== 'event' && type !== 'transaction') {\n    return undefined;\n  }\n  return Array.isArray(item) ? item[1] : undefined;\n}\nexport { DEFAULT_TRANSPORT_BUFFER_SIZE, createTransport };","map":{"version":3,"names":["DEFAULT_TRANSPORT_BUFFER_SIZE","createTransport","options","makeRequest","buffer","arguments","length","undefined","makePromiseBuffer","bufferSize","rateLimits","flush","timeout","drain","send","envelope","filteredEnvelopeItems","forEachEnvelopeItem","item","type","dataCategory","envelopeItemTypeToDataCategory","isRateLimited","event","getEventForEnvelopeItem","recordDroppedEvent","push","resolvedSyncPromise","filteredEnvelope","createEnvelope","recordEnvelopeLoss","reason","requestTask","body","serializeEnvelope","textEncoder","then","response","statusCode","DEBUG_BUILD","logger","warn","updateRateLimits","error","add","result","SentryError","__sentry__baseTransport__","Array","isArray"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/@sentry/src/transports/base.ts"],"sourcesContent":["import type {\n  Envelope,\n  EnvelopeItem,\n  EnvelopeItemType,\n  Event,\n  EventDropReason,\n  EventItem,\n  InternalBaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequestExecutor,\n} from '@sentry/types';\nimport type { PromiseBuffer, RateLimits } from '@sentry/utils';\nimport {\n  SentryError,\n  createEnvelope,\n  envelopeItemTypeToDataCategory,\n  forEachEnvelopeItem,\n  isRateLimited,\n  logger,\n  makePromiseBuffer,\n  resolvedSyncPromise,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<void | TransportMakeRequestResponse> = makePromiseBuffer(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n): Transport {\n  let rateLimits: RateLimits = {};\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<void | TransportMakeRequestResponse> {\n    const filteredEnvelopeItems: EnvelopeItem[] = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const dataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, dataCategory)) {\n        const event: Event | undefined = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent('ratelimit_backoff', dataCategory, event);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredEnvelope: Envelope = createEnvelope(envelope[0], filteredEnvelopeItems as any);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason: EventDropReason): void => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        const event: Event | undefined = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type), event);\n      });\n    };\n\n    const requestTask = (): PromiseLike<void | TransportMakeRequestResponse> =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope, options.textEncoder) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            DEBUG_BUILD && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error instanceof SentryError) {\n          DEBUG_BUILD && logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise();\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  // We use this to identifify if the transport is the base transport\n  // TODO (v8): Remove this again as we'll no longer need it\n  send.__sentry__baseTransport__ = true;\n\n  return {\n    send,\n    flush,\n  };\n}\n\nfunction getEventForEnvelopeItem(item: Envelope[1][number], type: EnvelopeItemType): Event | undefined {\n  if (type !== 'event' && type !== 'transaction') {\n    return undefined;\n  }\n\n  return Array.isArray(item) ? (item as EventItem)[1] : undefined;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}