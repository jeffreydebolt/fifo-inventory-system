{"ast":null,"code":"import { isThenable } from '@sentry/utils';\n\n/**\n * Wrap a callback function with error handling.\n * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n *\n * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n *\n * If an `onFinally` callback is provided, this will be called when the callback has finished\n * - so if it returns a promise, once the promise resolved/rejected,\n * else once the callback has finished executing.\n * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n */\nfunction handleCallbackErrors(fn, onError) {\n  let onFinally = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  let maybePromiseResult;\n  try {\n    maybePromiseResult = fn();\n  } catch (e) {\n    onError(e);\n    onFinally();\n    throw e;\n  }\n  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n}\n\n/**\n * Maybe handle a promise rejection.\n * This expects to be given a value that _may_ be a promise, or any other value.\n * If it is a promise, and it rejects, it will call the `onError` callback.\n * Other than this, it will generally return the given value as-is.\n */\nfunction maybeHandlePromiseRejection(value, onError, onFinally) {\n  if (isThenable(value)) {\n    // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n    return value.then(res => {\n      onFinally();\n      return res;\n    }, e => {\n      onError(e);\n      onFinally();\n      throw e;\n    });\n  }\n  onFinally();\n  return value;\n}\nexport { handleCallbackErrors };","map":{"version":3,"names":["handleCallbackErrors","fn","onError","onFinally","arguments","length","undefined","maybePromiseResult","e","maybeHandlePromiseRejection","value","isThenable","then","res"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/@sentry/src/utils/handleCallbackErrors.ts"],"sourcesContent":["import { isThenable } from '@sentry/utils';\n\n/**\n * Wrap a callback function with error handling.\n * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n *\n * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n *\n * If an `onFinally` callback is provided, this will be called when the callback has finished\n * - so if it returns a promise, once the promise resolved/rejected,\n * else once the callback has finished executing.\n * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n */\nexport function handleCallbackErrors<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Fn extends () => any,\n>(\n  fn: Fn,\n  onError: (error: unknown) => void,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onFinally: () => void = () => {},\n): ReturnType<Fn> {\n  let maybePromiseResult: ReturnType<Fn>;\n  try {\n    maybePromiseResult = fn();\n  } catch (e) {\n    onError(e);\n    onFinally();\n    throw e;\n  }\n\n  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n}\n\n/**\n * Maybe handle a promise rejection.\n * This expects to be given a value that _may_ be a promise, or any other value.\n * If it is a promise, and it rejects, it will call the `onError` callback.\n * Other than this, it will generally return the given value as-is.\n */\nfunction maybeHandlePromiseRejection<MaybePromise>(\n  value: MaybePromise,\n  onError: (error: unknown) => void,\n  onFinally: () => void,\n): MaybePromise {\n  if (isThenable(value)) {\n    // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n    return value.then(\n      res => {\n        onFinally();\n        return res;\n      },\n      e => {\n        onError(e);\n        onFinally();\n        throw e;\n      },\n    );\n  }\n\n  onFinally();\n  return value;\n}\n"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,oBAAoBA,CAIlCC,EAAE,EACFC,OAAO,EAGS;EAAA,IADhBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAe,MAAM,EAAE;EAEhC,IAAIG,kBAAkB;EACtB,IAAI;IACFA,kBAAmB,GAAEN,EAAE,EAAE;EAC7B,CAAI,QAAOO,CAAC,EAAE;IACVN,OAAO,CAACM,CAAC,CAAC;IACVL,SAAS,EAAE;IACX,MAAMK,CAAC;EACX;EAEE,OAAOC,2BAA2B,CAACF,kBAAkB,EAAEL,OAAO,EAAEC,SAAS,CAAC;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,2BAA2BA,CAClCC,KAAK,EACLR,OAAO,EACPC,SAAS,EACK;EACd,IAAIQ,UAAU,CAACD,KAAK,CAAC,EAAE;IACzB;IACI,OAAOA,KAAK,CAACE,IAAI,CACfC,GAAA,IAAO;MACLV,SAAS,EAAE;MACX,OAAOU,GAAG;IAClB,CAAO,EACDL,CAAA,IAAK;MACHN,OAAO,CAACM,CAAC,CAAC;MACVL,SAAS,EAAE;MACX,MAAMK,CAAC;IACf,CACA,CAAK;EACL;EAEEL,SAAS,EAAE;EACX,OAAOO,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}