{"ast":null,"code":"import { logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { getClient, getCurrentScope } from '../exports.js';\nimport { spanToJSON } from '../utils/spanUtils.js';\nimport { COUNTER_METRIC_TYPE, DISTRIBUTION_METRIC_TYPE, SET_METRIC_TYPE, GAUGE_METRIC_TYPE } from './constants.js';\nimport { MetricsAggregator, metricsAggregatorIntegration } from './integration.js';\nfunction addToMetricsAggregator(metricType, name, value) {\n  let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const client = getClient();\n  const scope = getCurrentScope();\n  if (client) {\n    if (!client.metricsAggregator) {\n      DEBUG_BUILD && logger.warn('No metrics aggregator enabled. Please add the MetricsAggregator integration to use metrics APIs');\n      return;\n    }\n    const {\n      unit,\n      tags,\n      timestamp\n    } = data;\n    const {\n      release,\n      environment\n    } = client.getOptions();\n    // eslint-disable-next-line deprecation/deprecation\n    const transaction = scope.getTransaction();\n    const metricTags = {};\n    if (release) {\n      metricTags.release = release;\n    }\n    if (environment) {\n      metricTags.environment = environment;\n    }\n    if (transaction) {\n      metricTags.transaction = spanToJSON(transaction).description || '';\n    }\n    DEBUG_BUILD && logger.log(`Adding value of ${value} to ${metricType} metric ${name}`);\n    client.metricsAggregator.add(metricType, name, value, unit, {\n      ...metricTags,\n      ...tags\n    }, timestamp);\n  }\n}\n\n/**\n * Adds a value to a counter metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction increment(name) {\n  let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let data = arguments.length > 2 ? arguments[2] : undefined;\n  addToMetricsAggregator(COUNTER_METRIC_TYPE, name, value, data);\n}\n\n/**\n * Adds a value to a distribution metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction distribution(name, value, data) {\n  addToMetricsAggregator(DISTRIBUTION_METRIC_TYPE, name, value, data);\n}\n\n/**\n * Adds a value to a set metric. Value must be a string or integer.\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction set(name, value, data) {\n  addToMetricsAggregator(SET_METRIC_TYPE, name, value, data);\n}\n\n/**\n * Adds a value to a gauge metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction gauge(name, value, data) {\n  addToMetricsAggregator(GAUGE_METRIC_TYPE, name, value, data);\n}\nconst metrics = {\n  increment,\n  distribution,\n  set,\n  gauge,\n  /** @deprecated Use `metrics.metricsAggregratorIntegration()` instead. */\n  // eslint-disable-next-line deprecation/deprecation\n  MetricsAggregator,\n  metricsAggregatorIntegration\n};\nexport { distribution, gauge, increment, metrics, set };","map":{"version":3,"names":["addToMetricsAggregator","metricType","name","value","data","arguments","length","undefined","client","getClient","scope","getCurrentScope","metricsAggregator","DEBUG_BUILD","logger","warn","unit","tags","timestamp","release","environment","getOptions","transaction","getTransaction","metricTags","spanToJSON","description","log","add","increment","COUNTER_METRIC_TYPE","distribution","DISTRIBUTION_METRIC_TYPE","set","SET_METRIC_TYPE","gauge","GAUGE_METRIC_TYPE","metrics","MetricsAggregator","metricsAggregatorIntegration"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/@sentry/src/metrics/exports.ts"],"sourcesContent":["import type { ClientOptions, MeasurementUnit, Primitive } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport type { BaseClient } from '../baseclient';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { getClient, getCurrentScope } from '../exports';\nimport { spanToJSON } from '../utils/spanUtils';\nimport { COUNTER_METRIC_TYPE, DISTRIBUTION_METRIC_TYPE, GAUGE_METRIC_TYPE, SET_METRIC_TYPE } from './constants';\nimport { MetricsAggregator, metricsAggregatorIntegration } from './integration';\nimport type { MetricType } from './types';\n\ninterface MetricData {\n  unit?: MeasurementUnit;\n  tags?: Record<string, Primitive>;\n  timestamp?: number;\n}\n\nfunction addToMetricsAggregator(\n  metricType: MetricType,\n  name: string,\n  value: number | string,\n  data: MetricData | undefined = {},\n): void {\n  const client = getClient<BaseClient<ClientOptions>>();\n  const scope = getCurrentScope();\n  if (client) {\n    if (!client.metricsAggregator) {\n      DEBUG_BUILD &&\n        logger.warn('No metrics aggregator enabled. Please add the MetricsAggregator integration to use metrics APIs');\n      return;\n    }\n    const { unit, tags, timestamp } = data;\n    const { release, environment } = client.getOptions();\n    // eslint-disable-next-line deprecation/deprecation\n    const transaction = scope.getTransaction();\n    const metricTags: Record<string, string> = {};\n    if (release) {\n      metricTags.release = release;\n    }\n    if (environment) {\n      metricTags.environment = environment;\n    }\n    if (transaction) {\n      metricTags.transaction = spanToJSON(transaction).description || '';\n    }\n\n    DEBUG_BUILD && logger.log(`Adding value of ${value} to ${metricType} metric ${name}`);\n    client.metricsAggregator.add(metricType, name, value, unit, { ...metricTags, ...tags }, timestamp);\n  }\n}\n\n/**\n * Adds a value to a counter metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nexport function increment(name: string, value: number = 1, data?: MetricData): void {\n  addToMetricsAggregator(COUNTER_METRIC_TYPE, name, value, data);\n}\n\n/**\n * Adds a value to a distribution metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nexport function distribution(name: string, value: number, data?: MetricData): void {\n  addToMetricsAggregator(DISTRIBUTION_METRIC_TYPE, name, value, data);\n}\n\n/**\n * Adds a value to a set metric. Value must be a string or integer.\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nexport function set(name: string, value: number | string, data?: MetricData): void {\n  addToMetricsAggregator(SET_METRIC_TYPE, name, value, data);\n}\n\n/**\n * Adds a value to a gauge metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nexport function gauge(name: string, value: number, data?: MetricData): void {\n  addToMetricsAggregator(GAUGE_METRIC_TYPE, name, value, data);\n}\n\nexport const metrics = {\n  increment,\n  distribution,\n  set,\n  gauge,\n  /** @deprecated Use `metrics.metricsAggregratorIntegration()` instead. */\n  // eslint-disable-next-line deprecation/deprecation\n  MetricsAggregator,\n  metricsAggregatorIntegration,\n};\n"],"mappings":";;;;;;AAgBA,SAASA,sBAAsBA,CAC7BC,UAAU,EACVC,IAAI,EACJC,KAAK,EAEC;EAAA,IADNC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EAAE;EAEjC,MAAMG,MAAA,GAASC,SAAS,EAA6B;EACrD,MAAMC,KAAA,GAAQC,eAAe,EAAE;EAC/B,IAAIH,MAAM,EAAE;IACV,IAAI,CAACA,MAAM,CAACI,iBAAiB,EAAE;MAC7BC,WAAY,IACVC,MAAM,CAACC,IAAI,CAAC,iGAAiG,CAAC;MAChH;IACN;IACI,MAAM;MAAEC,IAAI;MAAEC,IAAI;MAAEC;IAAA,CAAY,GAAEd,IAAI;IACtC,MAAM;MAAEe,OAAO;MAAEC;IAAA,CAAc,GAAEZ,MAAM,CAACa,UAAU,EAAE;IACxD;IACI,MAAMC,WAAY,GAAEZ,KAAK,CAACa,cAAc,EAAE;IAC1C,MAAMC,UAAU,GAA2B,EAAE;IAC7C,IAAIL,OAAO,EAAE;MACXK,UAAU,CAACL,OAAQ,GAAEA,OAAO;IAClC;IACI,IAAIC,WAAW,EAAE;MACfI,UAAU,CAACJ,WAAY,GAAEA,WAAW;IAC1C;IACI,IAAIE,WAAW,EAAE;MACfE,UAAU,CAACF,WAAA,GAAcG,UAAU,CAACH,WAAW,CAAC,CAACI,WAAY,IAAG,EAAE;IACxE;IAEIb,WAAA,IAAeC,MAAM,CAACa,GAAG,CAAC,mBAAmBxB,KAAK,OAAOF,UAAU,WAAWC,IAAI,EAAC;IACAM,MAAA,CAAAI,iBAAA,CAAAgB,GAAA,CAAA3B,UAAA,EAAAC,IAAA,EAAAC,KAAA,EAAAa,IAAA;MAAA,GAAAQ,UAAA;MAAA,GAAAP;IAAA,GAAAC,SAAA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAAW,UAAA3B,IAAA;EAAA,IAAAC,KAAA,GAAAE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;EAAA,IAAAD,IAAA,GAAAC,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACAP,sBAAA,CAAA8B,mBAAA,EAAA5B,IAAA,EAAAC,KAAA,EAAAC,IAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAA2B,aAAA7B,IAAA,EAAAC,KAAA,EAAAC,IAAA;EACAJ,sBAAA,CAAAgC,wBAAA,EAAA9B,IAAA,EAAAC,KAAA,EAAAC,IAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAA6B,IAAA/B,IAAA,EAAAC,KAAA,EAAAC,IAAA;EACAJ,sBAAA,CAAAkC,eAAA,EAAAhC,IAAA,EAAAC,KAAA,EAAAC,IAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAA+B,MAAAjC,IAAA,EAAAC,KAAA,EAAAC,IAAA;EACAJ,sBAAA,CAAAoC,iBAAA,EAAAlC,IAAA,EAAAC,KAAA,EAAAC,IAAA;AACA;AAEA,MAAAiC,OAAA;EACAR,SAAA;EACAE,YAAA;EACAE,GAAA;EACAE,KAAA;EACA;EACA;EACAG,iBAAA;EACAC;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}