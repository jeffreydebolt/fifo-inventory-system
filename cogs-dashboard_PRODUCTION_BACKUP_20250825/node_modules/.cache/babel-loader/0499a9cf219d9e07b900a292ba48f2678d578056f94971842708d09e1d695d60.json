{"ast":null,"code":"import { _nullishCoalesce, _optionalChain } from '@sentry/utils';\nimport { addBreadcrumb, getClient, isSentryRequestUrl, getCurrentScope, addEventProcessor, prepareEvent, getIsolationScope, setContext, captureException, spanToJSON, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '@sentry/core';\nimport { GLOBAL_OBJ, normalize, fill, htmlTreeAsString, browserPerformanceTimeOrigin, logger, uuid4, SENTRY_XHR_DATA_KEY, dropUndefinedKeys, stringMatchesSomePattern, addFetchInstrumentationHandler, addXhrInstrumentationHandler, addClickKeypressInstrumentationHandler, addHistoryInstrumentationHandler, createEnvelope, createEventEnvelopeHeaders, getSdkMetadataForEnvelopeHeader, updateRateLimits, isRateLimited, consoleSandbox, isBrowser } from '@sentry/utils';\nimport { addPerformanceInstrumentationHandler, addLcpInstrumentationHandler } from '@sentry-internal/tracing';\n\n// exporting a separate copy of `WINDOW` rather than exporting the one from `@sentry/browser`\n// prevents the browser package from being bundled in the CDN bundle, and avoids a\n// circular dependency between the browser and replay packages should `@sentry/browser` import\n// from `@sentry/replay` in the future\nconst WINDOW = GLOBAL_OBJ;\nconst REPLAY_SESSION_KEY = 'sentryReplaySession';\nconst REPLAY_EVENT_NAME = 'replay_event';\nconst UNABLE_TO_SEND_REPLAY = 'Unable to send Replay';\n\n// The idle limit for a session after which recording is paused.\nconst SESSION_IDLE_PAUSE_DURATION = 300000; // 5 minutes in ms\n\n// The idle limit for a session after which the session expires.\nconst SESSION_IDLE_EXPIRE_DURATION = 900000; // 15 minutes in ms\n\n/** Default flush delays */\nconst DEFAULT_FLUSH_MIN_DELAY = 5000;\n// XXX: Temp fix for our debounce logic where `maxWait` would never occur if it\n// was the same as `wait`\nconst DEFAULT_FLUSH_MAX_DELAY = 5500;\n\n/* How long to wait for error checkouts */\nconst BUFFER_CHECKOUT_TIME = 60000;\nconst RETRY_BASE_INTERVAL = 5000;\nconst RETRY_MAX_COUNT = 3;\n\n/* The max (uncompressed) size in bytes of a network body. Any body larger than this will be truncated. */\nconst NETWORK_BODY_MAX_SIZE = 150000;\n\n/* The max size of a single console arg that is captured. Any arg larger than this will be truncated. */\nconst CONSOLE_ARG_MAX_SIZE = 5000;\n\n/* Min. time to wait before we consider something a slow click. */\nconst SLOW_CLICK_THRESHOLD = 3000;\n/* For scroll actions after a click, we only look for a very short time period to detect programmatic scrolling. */\nconst SLOW_CLICK_SCROLL_TIMEOUT = 300;\n\n/** When encountering a total segment size exceeding this size, stop the replay (as we cannot properly ingest it). */\nconst REPLAY_MAX_EVENT_BUFFER_SIZE = 20000000; // ~20MB\n\n/** Replays must be min. 5s long before we send them. */\nconst MIN_REPLAY_DURATION = 4999;\n/* The max. allowed value that the minReplayDuration can be set to. */\nconst MIN_REPLAY_DURATION_LIMIT = 15000;\n\n/** The max. length of a replay. */\nconst MAX_REPLAY_DURATION = 3600000; // 60 minutes in ms;\n\nfunction _nullishCoalesce$1(lhs, rhsFn) {\n  if (lhs != null) {\n    return lhs;\n  } else {\n    return rhsFn();\n  }\n}\nfunction _optionalChain$5(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn(function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return value.call(lastAccessLHS, ...args);\n      });\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\nvar NodeType$1;\n(function (NodeType) {\n  NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n  NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n  NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n  NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n  NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n  NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType$1 || (NodeType$1 = {}));\nfunction isElement$1(n) {\n  return n.nodeType === n.ELEMENT_NODE;\n}\nfunction isShadowRoot(n) {\n  const host = _optionalChain$5([n, 'optionalAccess', _ => _.host]);\n  return Boolean(_optionalChain$5([host, 'optionalAccess', _2 => _2.shadowRoot]) === n);\n}\nfunction isNativeShadowDom(shadowRoot) {\n  return Object.prototype.toString.call(shadowRoot) === '[object ShadowRoot]';\n}\nfunction fixBrowserCompatibilityIssuesInCSS(cssText) {\n  if (cssText.includes(' background-clip: text;') && !cssText.includes(' -webkit-background-clip: text;')) {\n    cssText = cssText.replace(' background-clip: text;', ' -webkit-background-clip: text; background-clip: text;');\n  }\n  return cssText;\n}\nfunction escapeImportStatement(rule) {\n  const {\n    cssText\n  } = rule;\n  if (cssText.split('\"').length < 3) return cssText;\n  const statement = ['@import', `url(${JSON.stringify(rule.href)})`];\n  if (rule.layerName === '') {\n    statement.push(`layer`);\n  } else if (rule.layerName) {\n    statement.push(`layer(${rule.layerName})`);\n  }\n  if (rule.supportsText) {\n    statement.push(`supports(${rule.supportsText})`);\n  }\n  if (rule.media.length) {\n    statement.push(rule.media.mediaText);\n  }\n  return statement.join(' ') + ';';\n}\nfunction stringifyStylesheet(s) {\n  try {\n    const rules = s.rules || s.cssRules;\n    return rules ? fixBrowserCompatibilityIssuesInCSS(Array.from(rules, stringifyRule).join('')) : null;\n  } catch (error) {\n    return null;\n  }\n}\nfunction stringifyRule(rule) {\n  let importStringified;\n  if (isCSSImportRule(rule)) {\n    try {\n      importStringified = stringifyStylesheet(rule.styleSheet) || escapeImportStatement(rule);\n    } catch (error) {}\n  } else if (isCSSStyleRule(rule) && rule.selectorText.includes(':')) {\n    return fixSafariColons(rule.cssText);\n  }\n  return importStringified || rule.cssText;\n}\nfunction fixSafariColons(cssStringified) {\n  const regex = /(\\[(?:[\\w-]+)[^\\\\])(:(?:[\\w-]+)\\])/gm;\n  return cssStringified.replace(regex, '$1\\\\$2');\n}\nfunction isCSSImportRule(rule) {\n  return 'styleSheet' in rule;\n}\nfunction isCSSStyleRule(rule) {\n  return 'selectorText' in rule;\n}\nclass Mirror {\n  constructor() {\n    this.idNodeMap = new Map();\n    this.nodeMetaMap = new WeakMap();\n  }\n  getId(n) {\n    if (!n) return -1;\n    const id = _optionalChain$5([this, 'access', _3 => _3.getMeta, 'call', _4 => _4(n), 'optionalAccess', _5 => _5.id]);\n    return _nullishCoalesce$1(id, () => -1);\n  }\n  getNode(id) {\n    return this.idNodeMap.get(id) || null;\n  }\n  getIds() {\n    return Array.from(this.idNodeMap.keys());\n  }\n  getMeta(n) {\n    return this.nodeMetaMap.get(n) || null;\n  }\n  removeNodeFromMap(n) {\n    const id = this.getId(n);\n    this.idNodeMap.delete(id);\n    if (n.childNodes) {\n      n.childNodes.forEach(childNode => this.removeNodeFromMap(childNode));\n    }\n  }\n  has(id) {\n    return this.idNodeMap.has(id);\n  }\n  hasNode(node) {\n    return this.nodeMetaMap.has(node);\n  }\n  add(n, meta) {\n    const id = meta.id;\n    this.idNodeMap.set(id, n);\n    this.nodeMetaMap.set(n, meta);\n  }\n  replace(id, n) {\n    const oldNode = this.getNode(id);\n    if (oldNode) {\n      const meta = this.nodeMetaMap.get(oldNode);\n      if (meta) this.nodeMetaMap.set(n, meta);\n    }\n    this.idNodeMap.set(id, n);\n  }\n  reset() {\n    this.idNodeMap = new Map();\n    this.nodeMetaMap = new WeakMap();\n  }\n}\nfunction createMirror() {\n  return new Mirror();\n}\nfunction shouldMaskInput(_ref) {\n  let {\n    maskInputOptions,\n    tagName,\n    type\n  } = _ref;\n  if (tagName === 'OPTION') {\n    tagName = 'SELECT';\n  }\n  return Boolean(maskInputOptions[tagName.toLowerCase()] || type && maskInputOptions[type] || type === 'password' || tagName === 'INPUT' && !type && maskInputOptions['text']);\n}\nfunction maskInputValue(_ref2) {\n  let {\n    isMasked,\n    element,\n    value,\n    maskInputFn\n  } = _ref2;\n  let text = value || '';\n  if (!isMasked) {\n    return text;\n  }\n  if (maskInputFn) {\n    text = maskInputFn(text, element);\n  }\n  return '*'.repeat(text.length);\n}\nfunction toLowerCase(str) {\n  return str.toLowerCase();\n}\nfunction toUpperCase(str) {\n  return str.toUpperCase();\n}\nconst ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\nfunction is2DCanvasBlank(canvas) {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return true;\n  const chunkSize = 50;\n  for (let x = 0; x < canvas.width; x += chunkSize) {\n    for (let y = 0; y < canvas.height; y += chunkSize) {\n      const getImageData = ctx.getImageData;\n      const originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData ? getImageData[ORIGINAL_ATTRIBUTE_NAME] : getImageData;\n      const pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);\n      if (pixelBuffer.some(pixel => pixel !== 0)) return false;\n    }\n  }\n  return true;\n}\nfunction getInputType(element) {\n  const type = element.type;\n  return element.hasAttribute('data-rr-is-password') ? 'password' : type ? toLowerCase(type) : null;\n}\nfunction getInputValue(el, tagName, type) {\n  if (tagName === 'INPUT' && (type === 'radio' || type === 'checkbox')) {\n    return el.getAttribute('value') || '';\n  }\n  return el.value;\n}\nlet _id = 1;\nconst tagNameRegex = new RegExp('[^a-z0-9-_:]');\nconst IGNORED_NODE = -2;\nfunction genId() {\n  return _id++;\n}\nfunction getValidTagName(element) {\n  if (element instanceof HTMLFormElement) {\n    return 'form';\n  }\n  const processedTagName = toLowerCase(element.tagName);\n  if (tagNameRegex.test(processedTagName)) {\n    return 'div';\n  }\n  return processedTagName;\n}\nfunction extractOrigin(url) {\n  let origin = '';\n  if (url.indexOf('//') > -1) {\n    origin = url.split('/').slice(0, 3).join('/');\n  } else {\n    origin = url.split('/')[0];\n  }\n  origin = origin.split('?')[0];\n  return origin;\n}\nlet canvasService;\nlet canvasCtx;\nconst URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")(.*?)\"|([^)]*))\\)/gm;\nconst URL_PROTOCOL_MATCH = /^(?:[a-z+]+:)?\\/\\//i;\nconst URL_WWW_MATCH = /^www\\..*/i;\nconst DATA_URI = /^(data:)([^,]*),(.*)/i;\nfunction absoluteToStylesheet(cssText, href) {\n  return (cssText || '').replace(URL_IN_CSS_REF, (origin, quote1, path1, quote2, path2, path3) => {\n    const filePath = path1 || path2 || path3;\n    const maybeQuote = quote1 || quote2 || '';\n    if (!filePath) {\n      return origin;\n    }\n    if (URL_PROTOCOL_MATCH.test(filePath) || URL_WWW_MATCH.test(filePath)) {\n      return `url(${maybeQuote}${filePath}${maybeQuote})`;\n    }\n    if (DATA_URI.test(filePath)) {\n      return `url(${maybeQuote}${filePath}${maybeQuote})`;\n    }\n    if (filePath[0] === '/') {\n      return `url(${maybeQuote}${extractOrigin(href) + filePath}${maybeQuote})`;\n    }\n    const stack = href.split('/');\n    const parts = filePath.split('/');\n    stack.pop();\n    for (const part of parts) {\n      if (part === '.') {\n        continue;\n      } else if (part === '..') {\n        stack.pop();\n      } else {\n        stack.push(part);\n      }\n    }\n    return `url(${maybeQuote}${stack.join('/')}${maybeQuote})`;\n  });\n}\nconst SRCSET_NOT_SPACES = /^[^ \\t\\n\\r\\u000c]+/;\nconst SRCSET_COMMAS_OR_SPACES = /^[, \\t\\n\\r\\u000c]+/;\nfunction getAbsoluteSrcsetString(doc, attributeValue) {\n  if (attributeValue.trim() === '') {\n    return attributeValue;\n  }\n  let pos = 0;\n  function collectCharacters(regEx) {\n    let chars;\n    const match = regEx.exec(attributeValue.substring(pos));\n    if (match) {\n      chars = match[0];\n      pos += chars.length;\n      return chars;\n    }\n    return '';\n  }\n  const output = [];\n  while (true) {\n    collectCharacters(SRCSET_COMMAS_OR_SPACES);\n    if (pos >= attributeValue.length) {\n      break;\n    }\n    let url = collectCharacters(SRCSET_NOT_SPACES);\n    if (url.slice(-1) === ',') {\n      url = absoluteToDoc(doc, url.substring(0, url.length - 1));\n      output.push(url);\n    } else {\n      let descriptorsStr = '';\n      url = absoluteToDoc(doc, url);\n      let inParens = false;\n      while (true) {\n        const c = attributeValue.charAt(pos);\n        if (c === '') {\n          output.push((url + descriptorsStr).trim());\n          break;\n        } else if (!inParens) {\n          if (c === ',') {\n            pos += 1;\n            output.push((url + descriptorsStr).trim());\n            break;\n          } else if (c === '(') {\n            inParens = true;\n          }\n        } else {\n          if (c === ')') {\n            inParens = false;\n          }\n        }\n        descriptorsStr += c;\n        pos += 1;\n      }\n    }\n  }\n  return output.join(', ');\n}\nfunction absoluteToDoc(doc, attributeValue) {\n  if (!attributeValue || attributeValue.trim() === '') {\n    return attributeValue;\n  }\n  const a = doc.createElement('a');\n  a.href = attributeValue;\n  return a.href;\n}\nfunction isSVGElement(el) {\n  return Boolean(el.tagName === 'svg' || el.ownerSVGElement);\n}\nfunction getHref() {\n  const a = document.createElement('a');\n  a.href = '';\n  return a.href;\n}\nfunction transformAttribute(doc, tagName, name, value, element, maskAttributeFn) {\n  if (!value) {\n    return value;\n  }\n  if (name === 'src' || name === 'href' && !(tagName === 'use' && value[0] === '#')) {\n    return absoluteToDoc(doc, value);\n  } else if (name === 'xlink:href' && value[0] !== '#') {\n    return absoluteToDoc(doc, value);\n  } else if (name === 'background' && (tagName === 'table' || tagName === 'td' || tagName === 'th')) {\n    return absoluteToDoc(doc, value);\n  } else if (name === 'srcset') {\n    return getAbsoluteSrcsetString(doc, value);\n  } else if (name === 'style') {\n    return absoluteToStylesheet(value, getHref());\n  } else if (tagName === 'object' && name === 'data') {\n    return absoluteToDoc(doc, value);\n  }\n  if (typeof maskAttributeFn === 'function') {\n    return maskAttributeFn(name, value, element);\n  }\n  return value;\n}\nfunction ignoreAttribute(tagName, name, _value) {\n  return (tagName === 'video' || tagName === 'audio') && name === 'autoplay';\n}\nfunction _isBlockedElement(element, blockClass, blockSelector, unblockSelector) {\n  try {\n    if (unblockSelector && element.matches(unblockSelector)) {\n      return false;\n    }\n    if (typeof blockClass === 'string') {\n      if (element.classList.contains(blockClass)) {\n        return true;\n      }\n    } else {\n      for (let eIndex = element.classList.length; eIndex--;) {\n        const className = element.classList[eIndex];\n        if (blockClass.test(className)) {\n          return true;\n        }\n      }\n    }\n    if (blockSelector) {\n      return element.matches(blockSelector);\n    }\n  } catch (e) {}\n  return false;\n}\nfunction elementClassMatchesRegex(el, regex) {\n  for (let eIndex = el.classList.length; eIndex--;) {\n    const className = el.classList[eIndex];\n    if (regex.test(className)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction distanceToMatch(node, matchPredicate) {\n  let limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  let distance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  if (!node) return -1;\n  if (node.nodeType !== node.ELEMENT_NODE) return -1;\n  if (distance > limit) return -1;\n  if (matchPredicate(node)) return distance;\n  return distanceToMatch(node.parentNode, matchPredicate, limit, distance + 1);\n}\nfunction createMatchPredicate(className, selector) {\n  return node => {\n    const el = node;\n    if (el === null) return false;\n    try {\n      if (className) {\n        if (typeof className === 'string') {\n          if (el.matches(`.${className}`)) return true;\n        } else if (elementClassMatchesRegex(el, className)) {\n          return true;\n        }\n      }\n      if (selector && el.matches(selector)) return true;\n      return false;\n    } catch (e2) {\n      return false;\n    }\n  };\n}\nfunction needMaskingText(node, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText) {\n  try {\n    const el = node.nodeType === node.ELEMENT_NODE ? node : node.parentElement;\n    if (el === null) return false;\n    if (el.tagName === 'INPUT') {\n      const autocomplete = el.getAttribute('autocomplete');\n      const disallowedAutocompleteValues = ['current-password', 'new-password', 'cc-number', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-csc'];\n      if (disallowedAutocompleteValues.includes(autocomplete)) {\n        return true;\n      }\n    }\n    let maskDistance = -1;\n    let unmaskDistance = -1;\n    if (maskAllText) {\n      unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector));\n      if (unmaskDistance < 0) {\n        return true;\n      }\n      maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector), unmaskDistance >= 0 ? unmaskDistance : Infinity);\n    } else {\n      maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector));\n      if (maskDistance < 0) {\n        return false;\n      }\n      unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector), maskDistance >= 0 ? maskDistance : Infinity);\n    }\n    return maskDistance >= 0 ? unmaskDistance >= 0 ? maskDistance <= unmaskDistance : true : unmaskDistance >= 0 ? false : !!maskAllText;\n  } catch (e) {}\n  return !!maskAllText;\n}\nfunction onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {\n  const win = iframeEl.contentWindow;\n  if (!win) {\n    return;\n  }\n  let fired = false;\n  let readyState;\n  try {\n    readyState = win.document.readyState;\n  } catch (error) {\n    return;\n  }\n  if (readyState !== 'complete') {\n    const timer = setTimeout(() => {\n      if (!fired) {\n        listener();\n        fired = true;\n      }\n    }, iframeLoadTimeout);\n    iframeEl.addEventListener('load', () => {\n      clearTimeout(timer);\n      fired = true;\n      listener();\n    });\n    return;\n  }\n  const blankUrl = 'about:blank';\n  if (win.location.href !== blankUrl || iframeEl.src === blankUrl || iframeEl.src === '') {\n    setTimeout(listener, 0);\n    return iframeEl.addEventListener('load', listener);\n  }\n  iframeEl.addEventListener('load', listener);\n}\nfunction onceStylesheetLoaded(link, listener, styleSheetLoadTimeout) {\n  let fired = false;\n  let styleSheetLoaded;\n  try {\n    styleSheetLoaded = link.sheet;\n  } catch (error) {\n    return;\n  }\n  if (styleSheetLoaded) return;\n  const timer = setTimeout(() => {\n    if (!fired) {\n      listener();\n      fired = true;\n    }\n  }, styleSheetLoadTimeout);\n  link.addEventListener('load', () => {\n    clearTimeout(timer);\n    fired = true;\n    listener();\n  });\n}\nfunction serializeNode(n, options) {\n  const {\n    doc,\n    mirror,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    maskAllText,\n    maskAttributeFn,\n    maskTextClass,\n    unmaskTextClass,\n    maskTextSelector,\n    unmaskTextSelector,\n    inlineStylesheet,\n    maskInputOptions = {},\n    maskTextFn,\n    maskInputFn,\n    dataURLOptions = {},\n    inlineImages,\n    recordCanvas,\n    keepIframeSrcFn,\n    newlyAddedElement = false\n  } = options;\n  const rootId = getRootId(doc, mirror);\n  switch (n.nodeType) {\n    case n.DOCUMENT_NODE:\n      if (n.compatMode !== 'CSS1Compat') {\n        return {\n          type: NodeType$1.Document,\n          childNodes: [],\n          compatMode: n.compatMode\n        };\n      } else {\n        return {\n          type: NodeType$1.Document,\n          childNodes: []\n        };\n      }\n    case n.DOCUMENT_TYPE_NODE:\n      return {\n        type: NodeType$1.DocumentType,\n        name: n.name,\n        publicId: n.publicId,\n        systemId: n.systemId,\n        rootId\n      };\n    case n.ELEMENT_NODE:\n      return serializeElementNode(n, {\n        doc,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        inlineStylesheet,\n        maskAttributeFn,\n        maskInputOptions,\n        maskInputFn,\n        dataURLOptions,\n        inlineImages,\n        recordCanvas,\n        keepIframeSrcFn,\n        newlyAddedElement,\n        rootId,\n        maskAllText,\n        maskTextClass,\n        unmaskTextClass,\n        maskTextSelector,\n        unmaskTextSelector\n      });\n    case n.TEXT_NODE:\n      return serializeTextNode(n, {\n        maskAllText,\n        maskTextClass,\n        unmaskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        maskTextFn,\n        maskInputOptions,\n        maskInputFn,\n        rootId\n      });\n    case n.CDATA_SECTION_NODE:\n      return {\n        type: NodeType$1.CDATA,\n        textContent: '',\n        rootId\n      };\n    case n.COMMENT_NODE:\n      return {\n        type: NodeType$1.Comment,\n        textContent: n.textContent || '',\n        rootId\n      };\n    default:\n      return false;\n  }\n}\nfunction getRootId(doc, mirror) {\n  if (!mirror.hasNode(doc)) return undefined;\n  const docId = mirror.getId(doc);\n  return docId === 1 ? undefined : docId;\n}\nfunction serializeTextNode(n, options) {\n  const {\n    maskAllText,\n    maskTextClass,\n    unmaskTextClass,\n    maskTextSelector,\n    unmaskTextSelector,\n    maskTextFn,\n    maskInputOptions,\n    maskInputFn,\n    rootId\n  } = options;\n  const parentTagName = n.parentNode && n.parentNode.tagName;\n  let textContent = n.textContent;\n  const isStyle = parentTagName === 'STYLE' ? true : undefined;\n  const isScript = parentTagName === 'SCRIPT' ? true : undefined;\n  const isTextarea = parentTagName === 'TEXTAREA' ? true : undefined;\n  if (isStyle && textContent) {\n    try {\n      if (n.nextSibling || n.previousSibling) {} else if (_optionalChain$5([n, 'access', _6 => _6.parentNode, 'access', _7 => _7.sheet, 'optionalAccess', _8 => _8.cssRules])) {\n        textContent = stringifyStylesheet(n.parentNode.sheet);\n      }\n    } catch (err) {\n      console.warn(`Cannot get CSS styles from text's parentNode. Error: ${err}`, n);\n    }\n    textContent = absoluteToStylesheet(textContent, getHref());\n  }\n  if (isScript) {\n    textContent = 'SCRIPT_PLACEHOLDER';\n  }\n  const forceMask = needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText);\n  if (!isStyle && !isScript && !isTextarea && textContent && forceMask) {\n    textContent = maskTextFn ? maskTextFn(textContent, n.parentElement) : textContent.replace(/[\\S]/g, '*');\n  }\n  if (isTextarea && textContent && (maskInputOptions.textarea || forceMask)) {\n    textContent = maskInputFn ? maskInputFn(textContent, n.parentNode) : textContent.replace(/[\\S]/g, '*');\n  }\n  if (parentTagName === 'OPTION' && textContent) {\n    const isInputMasked = shouldMaskInput({\n      type: null,\n      tagName: parentTagName,\n      maskInputOptions\n    });\n    textContent = maskInputValue({\n      isMasked: needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, isInputMasked),\n      element: n,\n      value: textContent,\n      maskInputFn\n    });\n  }\n  return {\n    type: NodeType$1.Text,\n    textContent: textContent || '',\n    isStyle,\n    rootId\n  };\n}\nfunction serializeElementNode(n, options) {\n  const {\n    doc,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    inlineStylesheet,\n    maskInputOptions = {},\n    maskAttributeFn,\n    maskInputFn,\n    dataURLOptions = {},\n    inlineImages,\n    recordCanvas,\n    keepIframeSrcFn,\n    newlyAddedElement = false,\n    rootId,\n    maskAllText,\n    maskTextClass,\n    unmaskTextClass,\n    maskTextSelector,\n    unmaskTextSelector\n  } = options;\n  const needBlock = _isBlockedElement(n, blockClass, blockSelector, unblockSelector);\n  const tagName = getValidTagName(n);\n  let attributes = {};\n  const len = n.attributes.length;\n  for (let i = 0; i < len; i++) {\n    const attr = n.attributes[i];\n    if (attr.name && !ignoreAttribute(tagName, attr.name, attr.value)) {\n      attributes[attr.name] = transformAttribute(doc, tagName, toLowerCase(attr.name), attr.value, n, maskAttributeFn);\n    }\n  }\n  if (tagName === 'link' && inlineStylesheet) {\n    const stylesheet = Array.from(doc.styleSheets).find(s => {\n      return s.href === n.href;\n    });\n    let cssText = null;\n    if (stylesheet) {\n      cssText = stringifyStylesheet(stylesheet);\n    }\n    if (cssText) {\n      delete attributes.rel;\n      delete attributes.href;\n      attributes._cssText = absoluteToStylesheet(cssText, stylesheet.href);\n    }\n  }\n  if (tagName === 'style' && n.sheet && !(n.innerText || n.textContent || '').trim().length) {\n    const cssText = stringifyStylesheet(n.sheet);\n    if (cssText) {\n      attributes._cssText = absoluteToStylesheet(cssText, getHref());\n    }\n  }\n  if (tagName === 'input' || tagName === 'textarea' || tagName === 'select' || tagName === 'option') {\n    const el = n;\n    const type = getInputType(el);\n    const value = getInputValue(el, toUpperCase(tagName), type);\n    const checked = el.checked;\n    if (type !== 'submit' && type !== 'button' && value) {\n      const forceMask = needMaskingText(el, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, shouldMaskInput({\n        type,\n        tagName: toUpperCase(tagName),\n        maskInputOptions\n      }));\n      attributes.value = maskInputValue({\n        isMasked: forceMask,\n        element: el,\n        value,\n        maskInputFn\n      });\n    }\n    if (checked) {\n      attributes.checked = checked;\n    }\n  }\n  if (tagName === 'option') {\n    if (n.selected && !maskInputOptions['select']) {\n      attributes.selected = true;\n    } else {\n      delete attributes.selected;\n    }\n  }\n  if (tagName === 'canvas' && recordCanvas) {\n    if (n.__context === '2d') {\n      if (!is2DCanvasBlank(n)) {\n        attributes.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n      }\n    } else if (!('__context' in n)) {\n      const canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n      const blankCanvas = document.createElement('canvas');\n      blankCanvas.width = n.width;\n      blankCanvas.height = n.height;\n      const blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n      if (canvasDataURL !== blankCanvasDataURL) {\n        attributes.rr_dataURL = canvasDataURL;\n      }\n    }\n  }\n  if (tagName === 'img' && inlineImages) {\n    if (!canvasService) {\n      canvasService = doc.createElement('canvas');\n      canvasCtx = canvasService.getContext('2d');\n    }\n    const image = n;\n    const oldValue = image.crossOrigin;\n    image.crossOrigin = 'anonymous';\n    const recordInlineImage = () => {\n      image.removeEventListener('load', recordInlineImage);\n      try {\n        canvasService.width = image.naturalWidth;\n        canvasService.height = image.naturalHeight;\n        canvasCtx.drawImage(image, 0, 0);\n        attributes.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n      } catch (err) {\n        console.warn(`Cannot inline img src=${image.currentSrc}! Error: ${err}`);\n      }\n      oldValue ? attributes.crossOrigin = oldValue : image.removeAttribute('crossorigin');\n    };\n    if (image.complete && image.naturalWidth !== 0) recordInlineImage();else image.addEventListener('load', recordInlineImage);\n  }\n  if (tagName === 'audio' || tagName === 'video') {\n    attributes.rr_mediaState = n.paused ? 'paused' : 'played';\n    attributes.rr_mediaCurrentTime = n.currentTime;\n  }\n  if (!newlyAddedElement) {\n    if (n.scrollLeft) {\n      attributes.rr_scrollLeft = n.scrollLeft;\n    }\n    if (n.scrollTop) {\n      attributes.rr_scrollTop = n.scrollTop;\n    }\n  }\n  if (needBlock) {\n    const {\n      width,\n      height\n    } = n.getBoundingClientRect();\n    attributes = {\n      class: attributes.class,\n      rr_width: `${width}px`,\n      rr_height: `${height}px`\n    };\n  }\n  if (tagName === 'iframe' && !keepIframeSrcFn(attributes.src)) {\n    if (!n.contentDocument) {\n      attributes.rr_src = attributes.src;\n    }\n    delete attributes.src;\n  }\n  let isCustomElement;\n  try {\n    if (customElements.get(tagName)) isCustomElement = true;\n  } catch (e) {}\n  return {\n    type: NodeType$1.Element,\n    tagName,\n    attributes,\n    childNodes: [],\n    isSVG: isSVGElement(n) || undefined,\n    needBlock,\n    rootId,\n    isCustom: isCustomElement\n  };\n}\nfunction lowerIfExists(maybeAttr) {\n  if (maybeAttr === undefined || maybeAttr === null) {\n    return '';\n  } else {\n    return maybeAttr.toLowerCase();\n  }\n}\nfunction slimDOMExcluded(sn, slimDOMOptions) {\n  if (slimDOMOptions.comment && sn.type === NodeType$1.Comment) {\n    return true;\n  } else if (sn.type === NodeType$1.Element) {\n    if (slimDOMOptions.script && (sn.tagName === 'script' || sn.tagName === 'link' && (sn.attributes.rel === 'preload' || sn.attributes.rel === 'modulepreload') && sn.attributes.as === 'script' || sn.tagName === 'link' && sn.attributes.rel === 'prefetch' && typeof sn.attributes.href === 'string' && sn.attributes.href.endsWith('.js'))) {\n      return true;\n    } else if (slimDOMOptions.headFavicon && (sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon' || sn.tagName === 'meta' && (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) || lowerIfExists(sn.attributes.name) === 'application-name' || lowerIfExists(sn.attributes.rel) === 'icon' || lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' || lowerIfExists(sn.attributes.rel) === 'shortcut icon'))) {\n      return true;\n    } else if (sn.tagName === 'meta') {\n      if (slimDOMOptions.headMetaDescKeywords && lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {\n        return true;\n      } else if (slimDOMOptions.headMetaSocial && (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) || lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) || lowerIfExists(sn.attributes.name) === 'pinterest')) {\n        return true;\n      } else if (slimDOMOptions.headMetaRobots && (lowerIfExists(sn.attributes.name) === 'robots' || lowerIfExists(sn.attributes.name) === 'googlebot' || lowerIfExists(sn.attributes.name) === 'bingbot')) {\n        return true;\n      } else if (slimDOMOptions.headMetaHttpEquiv && sn.attributes['http-equiv'] !== undefined) {\n        return true;\n      } else if (slimDOMOptions.headMetaAuthorship && (lowerIfExists(sn.attributes.name) === 'author' || lowerIfExists(sn.attributes.name) === 'generator' || lowerIfExists(sn.attributes.name) === 'framework' || lowerIfExists(sn.attributes.name) === 'publisher' || lowerIfExists(sn.attributes.name) === 'progid' || lowerIfExists(sn.attributes.property).match(/^article:/) || lowerIfExists(sn.attributes.property).match(/^product:/))) {\n        return true;\n      } else if (slimDOMOptions.headMetaVerification && (lowerIfExists(sn.attributes.name) === 'google-site-verification' || lowerIfExists(sn.attributes.name) === 'yandex-verification' || lowerIfExists(sn.attributes.name) === 'csrf-token' || lowerIfExists(sn.attributes.name) === 'p:domain_verify' || lowerIfExists(sn.attributes.name) === 'verify-v1' || lowerIfExists(sn.attributes.name) === 'verification' || lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction serializeNodeWithId(n, options) {\n  const {\n    doc,\n    mirror,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    maskAllText,\n    maskTextClass,\n    unmaskTextClass,\n    maskTextSelector,\n    unmaskTextSelector,\n    skipChild = false,\n    inlineStylesheet = true,\n    maskInputOptions = {},\n    maskAttributeFn,\n    maskTextFn,\n    maskInputFn,\n    slimDOMOptions,\n    dataURLOptions = {},\n    inlineImages = false,\n    recordCanvas = false,\n    onSerialize,\n    onIframeLoad,\n    iframeLoadTimeout = 5000,\n    onStylesheetLoad,\n    stylesheetLoadTimeout = 5000,\n    keepIframeSrcFn = () => false,\n    newlyAddedElement = false\n  } = options;\n  let {\n    preserveWhiteSpace = true\n  } = options;\n  const _serializedNode = serializeNode(n, {\n    doc,\n    mirror,\n    blockClass,\n    blockSelector,\n    maskAllText,\n    unblockSelector,\n    maskTextClass,\n    unmaskTextClass,\n    maskTextSelector,\n    unmaskTextSelector,\n    inlineStylesheet,\n    maskInputOptions,\n    maskAttributeFn,\n    maskTextFn,\n    maskInputFn,\n    dataURLOptions,\n    inlineImages,\n    recordCanvas,\n    keepIframeSrcFn,\n    newlyAddedElement\n  });\n  if (!_serializedNode) {\n    console.warn(n, 'not serialized');\n    return null;\n  }\n  let id;\n  if (mirror.hasNode(n)) {\n    id = mirror.getId(n);\n  } else if (slimDOMExcluded(_serializedNode, slimDOMOptions) || !preserveWhiteSpace && _serializedNode.type === NodeType$1.Text && !_serializedNode.isStyle && !_serializedNode.textContent.replace(/^\\s+|\\s+$/gm, '').length) {\n    id = IGNORED_NODE;\n  } else {\n    id = genId();\n  }\n  const serializedNode = Object.assign(_serializedNode, {\n    id\n  });\n  mirror.add(n, serializedNode);\n  if (id === IGNORED_NODE) {\n    return null;\n  }\n  if (onSerialize) {\n    onSerialize(n);\n  }\n  let recordChild = !skipChild;\n  if (serializedNode.type === NodeType$1.Element) {\n    recordChild = recordChild && !serializedNode.needBlock;\n    delete serializedNode.needBlock;\n    const shadowRoot = n.shadowRoot;\n    if (shadowRoot && isNativeShadowDom(shadowRoot)) serializedNode.isShadowHost = true;\n  }\n  if ((serializedNode.type === NodeType$1.Document || serializedNode.type === NodeType$1.Element) && recordChild) {\n    if (slimDOMOptions.headWhitespace && serializedNode.type === NodeType$1.Element && serializedNode.tagName === 'head') {\n      preserveWhiteSpace = false;\n    }\n    const bypassOptions = {\n      doc,\n      mirror,\n      blockClass,\n      blockSelector,\n      maskAllText,\n      unblockSelector,\n      maskTextClass,\n      unmaskTextClass,\n      maskTextSelector,\n      unmaskTextSelector,\n      skipChild,\n      inlineStylesheet,\n      maskInputOptions,\n      maskAttributeFn,\n      maskTextFn,\n      maskInputFn,\n      slimDOMOptions,\n      dataURLOptions,\n      inlineImages,\n      recordCanvas,\n      preserveWhiteSpace,\n      onSerialize,\n      onIframeLoad,\n      iframeLoadTimeout,\n      onStylesheetLoad,\n      stylesheetLoadTimeout,\n      keepIframeSrcFn\n    };\n    for (const childN of Array.from(n.childNodes)) {\n      const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n      if (serializedChildNode) {\n        serializedNode.childNodes.push(serializedChildNode);\n      }\n    }\n    if (isElement$1(n) && n.shadowRoot) {\n      for (const childN of Array.from(n.shadowRoot.childNodes)) {\n        const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n        if (serializedChildNode) {\n          isNativeShadowDom(n.shadowRoot) && (serializedChildNode.isShadow = true);\n          serializedNode.childNodes.push(serializedChildNode);\n        }\n      }\n    }\n  }\n  if (n.parentNode && isShadowRoot(n.parentNode) && isNativeShadowDom(n.parentNode)) {\n    serializedNode.isShadow = true;\n  }\n  if (serializedNode.type === NodeType$1.Element && serializedNode.tagName === 'iframe') {\n    onceIframeLoaded(n, () => {\n      const iframeDoc = n.contentDocument;\n      if (iframeDoc && onIframeLoad) {\n        const serializedIframeNode = serializeNodeWithId(iframeDoc, {\n          doc: iframeDoc,\n          mirror,\n          blockClass,\n          blockSelector,\n          unblockSelector,\n          maskAllText,\n          maskTextClass,\n          unmaskTextClass,\n          maskTextSelector,\n          unmaskTextSelector,\n          skipChild: false,\n          inlineStylesheet,\n          maskInputOptions,\n          maskAttributeFn,\n          maskTextFn,\n          maskInputFn,\n          slimDOMOptions,\n          dataURLOptions,\n          inlineImages,\n          recordCanvas,\n          preserveWhiteSpace,\n          onSerialize,\n          onIframeLoad,\n          iframeLoadTimeout,\n          onStylesheetLoad,\n          stylesheetLoadTimeout,\n          keepIframeSrcFn\n        });\n        if (serializedIframeNode) {\n          onIframeLoad(n, serializedIframeNode);\n        }\n      }\n    }, iframeLoadTimeout);\n  }\n  if (serializedNode.type === NodeType$1.Element && serializedNode.tagName === 'link' && serializedNode.attributes.rel === 'stylesheet') {\n    onceStylesheetLoaded(n, () => {\n      if (onStylesheetLoad) {\n        const serializedLinkNode = serializeNodeWithId(n, {\n          doc,\n          mirror,\n          blockClass,\n          blockSelector,\n          unblockSelector,\n          maskAllText,\n          maskTextClass,\n          unmaskTextClass,\n          maskTextSelector,\n          unmaskTextSelector,\n          skipChild: false,\n          inlineStylesheet,\n          maskInputOptions,\n          maskAttributeFn,\n          maskTextFn,\n          maskInputFn,\n          slimDOMOptions,\n          dataURLOptions,\n          inlineImages,\n          recordCanvas,\n          preserveWhiteSpace,\n          onSerialize,\n          onIframeLoad,\n          iframeLoadTimeout,\n          onStylesheetLoad,\n          stylesheetLoadTimeout,\n          keepIframeSrcFn\n        });\n        if (serializedLinkNode) {\n          onStylesheetLoad(n, serializedLinkNode);\n        }\n      }\n    }, stylesheetLoadTimeout);\n  }\n  return serializedNode;\n}\nfunction snapshot(n, options) {\n  const {\n    mirror = new Mirror(),\n    blockClass = 'rr-block',\n    blockSelector = null,\n    unblockSelector = null,\n    maskAllText = false,\n    maskTextClass = 'rr-mask',\n    unmaskTextClass = null,\n    maskTextSelector = null,\n    unmaskTextSelector = null,\n    inlineStylesheet = true,\n    inlineImages = false,\n    recordCanvas = false,\n    maskAllInputs = false,\n    maskAttributeFn,\n    maskTextFn,\n    maskInputFn,\n    slimDOM = false,\n    dataURLOptions,\n    preserveWhiteSpace,\n    onSerialize,\n    onIframeLoad,\n    iframeLoadTimeout,\n    onStylesheetLoad,\n    stylesheetLoadTimeout,\n    keepIframeSrcFn = () => false\n  } = options || {};\n  const maskInputOptions = maskAllInputs === true ? {\n    color: true,\n    date: true,\n    'datetime-local': true,\n    email: true,\n    month: true,\n    number: true,\n    range: true,\n    search: true,\n    tel: true,\n    text: true,\n    time: true,\n    url: true,\n    week: true,\n    textarea: true,\n    select: true\n  } : maskAllInputs === false ? {} : maskAllInputs;\n  const slimDOMOptions = slimDOM === true || slimDOM === 'all' ? {\n    script: true,\n    comment: true,\n    headFavicon: true,\n    headWhitespace: true,\n    headMetaDescKeywords: slimDOM === 'all',\n    headMetaSocial: true,\n    headMetaRobots: true,\n    headMetaHttpEquiv: true,\n    headMetaAuthorship: true,\n    headMetaVerification: true\n  } : slimDOM === false ? {} : slimDOM;\n  return serializeNodeWithId(n, {\n    doc: n,\n    mirror,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    maskAllText,\n    maskTextClass,\n    unmaskTextClass,\n    maskTextSelector,\n    unmaskTextSelector,\n    skipChild: false,\n    inlineStylesheet,\n    maskInputOptions,\n    maskAttributeFn,\n    maskTextFn,\n    maskInputFn,\n    slimDOMOptions,\n    dataURLOptions,\n    inlineImages,\n    recordCanvas,\n    preserveWhiteSpace,\n    onSerialize,\n    onIframeLoad,\n    iframeLoadTimeout,\n    onStylesheetLoad,\n    stylesheetLoadTimeout,\n    keepIframeSrcFn,\n    newlyAddedElement: false\n  });\n}\nfunction _optionalChain$4(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn(function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        return value.call(lastAccessLHS, ...args);\n      });\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\nfunction on(type, fn) {\n  let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n  const options = {\n    capture: true,\n    passive: true\n  };\n  target.addEventListener(type, fn, options);\n  return () => target.removeEventListener(type, fn, options);\n}\nconst DEPARTED_MIRROR_ACCESS_WARNING = 'Please stop import mirror directly. Instead of that,' + '\\r\\n' + 'now you can use replayer.getMirror() to access the mirror instance of a replayer,' + '\\r\\n' + 'or you can use record.mirror to access the mirror instance during recording.';\nlet _mirror = {\n  map: {},\n  getId() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    return -1;\n  },\n  getNode() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    return null;\n  },\n  removeNodeFromMap() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n  },\n  has() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    return false;\n  },\n  reset() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n  }\n};\nif (typeof window !== 'undefined' && window.Proxy && window.Reflect) {\n  _mirror = new Proxy(_mirror, {\n    get(target, prop, receiver) {\n      if (prop === 'map') {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n      }\n      return Reflect.get(target, prop, receiver);\n    }\n  });\n}\nfunction throttle$1(func, wait) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let timeout = null;\n  let previous = 0;\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    const now = Date.now();\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n    const remaining = wait - (now - previous);\n    const context = this;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout$1(timeout);\n        timeout = null;\n      }\n      previous = now;\n      func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout$1(() => {\n        previous = options.leading === false ? 0 : Date.now();\n        timeout = null;\n        func.apply(context, args);\n      }, remaining);\n    }\n  };\n}\nfunction hookSetter(target, key, d, isRevoked) {\n  let win = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : window;\n  const original = win.Object.getOwnPropertyDescriptor(target, key);\n  win.Object.defineProperty(target, key, isRevoked ? d : {\n    set(value) {\n      setTimeout$1(() => {\n        d.set.call(this, value);\n      }, 0);\n      if (original && original.set) {\n        original.set.call(this, value);\n      }\n    }\n  });\n  return () => hookSetter(target, key, original || {}, true);\n}\nfunction patch(source, name, replacement) {\n  try {\n    if (!(name in source)) {\n      return () => {};\n    }\n    const original = source[name];\n    const wrapped = replacement(original);\n    if (typeof wrapped === 'function') {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __rrweb_original__: {\n          enumerable: false,\n          value: original\n        }\n      });\n    }\n    source[name] = wrapped;\n    return () => {\n      source[name] = original;\n    };\n  } catch (e2) {\n    return () => {};\n  }\n}\nlet nowTimestamp = Date.now;\nif (!/[1-9][0-9]{12}/.test(Date.now().toString())) {\n  nowTimestamp = () => new Date().getTime();\n}\nfunction getWindowScroll(win) {\n  const doc = win.document;\n  return {\n    left: doc.scrollingElement ? doc.scrollingElement.scrollLeft : win.pageXOffset !== undefined ? win.pageXOffset : _optionalChain$4([doc, 'optionalAccess', _ => _.documentElement, 'access', _2 => _2.scrollLeft]) || _optionalChain$4([doc, 'optionalAccess', _3 => _3.body, 'optionalAccess', _4 => _4.parentElement, 'optionalAccess', _5 => _5.scrollLeft]) || _optionalChain$4([doc, 'optionalAccess', _6 => _6.body, 'optionalAccess', _7 => _7.scrollLeft]) || 0,\n    top: doc.scrollingElement ? doc.scrollingElement.scrollTop : win.pageYOffset !== undefined ? win.pageYOffset : _optionalChain$4([doc, 'optionalAccess', _8 => _8.documentElement, 'access', _9 => _9.scrollTop]) || _optionalChain$4([doc, 'optionalAccess', _10 => _10.body, 'optionalAccess', _11 => _11.parentElement, 'optionalAccess', _12 => _12.scrollTop]) || _optionalChain$4([doc, 'optionalAccess', _13 => _13.body, 'optionalAccess', _14 => _14.scrollTop]) || 0\n  };\n}\nfunction getWindowHeight() {\n  return window.innerHeight || document.documentElement && document.documentElement.clientHeight || document.body && document.body.clientHeight;\n}\nfunction getWindowWidth() {\n  return window.innerWidth || document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth;\n}\nfunction closestElementOfNode(node) {\n  if (!node) {\n    return null;\n  }\n  const el = node.nodeType === node.ELEMENT_NODE ? node : node.parentElement;\n  return el;\n}\nfunction isBlocked(node, blockClass, blockSelector, unblockSelector, checkAncestors) {\n  if (!node) {\n    return false;\n  }\n  const el = closestElementOfNode(node);\n  if (!el) {\n    return false;\n  }\n  const blockedPredicate = createMatchPredicate(blockClass, blockSelector);\n  if (!checkAncestors) {\n    const isUnblocked = unblockSelector && el.matches(unblockSelector);\n    return blockedPredicate(el) && !isUnblocked;\n  }\n  const blockDistance = distanceToMatch(el, blockedPredicate);\n  let unblockDistance = -1;\n  if (blockDistance < 0) {\n    return false;\n  }\n  if (unblockSelector) {\n    unblockDistance = distanceToMatch(el, createMatchPredicate(null, unblockSelector));\n  }\n  if (blockDistance > -1 && unblockDistance < 0) {\n    return true;\n  }\n  return blockDistance < unblockDistance;\n}\nfunction isSerialized(n, mirror) {\n  return mirror.getId(n) !== -1;\n}\nfunction isIgnored(n, mirror) {\n  return mirror.getId(n) === IGNORED_NODE;\n}\nfunction isAncestorRemoved(target, mirror) {\n  if (isShadowRoot(target)) {\n    return false;\n  }\n  const id = mirror.getId(target);\n  if (!mirror.has(id)) {\n    return true;\n  }\n  if (target.parentNode && target.parentNode.nodeType === target.DOCUMENT_NODE) {\n    return false;\n  }\n  if (!target.parentNode) {\n    return true;\n  }\n  return isAncestorRemoved(target.parentNode, mirror);\n}\nfunction legacy_isTouchEvent(event) {\n  return Boolean(event.changedTouches);\n}\nfunction polyfill() {\n  var _this = this;\n  let win = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n  if ('NodeList' in win && !win.NodeList.prototype.forEach) {\n    win.NodeList.prototype.forEach = Array.prototype.forEach;\n  }\n  if ('DOMTokenList' in win && !win.DOMTokenList.prototype.forEach) {\n    win.DOMTokenList.prototype.forEach = Array.prototype.forEach;\n  }\n  if (!Node.prototype.contains) {\n    Node.prototype.contains = function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      let node = args[0];\n      if (!(0 in args)) {\n        throw new TypeError('1 argument is required');\n      }\n      do {\n        if (_this === node) {\n          return true;\n        }\n      } while (node = node && node.parentNode);\n      return false;\n    };\n  }\n}\nfunction isSerializedIframe(n, mirror) {\n  return Boolean(n.nodeName === 'IFRAME' && mirror.getMeta(n));\n}\nfunction isSerializedStylesheet(n, mirror) {\n  return Boolean(n.nodeName === 'LINK' && n.nodeType === n.ELEMENT_NODE && n.getAttribute && n.getAttribute('rel') === 'stylesheet' && mirror.getMeta(n));\n}\nfunction hasShadowRoot(n) {\n  return Boolean(_optionalChain$4([n, 'optionalAccess', _18 => _18.shadowRoot]));\n}\nclass StyleSheetMirror {\n  constructor() {\n    this.id = 1;\n    this.styleIDMap = new WeakMap();\n    this.idStyleMap = new Map();\n  }\n  getId(stylesheet) {\n    return _nullishCoalesce(this.styleIDMap.get(stylesheet), () => -1);\n  }\n  has(stylesheet) {\n    return this.styleIDMap.has(stylesheet);\n  }\n  add(stylesheet, id) {\n    if (this.has(stylesheet)) return this.getId(stylesheet);\n    let newId;\n    if (id === undefined) {\n      newId = this.id++;\n    } else newId = id;\n    this.styleIDMap.set(stylesheet, newId);\n    this.idStyleMap.set(newId, stylesheet);\n    return newId;\n  }\n  getStyle(id) {\n    return this.idStyleMap.get(id) || null;\n  }\n  reset() {\n    this.styleIDMap = new WeakMap();\n    this.idStyleMap = new Map();\n    this.id = 1;\n  }\n  generateId() {\n    return this.id++;\n  }\n}\nfunction getShadowHost(n) {\n  let shadowHost = null;\n  if (_optionalChain$4([n, 'access', _19 => _19.getRootNode, 'optionalCall', _20 => _20(), 'optionalAccess', _21 => _21.nodeType]) === Node.DOCUMENT_FRAGMENT_NODE && n.getRootNode().host) shadowHost = n.getRootNode().host;\n  return shadowHost;\n}\nfunction getRootShadowHost(n) {\n  let rootShadowHost = n;\n  let shadowHost;\n  while (shadowHost = getShadowHost(rootShadowHost)) rootShadowHost = shadowHost;\n  return rootShadowHost;\n}\nfunction shadowHostInDom(n) {\n  const doc = n.ownerDocument;\n  if (!doc) return false;\n  const shadowHost = getRootShadowHost(n);\n  return doc.contains(shadowHost);\n}\nfunction inDom(n) {\n  const doc = n.ownerDocument;\n  if (!doc) return false;\n  return doc.contains(n) || shadowHostInDom(n);\n}\nconst cachedImplementations = {};\nfunction getImplementation(name) {\n  const cached = cachedImplementations[name];\n  if (cached) {\n    return cached;\n  }\n  const document = window.document;\n  let impl = window[name];\n  if (document && typeof document.createElement === 'function') {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      const contentWindow = sandbox.contentWindow;\n      if (contentWindow && contentWindow[name]) {\n        impl = contentWindow[name];\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {}\n  }\n  return cachedImplementations[name] = impl.bind(window);\n}\nfunction onRequestAnimationFrame() {\n  return getImplementation('requestAnimationFrame')(...arguments);\n}\nfunction setTimeout$1() {\n  return getImplementation('setTimeout')(...arguments);\n}\nfunction clearTimeout$1() {\n  return getImplementation('clearTimeout')(...arguments);\n}\nvar EventType = /* @__PURE__ */(EventType2 => {\n  EventType2[EventType2[\"DomContentLoaded\"] = 0] = \"DomContentLoaded\";\n  EventType2[EventType2[\"Load\"] = 1] = \"Load\";\n  EventType2[EventType2[\"FullSnapshot\"] = 2] = \"FullSnapshot\";\n  EventType2[EventType2[\"IncrementalSnapshot\"] = 3] = \"IncrementalSnapshot\";\n  EventType2[EventType2[\"Meta\"] = 4] = \"Meta\";\n  EventType2[EventType2[\"Custom\"] = 5] = \"Custom\";\n  EventType2[EventType2[\"Plugin\"] = 6] = \"Plugin\";\n  return EventType2;\n})(EventType || {});\nvar IncrementalSource = /* @__PURE__ */(IncrementalSource2 => {\n  IncrementalSource2[IncrementalSource2[\"Mutation\"] = 0] = \"Mutation\";\n  IncrementalSource2[IncrementalSource2[\"MouseMove\"] = 1] = \"MouseMove\";\n  IncrementalSource2[IncrementalSource2[\"MouseInteraction\"] = 2] = \"MouseInteraction\";\n  IncrementalSource2[IncrementalSource2[\"Scroll\"] = 3] = \"Scroll\";\n  IncrementalSource2[IncrementalSource2[\"ViewportResize\"] = 4] = \"ViewportResize\";\n  IncrementalSource2[IncrementalSource2[\"Input\"] = 5] = \"Input\";\n  IncrementalSource2[IncrementalSource2[\"TouchMove\"] = 6] = \"TouchMove\";\n  IncrementalSource2[IncrementalSource2[\"MediaInteraction\"] = 7] = \"MediaInteraction\";\n  IncrementalSource2[IncrementalSource2[\"StyleSheetRule\"] = 8] = \"StyleSheetRule\";\n  IncrementalSource2[IncrementalSource2[\"CanvasMutation\"] = 9] = \"CanvasMutation\";\n  IncrementalSource2[IncrementalSource2[\"Font\"] = 10] = \"Font\";\n  IncrementalSource2[IncrementalSource2[\"Log\"] = 11] = \"Log\";\n  IncrementalSource2[IncrementalSource2[\"Drag\"] = 12] = \"Drag\";\n  IncrementalSource2[IncrementalSource2[\"StyleDeclaration\"] = 13] = \"StyleDeclaration\";\n  IncrementalSource2[IncrementalSource2[\"Selection\"] = 14] = \"Selection\";\n  IncrementalSource2[IncrementalSource2[\"AdoptedStyleSheet\"] = 15] = \"AdoptedStyleSheet\";\n  IncrementalSource2[IncrementalSource2[\"CustomElement\"] = 16] = \"CustomElement\";\n  return IncrementalSource2;\n})(IncrementalSource || {});\nvar MouseInteractions = /* @__PURE__ */(MouseInteractions2 => {\n  MouseInteractions2[MouseInteractions2[\"MouseUp\"] = 0] = \"MouseUp\";\n  MouseInteractions2[MouseInteractions2[\"MouseDown\"] = 1] = \"MouseDown\";\n  MouseInteractions2[MouseInteractions2[\"Click\"] = 2] = \"Click\";\n  MouseInteractions2[MouseInteractions2[\"ContextMenu\"] = 3] = \"ContextMenu\";\n  MouseInteractions2[MouseInteractions2[\"DblClick\"] = 4] = \"DblClick\";\n  MouseInteractions2[MouseInteractions2[\"Focus\"] = 5] = \"Focus\";\n  MouseInteractions2[MouseInteractions2[\"Blur\"] = 6] = \"Blur\";\n  MouseInteractions2[MouseInteractions2[\"TouchStart\"] = 7] = \"TouchStart\";\n  MouseInteractions2[MouseInteractions2[\"TouchMove_Departed\"] = 8] = \"TouchMove_Departed\";\n  MouseInteractions2[MouseInteractions2[\"TouchEnd\"] = 9] = \"TouchEnd\";\n  MouseInteractions2[MouseInteractions2[\"TouchCancel\"] = 10] = \"TouchCancel\";\n  return MouseInteractions2;\n})(MouseInteractions || {});\nvar PointerTypes = /* @__PURE__ */(PointerTypes2 => {\n  PointerTypes2[PointerTypes2[\"Mouse\"] = 0] = \"Mouse\";\n  PointerTypes2[PointerTypes2[\"Pen\"] = 1] = \"Pen\";\n  PointerTypes2[PointerTypes2[\"Touch\"] = 2] = \"Touch\";\n  return PointerTypes2;\n})(PointerTypes || {});\nfunction _optionalChain$3(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn(function () {\n        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n        return value.call(lastAccessLHS, ...args);\n      });\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\nfunction isNodeInLinkedList(n) {\n  return '__ln' in n;\n}\nclass DoubleLinkedList {\n  constructor() {\n    this.length = 0;\n    this.head = null;\n    this.tail = null;\n  }\n  get(position) {\n    if (position >= this.length) {\n      throw new Error('Position outside of list range');\n    }\n    let current = this.head;\n    for (let index = 0; index < position; index++) {\n      current = _optionalChain$3([current, 'optionalAccess', _ => _.next]) || null;\n    }\n    return current;\n  }\n  addNode(n) {\n    const node = {\n      value: n,\n      previous: null,\n      next: null\n    };\n    n.__ln = node;\n    if (n.previousSibling && isNodeInLinkedList(n.previousSibling)) {\n      const current = n.previousSibling.__ln.next;\n      node.next = current;\n      node.previous = n.previousSibling.__ln;\n      n.previousSibling.__ln.next = node;\n      if (current) {\n        current.previous = node;\n      }\n    } else if (n.nextSibling && isNodeInLinkedList(n.nextSibling) && n.nextSibling.__ln.previous) {\n      const current = n.nextSibling.__ln.previous;\n      node.previous = current;\n      node.next = n.nextSibling.__ln;\n      n.nextSibling.__ln.previous = node;\n      if (current) {\n        current.next = node;\n      }\n    } else {\n      if (this.head) {\n        this.head.previous = node;\n      }\n      node.next = this.head;\n      this.head = node;\n    }\n    if (node.next === null) {\n      this.tail = node;\n    }\n    this.length++;\n  }\n  removeNode(n) {\n    const current = n.__ln;\n    if (!this.head) {\n      return;\n    }\n    if (!current.previous) {\n      this.head = current.next;\n      if (this.head) {\n        this.head.previous = null;\n      } else {\n        this.tail = null;\n      }\n    } else {\n      current.previous.next = current.next;\n      if (current.next) {\n        current.next.previous = current.previous;\n      } else {\n        this.tail = current.previous;\n      }\n    }\n    if (n.__ln) {\n      delete n.__ln;\n    }\n    this.length--;\n  }\n}\nconst moveKey = (id, parentId) => `${id}@${parentId}`;\nclass MutationBuffer {\n  constructor() {\n    this.frozen = false;\n    this.locked = false;\n    this.texts = [];\n    this.attributes = [];\n    this.attributeMap = new WeakMap();\n    this.removes = [];\n    this.mapRemoves = [];\n    this.movedMap = {};\n    this.addedSet = new Set();\n    this.movedSet = new Set();\n    this.droppedSet = new Set();\n    this.processMutations = mutations => {\n      mutations.forEach(this.processMutation);\n      this.emit();\n    };\n    this.emit = () => {\n      if (this.frozen || this.locked) {\n        return;\n      }\n      const adds = [];\n      const addedIds = new Set();\n      const addList = new DoubleLinkedList();\n      const getNextId = n => {\n        let ns = n;\n        let nextId = IGNORED_NODE;\n        while (nextId === IGNORED_NODE) {\n          ns = ns && ns.nextSibling;\n          nextId = ns && this.mirror.getId(ns);\n        }\n        return nextId;\n      };\n      const pushAdd = n => {\n        if (!n.parentNode || !inDom(n)) {\n          return;\n        }\n        const parentId = isShadowRoot(n.parentNode) ? this.mirror.getId(getShadowHost(n)) : this.mirror.getId(n.parentNode);\n        const nextId = getNextId(n);\n        if (parentId === -1 || nextId === -1) {\n          return addList.addNode(n);\n        }\n        const sn = serializeNodeWithId(n, {\n          doc: this.doc,\n          mirror: this.mirror,\n          blockClass: this.blockClass,\n          blockSelector: this.blockSelector,\n          maskAllText: this.maskAllText,\n          unblockSelector: this.unblockSelector,\n          maskTextClass: this.maskTextClass,\n          unmaskTextClass: this.unmaskTextClass,\n          maskTextSelector: this.maskTextSelector,\n          unmaskTextSelector: this.unmaskTextSelector,\n          skipChild: true,\n          newlyAddedElement: true,\n          inlineStylesheet: this.inlineStylesheet,\n          maskInputOptions: this.maskInputOptions,\n          maskAttributeFn: this.maskAttributeFn,\n          maskTextFn: this.maskTextFn,\n          maskInputFn: this.maskInputFn,\n          slimDOMOptions: this.slimDOMOptions,\n          dataURLOptions: this.dataURLOptions,\n          recordCanvas: this.recordCanvas,\n          inlineImages: this.inlineImages,\n          onSerialize: currentN => {\n            if (isSerializedIframe(currentN, this.mirror)) {\n              this.iframeManager.addIframe(currentN);\n            }\n            if (isSerializedStylesheet(currentN, this.mirror)) {\n              this.stylesheetManager.trackLinkElement(currentN);\n            }\n            if (hasShadowRoot(n)) {\n              this.shadowDomManager.addShadowRoot(n.shadowRoot, this.doc);\n            }\n          },\n          onIframeLoad: (iframe, childSn) => {\n            this.iframeManager.attachIframe(iframe, childSn);\n            this.shadowDomManager.observeAttachShadow(iframe);\n          },\n          onStylesheetLoad: (link, childSn) => {\n            this.stylesheetManager.attachLinkElement(link, childSn);\n          }\n        });\n        if (sn) {\n          adds.push({\n            parentId,\n            nextId,\n            node: sn\n          });\n          addedIds.add(sn.id);\n        }\n      };\n      while (this.mapRemoves.length) {\n        this.mirror.removeNodeFromMap(this.mapRemoves.shift());\n      }\n      for (const n of this.movedSet) {\n        if (isParentRemoved(this.removes, n, this.mirror) && !this.movedSet.has(n.parentNode)) {\n          continue;\n        }\n        pushAdd(n);\n      }\n      for (const n of this.addedSet) {\n        if (!isAncestorInSet(this.droppedSet, n) && !isParentRemoved(this.removes, n, this.mirror)) {\n          pushAdd(n);\n        } else if (isAncestorInSet(this.movedSet, n)) {\n          pushAdd(n);\n        } else {\n          this.droppedSet.add(n);\n        }\n      }\n      let candidate = null;\n      while (addList.length) {\n        let node = null;\n        if (candidate) {\n          const parentId = this.mirror.getId(candidate.value.parentNode);\n          const nextId = getNextId(candidate.value);\n          if (parentId !== -1 && nextId !== -1) {\n            node = candidate;\n          }\n        }\n        if (!node) {\n          let tailNode = addList.tail;\n          while (tailNode) {\n            const _node = tailNode;\n            tailNode = tailNode.previous;\n            if (_node) {\n              const parentId = this.mirror.getId(_node.value.parentNode);\n              const nextId = getNextId(_node.value);\n              if (nextId === -1) continue;else if (parentId !== -1) {\n                node = _node;\n                break;\n              } else {\n                const unhandledNode = _node.value;\n                if (unhandledNode.parentNode && unhandledNode.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n                  const shadowHost = unhandledNode.parentNode.host;\n                  const parentId = this.mirror.getId(shadowHost);\n                  if (parentId !== -1) {\n                    node = _node;\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (!node) {\n          while (addList.head) {\n            addList.removeNode(addList.head.value);\n          }\n          break;\n        }\n        candidate = node.previous;\n        addList.removeNode(node.value);\n        pushAdd(node.value);\n      }\n      const payload = {\n        texts: this.texts.map(text => ({\n          id: this.mirror.getId(text.node),\n          value: text.value\n        })).filter(text => !addedIds.has(text.id)).filter(text => this.mirror.has(text.id)),\n        attributes: this.attributes.map(attribute => {\n          const {\n            attributes\n          } = attribute;\n          if (typeof attributes.style === 'string') {\n            const diffAsStr = JSON.stringify(attribute.styleDiff);\n            const unchangedAsStr = JSON.stringify(attribute._unchangedStyles);\n            if (diffAsStr.length < attributes.style.length) {\n              if ((diffAsStr + unchangedAsStr).split('var(').length === attributes.style.split('var(').length) {\n                attributes.style = attribute.styleDiff;\n              }\n            }\n          }\n          return {\n            id: this.mirror.getId(attribute.node),\n            attributes: attributes\n          };\n        }).filter(attribute => !addedIds.has(attribute.id)).filter(attribute => this.mirror.has(attribute.id)),\n        removes: this.removes,\n        adds\n      };\n      if (!payload.texts.length && !payload.attributes.length && !payload.removes.length && !payload.adds.length) {\n        return;\n      }\n      this.texts = [];\n      this.attributes = [];\n      this.attributeMap = new WeakMap();\n      this.removes = [];\n      this.addedSet = new Set();\n      this.movedSet = new Set();\n      this.droppedSet = new Set();\n      this.movedMap = {};\n      this.mutationCb(payload);\n    };\n    this.processMutation = m => {\n      if (isIgnored(m.target, this.mirror)) {\n        return;\n      }\n      switch (m.type) {\n        case 'characterData':\n          {\n            const value = m.target.textContent;\n            if (!isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) && value !== m.oldValue) {\n              this.texts.push({\n                value: needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextClass, this.unmaskTextSelector, this.maskAllText) && value ? this.maskTextFn ? this.maskTextFn(value, closestElementOfNode(m.target)) : value.replace(/[\\S]/g, '*') : value,\n                node: m.target\n              });\n            }\n            break;\n          }\n        case 'attributes':\n          {\n            const target = m.target;\n            let attributeName = m.attributeName;\n            let value = m.target.getAttribute(attributeName);\n            if (attributeName === 'value') {\n              const type = getInputType(target);\n              const tagName = target.tagName;\n              value = getInputValue(target, tagName, type);\n              const isInputMasked = shouldMaskInput({\n                maskInputOptions: this.maskInputOptions,\n                tagName,\n                type\n              });\n              const forceMask = needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextClass, this.unmaskTextSelector, isInputMasked);\n              value = maskInputValue({\n                isMasked: forceMask,\n                element: target,\n                value,\n                maskInputFn: this.maskInputFn\n              });\n            }\n            if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) || value === m.oldValue) {\n              return;\n            }\n            let item = this.attributeMap.get(m.target);\n            if (target.tagName === 'IFRAME' && attributeName === 'src' && !this.keepIframeSrcFn(value)) {\n              if (!target.contentDocument) {\n                attributeName = 'rr_src';\n              } else {\n                return;\n              }\n            }\n            if (!item) {\n              item = {\n                node: m.target,\n                attributes: {},\n                styleDiff: {},\n                _unchangedStyles: {}\n              };\n              this.attributes.push(item);\n              this.attributeMap.set(m.target, item);\n            }\n            if (attributeName === 'type' && target.tagName === 'INPUT' && (m.oldValue || '').toLowerCase() === 'password') {\n              target.setAttribute('data-rr-is-password', 'true');\n            }\n            if (!ignoreAttribute(target.tagName, attributeName)) {\n              item.attributes[attributeName] = transformAttribute(this.doc, toLowerCase(target.tagName), toLowerCase(attributeName), value, target, this.maskAttributeFn);\n              if (attributeName === 'style') {\n                if (!this.unattachedDoc) {\n                  try {\n                    this.unattachedDoc = document.implementation.createHTMLDocument();\n                  } catch (e) {\n                    this.unattachedDoc = this.doc;\n                  }\n                }\n                const old = this.unattachedDoc.createElement('span');\n                if (m.oldValue) {\n                  old.setAttribute('style', m.oldValue);\n                }\n                for (const pname of Array.from(target.style)) {\n                  const newValue = target.style.getPropertyValue(pname);\n                  const newPriority = target.style.getPropertyPriority(pname);\n                  if (newValue !== old.style.getPropertyValue(pname) || newPriority !== old.style.getPropertyPriority(pname)) {\n                    if (newPriority === '') {\n                      item.styleDiff[pname] = newValue;\n                    } else {\n                      item.styleDiff[pname] = [newValue, newPriority];\n                    }\n                  } else {\n                    item._unchangedStyles[pname] = [newValue, newPriority];\n                  }\n                }\n                for (const pname of Array.from(old.style)) {\n                  if (target.style.getPropertyValue(pname) === '') {\n                    item.styleDiff[pname] = false;\n                  }\n                }\n              }\n            }\n            break;\n          }\n        case 'childList':\n          {\n            if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, true)) {\n              return;\n            }\n            m.addedNodes.forEach(n => this.genAdds(n, m.target));\n            m.removedNodes.forEach(n => {\n              const nodeId = this.mirror.getId(n);\n              const parentId = isShadowRoot(m.target) ? this.mirror.getId(m.target.host) : this.mirror.getId(m.target);\n              if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) || isIgnored(n, this.mirror) || !isSerialized(n, this.mirror)) {\n                return;\n              }\n              if (this.addedSet.has(n)) {\n                deepDelete(this.addedSet, n);\n                this.droppedSet.add(n);\n              } else if (this.addedSet.has(m.target) && nodeId === -1) ;else if (isAncestorRemoved(m.target, this.mirror)) ;else if (this.movedSet.has(n) && this.movedMap[moveKey(nodeId, parentId)]) {\n                deepDelete(this.movedSet, n);\n              } else {\n                this.removes.push({\n                  parentId,\n                  id: nodeId,\n                  isShadow: isShadowRoot(m.target) && isNativeShadowDom(m.target) ? true : undefined\n                });\n              }\n              this.mapRemoves.push(n);\n            });\n            break;\n          }\n      }\n    };\n    this.genAdds = (n, target) => {\n      if (this.processedNodeManager.inOtherBuffer(n, this)) return;\n      if (this.addedSet.has(n) || this.movedSet.has(n)) return;\n      if (this.mirror.hasNode(n)) {\n        if (isIgnored(n, this.mirror)) {\n          return;\n        }\n        this.movedSet.add(n);\n        let targetId = null;\n        if (target && this.mirror.hasNode(target)) {\n          targetId = this.mirror.getId(target);\n        }\n        if (targetId && targetId !== -1) {\n          this.movedMap[moveKey(this.mirror.getId(n), targetId)] = true;\n        }\n      } else {\n        this.addedSet.add(n);\n        this.droppedSet.delete(n);\n      }\n      if (!isBlocked(n, this.blockClass, this.blockSelector, this.unblockSelector, false)) {\n        n.childNodes.forEach(childN => this.genAdds(childN));\n        if (hasShadowRoot(n)) {\n          n.shadowRoot.childNodes.forEach(childN => {\n            this.processedNodeManager.add(childN, this);\n            this.genAdds(childN, n);\n          });\n        }\n      }\n    };\n  }\n  init(options) {\n    ['mutationCb', 'blockClass', 'blockSelector', 'unblockSelector', 'maskAllText', 'maskTextClass', 'unmaskTextClass', 'maskTextSelector', 'unmaskTextSelector', 'inlineStylesheet', 'maskInputOptions', 'maskAttributeFn', 'maskTextFn', 'maskInputFn', 'keepIframeSrcFn', 'recordCanvas', 'inlineImages', 'slimDOMOptions', 'dataURLOptions', 'doc', 'mirror', 'iframeManager', 'stylesheetManager', 'shadowDomManager', 'canvasManager', 'processedNodeManager'].forEach(key => {\n      this[key] = options[key];\n    });\n  }\n  freeze() {\n    this.frozen = true;\n    this.canvasManager.freeze();\n  }\n  unfreeze() {\n    this.frozen = false;\n    this.canvasManager.unfreeze();\n    this.emit();\n  }\n  isFrozen() {\n    return this.frozen;\n  }\n  lock() {\n    this.locked = true;\n    this.canvasManager.lock();\n  }\n  unlock() {\n    this.locked = false;\n    this.canvasManager.unlock();\n    this.emit();\n  }\n  reset() {\n    this.shadowDomManager.reset();\n    this.canvasManager.reset();\n  }\n}\nfunction deepDelete(addsSet, n) {\n  addsSet.delete(n);\n  n.childNodes.forEach(childN => deepDelete(addsSet, childN));\n}\nfunction isParentRemoved(removes, n, mirror) {\n  if (removes.length === 0) return false;\n  return _isParentRemoved(removes, n, mirror);\n}\nfunction _isParentRemoved(removes, n, mirror) {\n  const {\n    parentNode\n  } = n;\n  if (!parentNode) {\n    return false;\n  }\n  const parentId = mirror.getId(parentNode);\n  if (removes.some(r => r.id === parentId)) {\n    return true;\n  }\n  return _isParentRemoved(removes, parentNode, mirror);\n}\nfunction isAncestorInSet(set, n) {\n  if (set.size === 0) return false;\n  return _isAncestorInSet(set, n);\n}\nfunction _isAncestorInSet(set, n) {\n  const {\n    parentNode\n  } = n;\n  if (!parentNode) {\n    return false;\n  }\n  if (set.has(parentNode)) {\n    return true;\n  }\n  return _isAncestorInSet(set, parentNode);\n}\nlet errorHandler;\nfunction registerErrorHandler(handler) {\n  errorHandler = handler;\n}\nfunction unregisterErrorHandler() {\n  errorHandler = undefined;\n}\nconst callbackWrapper = cb => {\n  if (!errorHandler) {\n    return cb;\n  }\n  const rrwebWrapped = function () {\n    try {\n      return cb(...arguments);\n    } catch (error) {\n      if (errorHandler && errorHandler(error) === true) {\n        return () => {};\n      }\n      throw error;\n    }\n  };\n  return rrwebWrapped;\n};\nfunction _optionalChain$2(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn(function () {\n        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n        return value.call(lastAccessLHS, ...args);\n      });\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\nconst mutationBuffers = [];\nfunction getEventTarget(event) {\n  try {\n    if ('composedPath' in event) {\n      const path = event.composedPath();\n      if (path.length) {\n        return path[0];\n      }\n    } else if ('path' in event && event.path.length) {\n      return event.path[0];\n    }\n  } catch (e2) {}\n  return event && event.target;\n}\nfunction initMutationObserver(options, rootEl) {\n  const mutationBuffer = new MutationBuffer();\n  mutationBuffers.push(mutationBuffer);\n  mutationBuffer.init(options);\n  let mutationObserverCtor = window.MutationObserver || window.__rrMutationObserver;\n  const angularZoneSymbol = _optionalChain$2([window, 'optionalAccess', _ => _.Zone, 'optionalAccess', _2 => _2.__symbol__, 'optionalCall', _3 => _3('MutationObserver')]);\n  if (angularZoneSymbol && window[angularZoneSymbol]) {\n    mutationObserverCtor = window[angularZoneSymbol];\n  }\n  const observer = new mutationObserverCtor(callbackWrapper(mutations => {\n    if (options.onMutation && options.onMutation(mutations) === false) {\n      return;\n    }\n    mutationBuffer.processMutations.bind(mutationBuffer)(mutations);\n  }));\n  observer.observe(rootEl, {\n    attributes: true,\n    attributeOldValue: true,\n    characterData: true,\n    characterDataOldValue: true,\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction initMoveObserver(_ref3) {\n  let {\n    mousemoveCb,\n    sampling,\n    doc,\n    mirror\n  } = _ref3;\n  if (sampling.mousemove === false) {\n    return () => {};\n  }\n  const threshold = typeof sampling.mousemove === 'number' ? sampling.mousemove : 50;\n  const callbackThreshold = typeof sampling.mousemoveCallback === 'number' ? sampling.mousemoveCallback : 500;\n  let positions = [];\n  let timeBaseline;\n  const wrappedCb = throttle$1(callbackWrapper(source => {\n    const totalOffset = Date.now() - timeBaseline;\n    mousemoveCb(positions.map(p => {\n      p.timeOffset -= totalOffset;\n      return p;\n    }), source);\n    positions = [];\n    timeBaseline = null;\n  }), callbackThreshold);\n  const updatePosition = callbackWrapper(throttle$1(callbackWrapper(evt => {\n    const target = getEventTarget(evt);\n    const {\n      clientX,\n      clientY\n    } = legacy_isTouchEvent(evt) ? evt.changedTouches[0] : evt;\n    if (!timeBaseline) {\n      timeBaseline = nowTimestamp();\n    }\n    positions.push({\n      x: clientX,\n      y: clientY,\n      id: mirror.getId(target),\n      timeOffset: nowTimestamp() - timeBaseline\n    });\n    wrappedCb(typeof DragEvent !== 'undefined' && evt instanceof DragEvent ? IncrementalSource.Drag : evt instanceof MouseEvent ? IncrementalSource.MouseMove : IncrementalSource.TouchMove);\n  }), threshold, {\n    trailing: false\n  }));\n  const handlers = [on('mousemove', updatePosition, doc), on('touchmove', updatePosition, doc), on('drag', updatePosition, doc)];\n  return callbackWrapper(() => {\n    handlers.forEach(h => h());\n  });\n}\nfunction initMouseInteractionObserver(_ref4) {\n  let {\n    mouseInteractionCb,\n    doc,\n    mirror,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    sampling\n  } = _ref4;\n  if (sampling.mouseInteraction === false) {\n    return () => {};\n  }\n  const disableMap = sampling.mouseInteraction === true || sampling.mouseInteraction === undefined ? {} : sampling.mouseInteraction;\n  const handlers = [];\n  let currentPointerType = null;\n  const getHandler = eventKey => {\n    return event => {\n      const target = getEventTarget(event);\n      if (isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n        return;\n      }\n      let pointerType = null;\n      let thisEventKey = eventKey;\n      if ('pointerType' in event) {\n        switch (event.pointerType) {\n          case 'mouse':\n            pointerType = PointerTypes.Mouse;\n            break;\n          case 'touch':\n            pointerType = PointerTypes.Touch;\n            break;\n          case 'pen':\n            pointerType = PointerTypes.Pen;\n            break;\n        }\n        if (pointerType === PointerTypes.Touch) {\n          if (MouseInteractions[eventKey] === MouseInteractions.MouseDown) {\n            thisEventKey = 'TouchStart';\n          } else if (MouseInteractions[eventKey] === MouseInteractions.MouseUp) {\n            thisEventKey = 'TouchEnd';\n          }\n        } else if (pointerType === PointerTypes.Pen) ;\n      } else if (legacy_isTouchEvent(event)) {\n        pointerType = PointerTypes.Touch;\n      }\n      if (pointerType !== null) {\n        currentPointerType = pointerType;\n        if (thisEventKey.startsWith('Touch') && pointerType === PointerTypes.Touch || thisEventKey.startsWith('Mouse') && pointerType === PointerTypes.Mouse) {\n          pointerType = null;\n        }\n      } else if (MouseInteractions[eventKey] === MouseInteractions.Click) {\n        pointerType = currentPointerType;\n        currentPointerType = null;\n      }\n      const e = legacy_isTouchEvent(event) ? event.changedTouches[0] : event;\n      if (!e) {\n        return;\n      }\n      const id = mirror.getId(target);\n      const {\n        clientX,\n        clientY\n      } = e;\n      callbackWrapper(mouseInteractionCb)({\n        type: MouseInteractions[thisEventKey],\n        id,\n        x: clientX,\n        y: clientY,\n        ...(pointerType !== null && {\n          pointerType\n        })\n      });\n    };\n  };\n  Object.keys(MouseInteractions).filter(key => Number.isNaN(Number(key)) && !key.endsWith('_Departed') && disableMap[key] !== false).forEach(eventKey => {\n    let eventName = toLowerCase(eventKey);\n    const handler = getHandler(eventKey);\n    if (window.PointerEvent) {\n      switch (MouseInteractions[eventKey]) {\n        case MouseInteractions.MouseDown:\n        case MouseInteractions.MouseUp:\n          eventName = eventName.replace('mouse', 'pointer');\n          break;\n        case MouseInteractions.TouchStart:\n        case MouseInteractions.TouchEnd:\n          return;\n      }\n    }\n    handlers.push(on(eventName, handler, doc));\n  });\n  return callbackWrapper(() => {\n    handlers.forEach(h => h());\n  });\n}\nfunction initScrollObserver(_ref5) {\n  let {\n    scrollCb,\n    doc,\n    mirror,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    sampling\n  } = _ref5;\n  const updatePosition = callbackWrapper(throttle$1(callbackWrapper(evt => {\n    const target = getEventTarget(evt);\n    if (!target || isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n      return;\n    }\n    const id = mirror.getId(target);\n    if (target === doc && doc.defaultView) {\n      const scrollLeftTop = getWindowScroll(doc.defaultView);\n      scrollCb({\n        id,\n        x: scrollLeftTop.left,\n        y: scrollLeftTop.top\n      });\n    } else {\n      scrollCb({\n        id,\n        x: target.scrollLeft,\n        y: target.scrollTop\n      });\n    }\n  }), sampling.scroll || 100));\n  return on('scroll', updatePosition, doc);\n}\nfunction initViewportResizeObserver(_ref6, _ref7) {\n  let {\n    viewportResizeCb\n  } = _ref6;\n  let {\n    win\n  } = _ref7;\n  let lastH = -1;\n  let lastW = -1;\n  const updateDimension = callbackWrapper(throttle$1(callbackWrapper(() => {\n    const height = getWindowHeight();\n    const width = getWindowWidth();\n    if (lastH !== height || lastW !== width) {\n      viewportResizeCb({\n        width: Number(width),\n        height: Number(height)\n      });\n      lastH = height;\n      lastW = width;\n    }\n  }), 200));\n  return on('resize', updateDimension, win);\n}\nconst INPUT_TAGS = ['INPUT', 'TEXTAREA', 'SELECT'];\nconst lastInputValueMap = new WeakMap();\nfunction initInputObserver(_ref8) {\n  let {\n    inputCb,\n    doc,\n    mirror,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    ignoreClass,\n    ignoreSelector,\n    maskInputOptions,\n    maskInputFn,\n    sampling,\n    userTriggeredOnInput,\n    maskTextClass,\n    unmaskTextClass,\n    maskTextSelector,\n    unmaskTextSelector\n  } = _ref8;\n  function eventHandler(event) {\n    let target = getEventTarget(event);\n    const userTriggered = event.isTrusted;\n    const tagName = target && toUpperCase(target.tagName);\n    if (tagName === 'OPTION') target = target.parentElement;\n    if (!target || !tagName || INPUT_TAGS.indexOf(tagName) < 0 || isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n      return;\n    }\n    const el = target;\n    if (el.classList.contains(ignoreClass) || ignoreSelector && el.matches(ignoreSelector)) {\n      return;\n    }\n    const type = getInputType(target);\n    let text = getInputValue(el, tagName, type);\n    let isChecked = false;\n    const isInputMasked = shouldMaskInput({\n      maskInputOptions,\n      tagName,\n      type\n    });\n    const forceMask = needMaskingText(target, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, isInputMasked);\n    if (type === 'radio' || type === 'checkbox') {\n      isChecked = target.checked;\n    }\n    text = maskInputValue({\n      isMasked: forceMask,\n      element: target,\n      value: text,\n      maskInputFn\n    });\n    cbWithDedup(target, userTriggeredOnInput ? {\n      text,\n      isChecked,\n      userTriggered\n    } : {\n      text,\n      isChecked\n    });\n    const name = target.name;\n    if (type === 'radio' && name && isChecked) {\n      doc.querySelectorAll(`input[type=\"radio\"][name=\"${name}\"]`).forEach(el => {\n        if (el !== target) {\n          const text = maskInputValue({\n            isMasked: forceMask,\n            element: el,\n            value: getInputValue(el, tagName, type),\n            maskInputFn\n          });\n          cbWithDedup(el, userTriggeredOnInput ? {\n            text,\n            isChecked: !isChecked,\n            userTriggered: false\n          } : {\n            text,\n            isChecked: !isChecked\n          });\n        }\n      });\n    }\n  }\n  function cbWithDedup(target, v) {\n    const lastInputValue = lastInputValueMap.get(target);\n    if (!lastInputValue || lastInputValue.text !== v.text || lastInputValue.isChecked !== v.isChecked) {\n      lastInputValueMap.set(target, v);\n      const id = mirror.getId(target);\n      callbackWrapper(inputCb)({\n        ...v,\n        id\n      });\n    }\n  }\n  const events = sampling.input === 'last' ? ['change'] : ['input', 'change'];\n  const handlers = events.map(eventName => on(eventName, callbackWrapper(eventHandler), doc));\n  const currentWindow = doc.defaultView;\n  if (!currentWindow) {\n    return () => {\n      handlers.forEach(h => h());\n    };\n  }\n  const propertyDescriptor = currentWindow.Object.getOwnPropertyDescriptor(currentWindow.HTMLInputElement.prototype, 'value');\n  const hookProperties = [[currentWindow.HTMLInputElement.prototype, 'value'], [currentWindow.HTMLInputElement.prototype, 'checked'], [currentWindow.HTMLSelectElement.prototype, 'value'], [currentWindow.HTMLTextAreaElement.prototype, 'value'], [currentWindow.HTMLSelectElement.prototype, 'selectedIndex'], [currentWindow.HTMLOptionElement.prototype, 'selected']];\n  if (propertyDescriptor && propertyDescriptor.set) {\n    handlers.push(...hookProperties.map(p => hookSetter(p[0], p[1], {\n      set() {\n        callbackWrapper(eventHandler)({\n          target: this,\n          isTrusted: false\n        });\n      }\n    }, false, currentWindow)));\n  }\n  return callbackWrapper(() => {\n    handlers.forEach(h => h());\n  });\n}\nfunction getNestedCSSRulePositions(rule) {\n  const positions = [];\n  function recurse(childRule, pos) {\n    if (hasNestedCSSRule('CSSGroupingRule') && childRule.parentRule instanceof CSSGroupingRule || hasNestedCSSRule('CSSMediaRule') && childRule.parentRule instanceof CSSMediaRule || hasNestedCSSRule('CSSSupportsRule') && childRule.parentRule instanceof CSSSupportsRule || hasNestedCSSRule('CSSConditionRule') && childRule.parentRule instanceof CSSConditionRule) {\n      const rules = Array.from(childRule.parentRule.cssRules);\n      const index = rules.indexOf(childRule);\n      pos.unshift(index);\n    } else if (childRule.parentStyleSheet) {\n      const rules = Array.from(childRule.parentStyleSheet.cssRules);\n      const index = rules.indexOf(childRule);\n      pos.unshift(index);\n    }\n    return pos;\n  }\n  return recurse(rule, positions);\n}\nfunction getIdAndStyleId(sheet, mirror, styleMirror) {\n  let id, styleId;\n  if (!sheet) return {};\n  if (sheet.ownerNode) id = mirror.getId(sheet.ownerNode);else styleId = styleMirror.getId(sheet);\n  return {\n    styleId,\n    id\n  };\n}\nfunction initStyleSheetObserver(_ref9, _ref0) {\n  let {\n    styleSheetRuleCb,\n    mirror,\n    stylesheetManager\n  } = _ref9;\n  let {\n    win\n  } = _ref0;\n  if (!win.CSSStyleSheet || !win.CSSStyleSheet.prototype) {\n    return () => {};\n  }\n  const insertRule = win.CSSStyleSheet.prototype.insertRule;\n  win.CSSStyleSheet.prototype.insertRule = new Proxy(insertRule, {\n    apply: callbackWrapper((target, thisArg, argumentsList) => {\n      const [rule, index] = argumentsList;\n      const {\n        id,\n        styleId\n      } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n      if (id && id !== -1 || styleId && styleId !== -1) {\n        styleSheetRuleCb({\n          id,\n          styleId,\n          adds: [{\n            rule,\n            index\n          }]\n        });\n      }\n      return target.apply(thisArg, argumentsList);\n    })\n  });\n  const deleteRule = win.CSSStyleSheet.prototype.deleteRule;\n  win.CSSStyleSheet.prototype.deleteRule = new Proxy(deleteRule, {\n    apply: callbackWrapper((target, thisArg, argumentsList) => {\n      const [index] = argumentsList;\n      const {\n        id,\n        styleId\n      } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n      if (id && id !== -1 || styleId && styleId !== -1) {\n        styleSheetRuleCb({\n          id,\n          styleId,\n          removes: [{\n            index\n          }]\n        });\n      }\n      return target.apply(thisArg, argumentsList);\n    })\n  });\n  let replace;\n  if (win.CSSStyleSheet.prototype.replace) {\n    replace = win.CSSStyleSheet.prototype.replace;\n    win.CSSStyleSheet.prototype.replace = new Proxy(replace, {\n      apply: callbackWrapper((target, thisArg, argumentsList) => {\n        const [text] = argumentsList;\n        const {\n          id,\n          styleId\n        } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n        if (id && id !== -1 || styleId && styleId !== -1) {\n          styleSheetRuleCb({\n            id,\n            styleId,\n            replace: text\n          });\n        }\n        return target.apply(thisArg, argumentsList);\n      })\n    });\n  }\n  let replaceSync;\n  if (win.CSSStyleSheet.prototype.replaceSync) {\n    replaceSync = win.CSSStyleSheet.prototype.replaceSync;\n    win.CSSStyleSheet.prototype.replaceSync = new Proxy(replaceSync, {\n      apply: callbackWrapper((target, thisArg, argumentsList) => {\n        const [text] = argumentsList;\n        const {\n          id,\n          styleId\n        } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n        if (id && id !== -1 || styleId && styleId !== -1) {\n          styleSheetRuleCb({\n            id,\n            styleId,\n            replaceSync: text\n          });\n        }\n        return target.apply(thisArg, argumentsList);\n      })\n    });\n  }\n  const supportedNestedCSSRuleTypes = {};\n  if (canMonkeyPatchNestedCSSRule('CSSGroupingRule')) {\n    supportedNestedCSSRuleTypes.CSSGroupingRule = win.CSSGroupingRule;\n  } else {\n    if (canMonkeyPatchNestedCSSRule('CSSMediaRule')) {\n      supportedNestedCSSRuleTypes.CSSMediaRule = win.CSSMediaRule;\n    }\n    if (canMonkeyPatchNestedCSSRule('CSSConditionRule')) {\n      supportedNestedCSSRuleTypes.CSSConditionRule = win.CSSConditionRule;\n    }\n    if (canMonkeyPatchNestedCSSRule('CSSSupportsRule')) {\n      supportedNestedCSSRuleTypes.CSSSupportsRule = win.CSSSupportsRule;\n    }\n  }\n  const unmodifiedFunctions = {};\n  Object.entries(supportedNestedCSSRuleTypes).forEach(_ref1 => {\n    let [typeKey, type] = _ref1;\n    unmodifiedFunctions[typeKey] = {\n      insertRule: type.prototype.insertRule,\n      deleteRule: type.prototype.deleteRule\n    };\n    type.prototype.insertRule = new Proxy(unmodifiedFunctions[typeKey].insertRule, {\n      apply: callbackWrapper((target, thisArg, argumentsList) => {\n        const [rule, index] = argumentsList;\n        const {\n          id,\n          styleId\n        } = getIdAndStyleId(thisArg.parentStyleSheet, mirror, stylesheetManager.styleMirror);\n        if (id && id !== -1 || styleId && styleId !== -1) {\n          styleSheetRuleCb({\n            id,\n            styleId,\n            adds: [{\n              rule,\n              index: [...getNestedCSSRulePositions(thisArg), index || 0]\n            }]\n          });\n        }\n        return target.apply(thisArg, argumentsList);\n      })\n    });\n    type.prototype.deleteRule = new Proxy(unmodifiedFunctions[typeKey].deleteRule, {\n      apply: callbackWrapper((target, thisArg, argumentsList) => {\n        const [index] = argumentsList;\n        const {\n          id,\n          styleId\n        } = getIdAndStyleId(thisArg.parentStyleSheet, mirror, stylesheetManager.styleMirror);\n        if (id && id !== -1 || styleId && styleId !== -1) {\n          styleSheetRuleCb({\n            id,\n            styleId,\n            removes: [{\n              index: [...getNestedCSSRulePositions(thisArg), index]\n            }]\n          });\n        }\n        return target.apply(thisArg, argumentsList);\n      })\n    });\n  });\n  return callbackWrapper(() => {\n    win.CSSStyleSheet.prototype.insertRule = insertRule;\n    win.CSSStyleSheet.prototype.deleteRule = deleteRule;\n    replace && (win.CSSStyleSheet.prototype.replace = replace);\n    replaceSync && (win.CSSStyleSheet.prototype.replaceSync = replaceSync);\n    Object.entries(supportedNestedCSSRuleTypes).forEach(_ref10 => {\n      let [typeKey, type] = _ref10;\n      type.prototype.insertRule = unmodifiedFunctions[typeKey].insertRule;\n      type.prototype.deleteRule = unmodifiedFunctions[typeKey].deleteRule;\n    });\n  });\n}\nfunction initAdoptedStyleSheetObserver(_ref11, host) {\n  let {\n    mirror,\n    stylesheetManager\n  } = _ref11;\n  let hostId = null;\n  if (host.nodeName === '#document') hostId = mirror.getId(host);else hostId = mirror.getId(host.host);\n  const patchTarget = host.nodeName === '#document' ? _optionalChain$2([host, 'access', _4 => _4.defaultView, 'optionalAccess', _5 => _5.Document]) : _optionalChain$2([host, 'access', _6 => _6.ownerDocument, 'optionalAccess', _7 => _7.defaultView, 'optionalAccess', _8 => _8.ShadowRoot]);\n  const originalPropertyDescriptor = _optionalChain$2([patchTarget, 'optionalAccess', _9 => _9.prototype]) ? Object.getOwnPropertyDescriptor(_optionalChain$2([patchTarget, 'optionalAccess', _10 => _10.prototype]), 'adoptedStyleSheets') : undefined;\n  if (hostId === null || hostId === -1 || !patchTarget || !originalPropertyDescriptor) return () => {};\n  Object.defineProperty(host, 'adoptedStyleSheets', {\n    configurable: originalPropertyDescriptor.configurable,\n    enumerable: originalPropertyDescriptor.enumerable,\n    get() {\n      return _optionalChain$2([originalPropertyDescriptor, 'access', _11 => _11.get, 'optionalAccess', _12 => _12.call, 'call', _13 => _13(this)]);\n    },\n    set(sheets) {\n      const result = _optionalChain$2([originalPropertyDescriptor, 'access', _14 => _14.set, 'optionalAccess', _15 => _15.call, 'call', _16 => _16(this, sheets)]);\n      if (hostId !== null && hostId !== -1) {\n        try {\n          stylesheetManager.adoptStyleSheets(sheets, hostId);\n        } catch (e) {}\n      }\n      return result;\n    }\n  });\n  return callbackWrapper(() => {\n    Object.defineProperty(host, 'adoptedStyleSheets', {\n      configurable: originalPropertyDescriptor.configurable,\n      enumerable: originalPropertyDescriptor.enumerable,\n      get: originalPropertyDescriptor.get,\n      set: originalPropertyDescriptor.set\n    });\n  });\n}\nfunction initStyleDeclarationObserver(_ref12, _ref13) {\n  let {\n    styleDeclarationCb,\n    mirror,\n    ignoreCSSAttributes,\n    stylesheetManager\n  } = _ref12;\n  let {\n    win\n  } = _ref13;\n  const setProperty = win.CSSStyleDeclaration.prototype.setProperty;\n  win.CSSStyleDeclaration.prototype.setProperty = new Proxy(setProperty, {\n    apply: callbackWrapper((target, thisArg, argumentsList) => {\n      const [property, value, priority] = argumentsList;\n      if (ignoreCSSAttributes.has(property)) {\n        return setProperty.apply(thisArg, [property, value, priority]);\n      }\n      const {\n        id,\n        styleId\n      } = getIdAndStyleId(_optionalChain$2([thisArg, 'access', _17 => _17.parentRule, 'optionalAccess', _18 => _18.parentStyleSheet]), mirror, stylesheetManager.styleMirror);\n      if (id && id !== -1 || styleId && styleId !== -1) {\n        styleDeclarationCb({\n          id,\n          styleId,\n          set: {\n            property,\n            value,\n            priority\n          },\n          index: getNestedCSSRulePositions(thisArg.parentRule)\n        });\n      }\n      return target.apply(thisArg, argumentsList);\n    })\n  });\n  const removeProperty = win.CSSStyleDeclaration.prototype.removeProperty;\n  win.CSSStyleDeclaration.prototype.removeProperty = new Proxy(removeProperty, {\n    apply: callbackWrapper((target, thisArg, argumentsList) => {\n      const [property] = argumentsList;\n      if (ignoreCSSAttributes.has(property)) {\n        return removeProperty.apply(thisArg, [property]);\n      }\n      const {\n        id,\n        styleId\n      } = getIdAndStyleId(_optionalChain$2([thisArg, 'access', _19 => _19.parentRule, 'optionalAccess', _20 => _20.parentStyleSheet]), mirror, stylesheetManager.styleMirror);\n      if (id && id !== -1 || styleId && styleId !== -1) {\n        styleDeclarationCb({\n          id,\n          styleId,\n          remove: {\n            property\n          },\n          index: getNestedCSSRulePositions(thisArg.parentRule)\n        });\n      }\n      return target.apply(thisArg, argumentsList);\n    })\n  });\n  return callbackWrapper(() => {\n    win.CSSStyleDeclaration.prototype.setProperty = setProperty;\n    win.CSSStyleDeclaration.prototype.removeProperty = removeProperty;\n  });\n}\nfunction initMediaInteractionObserver(_ref14) {\n  let {\n    mediaInteractionCb,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    mirror,\n    sampling,\n    doc\n  } = _ref14;\n  const handler = callbackWrapper(type => throttle$1(callbackWrapper(event => {\n    const target = getEventTarget(event);\n    if (!target || isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n      return;\n    }\n    const {\n      currentTime,\n      volume,\n      muted,\n      playbackRate\n    } = target;\n    mediaInteractionCb({\n      type,\n      id: mirror.getId(target),\n      currentTime,\n      volume,\n      muted,\n      playbackRate\n    });\n  }), sampling.media || 500));\n  const handlers = [on('play', handler(0), doc), on('pause', handler(1), doc), on('seeked', handler(2), doc), on('volumechange', handler(3), doc), on('ratechange', handler(4), doc)];\n  return callbackWrapper(() => {\n    handlers.forEach(h => h());\n  });\n}\nfunction initFontObserver(_ref15) {\n  let {\n    fontCb,\n    doc\n  } = _ref15;\n  const win = doc.defaultView;\n  if (!win) {\n    return () => {};\n  }\n  const handlers = [];\n  const fontMap = new WeakMap();\n  const originalFontFace = win.FontFace;\n  win.FontFace = function FontFace(family, source, descriptors) {\n    const fontFace = new originalFontFace(family, source, descriptors);\n    fontMap.set(fontFace, {\n      family,\n      buffer: typeof source !== 'string',\n      descriptors,\n      fontSource: typeof source === 'string' ? source : JSON.stringify(Array.from(new Uint8Array(source)))\n    });\n    return fontFace;\n  };\n  const restoreHandler = patch(doc.fonts, 'add', function (original) {\n    return function (fontFace) {\n      setTimeout$1(callbackWrapper(() => {\n        const p = fontMap.get(fontFace);\n        if (p) {\n          fontCb(p);\n          fontMap.delete(fontFace);\n        }\n      }), 0);\n      return original.apply(this, [fontFace]);\n    };\n  });\n  handlers.push(() => {\n    win.FontFace = originalFontFace;\n  });\n  handlers.push(restoreHandler);\n  return callbackWrapper(() => {\n    handlers.forEach(h => h());\n  });\n}\nfunction initSelectionObserver(param) {\n  const {\n    doc,\n    mirror,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    selectionCb\n  } = param;\n  let collapsed = true;\n  const updateSelection = callbackWrapper(() => {\n    const selection = doc.getSelection();\n    if (!selection || collapsed && _optionalChain$2([selection, 'optionalAccess', _21 => _21.isCollapsed])) return;\n    collapsed = selection.isCollapsed || false;\n    const ranges = [];\n    const count = selection.rangeCount || 0;\n    for (let i = 0; i < count; i++) {\n      const range = selection.getRangeAt(i);\n      const {\n        startContainer,\n        startOffset,\n        endContainer,\n        endOffset\n      } = range;\n      const blocked = isBlocked(startContainer, blockClass, blockSelector, unblockSelector, true) || isBlocked(endContainer, blockClass, blockSelector, unblockSelector, true);\n      if (blocked) continue;\n      ranges.push({\n        start: mirror.getId(startContainer),\n        startOffset,\n        end: mirror.getId(endContainer),\n        endOffset\n      });\n    }\n    selectionCb({\n      ranges\n    });\n  });\n  updateSelection();\n  return on('selectionchange', updateSelection);\n}\nfunction initCustomElementObserver(_ref16) {\n  let {\n    doc,\n    customElementCb\n  } = _ref16;\n  const win = doc.defaultView;\n  if (!win || !win.customElements) return () => {};\n  const restoreHandler = patch(win.customElements, 'define', function (original) {\n    return function (name, constructor, options) {\n      try {\n        customElementCb({\n          define: {\n            name\n          }\n        });\n      } catch (e) {}\n      return original.apply(this, [name, constructor, options]);\n    };\n  });\n  return restoreHandler;\n}\nfunction initObservers(o) {\n  let _hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const currentWindow = o.doc.defaultView;\n  if (!currentWindow) {\n    return () => {};\n  }\n  const mutationObserver = initMutationObserver(o, o.doc);\n  const mousemoveHandler = initMoveObserver(o);\n  const mouseInteractionHandler = initMouseInteractionObserver(o);\n  const scrollHandler = initScrollObserver(o);\n  const viewportResizeHandler = initViewportResizeObserver(o, {\n    win: currentWindow\n  });\n  const inputHandler = initInputObserver(o);\n  const mediaInteractionHandler = initMediaInteractionObserver(o);\n  const styleSheetObserver = initStyleSheetObserver(o, {\n    win: currentWindow\n  });\n  const adoptedStyleSheetObserver = initAdoptedStyleSheetObserver(o, o.doc);\n  const styleDeclarationObserver = initStyleDeclarationObserver(o, {\n    win: currentWindow\n  });\n  const fontObserver = o.collectFonts ? initFontObserver(o) : () => {};\n  const selectionObserver = initSelectionObserver(o);\n  const customElementObserver = initCustomElementObserver(o);\n  const pluginHandlers = [];\n  for (const plugin of o.plugins) {\n    pluginHandlers.push(plugin.observer(plugin.callback, currentWindow, plugin.options));\n  }\n  return callbackWrapper(() => {\n    mutationBuffers.forEach(b => b.reset());\n    mutationObserver.disconnect();\n    mousemoveHandler();\n    mouseInteractionHandler();\n    scrollHandler();\n    viewportResizeHandler();\n    inputHandler();\n    mediaInteractionHandler();\n    styleSheetObserver();\n    adoptedStyleSheetObserver();\n    styleDeclarationObserver();\n    fontObserver();\n    selectionObserver();\n    customElementObserver();\n    pluginHandlers.forEach(h => h());\n  });\n}\nfunction hasNestedCSSRule(prop) {\n  return typeof window[prop] !== 'undefined';\n}\nfunction canMonkeyPatchNestedCSSRule(prop) {\n  return Boolean(typeof window[prop] !== 'undefined' && window[prop].prototype && 'insertRule' in window[prop].prototype && 'deleteRule' in window[prop].prototype);\n}\nclass CrossOriginIframeMirror {\n  constructor(generateIdFn) {\n    this.generateIdFn = generateIdFn;\n    this.iframeIdToRemoteIdMap = new WeakMap();\n    this.iframeRemoteIdToIdMap = new WeakMap();\n  }\n  getId(iframe, remoteId, idToRemoteMap, remoteToIdMap) {\n    const idToRemoteIdMap = idToRemoteMap || this.getIdToRemoteIdMap(iframe);\n    const remoteIdToIdMap = remoteToIdMap || this.getRemoteIdToIdMap(iframe);\n    let id = idToRemoteIdMap.get(remoteId);\n    if (!id) {\n      id = this.generateIdFn();\n      idToRemoteIdMap.set(remoteId, id);\n      remoteIdToIdMap.set(id, remoteId);\n    }\n    return id;\n  }\n  getIds(iframe, remoteId) {\n    const idToRemoteIdMap = this.getIdToRemoteIdMap(iframe);\n    const remoteIdToIdMap = this.getRemoteIdToIdMap(iframe);\n    return remoteId.map(id => this.getId(iframe, id, idToRemoteIdMap, remoteIdToIdMap));\n  }\n  getRemoteId(iframe, id, map) {\n    const remoteIdToIdMap = map || this.getRemoteIdToIdMap(iframe);\n    if (typeof id !== 'number') return id;\n    const remoteId = remoteIdToIdMap.get(id);\n    if (!remoteId) return -1;\n    return remoteId;\n  }\n  getRemoteIds(iframe, ids) {\n    const remoteIdToIdMap = this.getRemoteIdToIdMap(iframe);\n    return ids.map(id => this.getRemoteId(iframe, id, remoteIdToIdMap));\n  }\n  reset(iframe) {\n    if (!iframe) {\n      this.iframeIdToRemoteIdMap = new WeakMap();\n      this.iframeRemoteIdToIdMap = new WeakMap();\n      return;\n    }\n    this.iframeIdToRemoteIdMap.delete(iframe);\n    this.iframeRemoteIdToIdMap.delete(iframe);\n  }\n  getIdToRemoteIdMap(iframe) {\n    let idToRemoteIdMap = this.iframeIdToRemoteIdMap.get(iframe);\n    if (!idToRemoteIdMap) {\n      idToRemoteIdMap = new Map();\n      this.iframeIdToRemoteIdMap.set(iframe, idToRemoteIdMap);\n    }\n    return idToRemoteIdMap;\n  }\n  getRemoteIdToIdMap(iframe) {\n    let remoteIdToIdMap = this.iframeRemoteIdToIdMap.get(iframe);\n    if (!remoteIdToIdMap) {\n      remoteIdToIdMap = new Map();\n      this.iframeRemoteIdToIdMap.set(iframe, remoteIdToIdMap);\n    }\n    return remoteIdToIdMap;\n  }\n}\nfunction _optionalChain$1(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn(function () {\n        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n          args[_key7] = arguments[_key7];\n        }\n        return value.call(lastAccessLHS, ...args);\n      });\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\nclass IframeManagerNoop {\n  constructor() {\n    this.crossOriginIframeMirror = new CrossOriginIframeMirror(genId);\n    this.crossOriginIframeRootIdMap = new WeakMap();\n  }\n  addIframe() {}\n  addLoadListener() {}\n  attachIframe() {}\n}\nclass IframeManager {\n  constructor(options) {\n    this.iframes = new WeakMap();\n    this.crossOriginIframeMap = new WeakMap();\n    this.crossOriginIframeMirror = new CrossOriginIframeMirror(genId);\n    this.crossOriginIframeRootIdMap = new WeakMap();\n    this.mutationCb = options.mutationCb;\n    this.wrappedEmit = options.wrappedEmit;\n    this.stylesheetManager = options.stylesheetManager;\n    this.recordCrossOriginIframes = options.recordCrossOriginIframes;\n    this.crossOriginIframeStyleMirror = new CrossOriginIframeMirror(this.stylesheetManager.styleMirror.generateId.bind(this.stylesheetManager.styleMirror));\n    this.mirror = options.mirror;\n    if (this.recordCrossOriginIframes) {\n      window.addEventListener('message', this.handleMessage.bind(this));\n    }\n  }\n  addIframe(iframeEl) {\n    this.iframes.set(iframeEl, true);\n    if (iframeEl.contentWindow) this.crossOriginIframeMap.set(iframeEl.contentWindow, iframeEl);\n  }\n  addLoadListener(cb) {\n    this.loadListener = cb;\n  }\n  attachIframe(iframeEl, childSn) {\n    this.mutationCb({\n      adds: [{\n        parentId: this.mirror.getId(iframeEl),\n        nextId: null,\n        node: childSn\n      }],\n      removes: [],\n      texts: [],\n      attributes: [],\n      isAttachIframe: true\n    });\n    _optionalChain$1([this, 'access', _ => _.loadListener, 'optionalCall', _2 => _2(iframeEl)]);\n    if (iframeEl.contentDocument && iframeEl.contentDocument.adoptedStyleSheets && iframeEl.contentDocument.adoptedStyleSheets.length > 0) this.stylesheetManager.adoptStyleSheets(iframeEl.contentDocument.adoptedStyleSheets, this.mirror.getId(iframeEl.contentDocument));\n  }\n  handleMessage(message) {\n    const crossOriginMessageEvent = message;\n    if (crossOriginMessageEvent.data.type !== 'rrweb' || crossOriginMessageEvent.origin !== crossOriginMessageEvent.data.origin) return;\n    const iframeSourceWindow = message.source;\n    if (!iframeSourceWindow) return;\n    const iframeEl = this.crossOriginIframeMap.get(message.source);\n    if (!iframeEl) return;\n    const transformedEvent = this.transformCrossOriginEvent(iframeEl, crossOriginMessageEvent.data.event);\n    if (transformedEvent) this.wrappedEmit(transformedEvent, crossOriginMessageEvent.data.isCheckout);\n  }\n  transformCrossOriginEvent(iframeEl, e) {\n    switch (e.type) {\n      case EventType.FullSnapshot:\n        {\n          this.crossOriginIframeMirror.reset(iframeEl);\n          this.crossOriginIframeStyleMirror.reset(iframeEl);\n          this.replaceIdOnNode(e.data.node, iframeEl);\n          const rootId = e.data.node.id;\n          this.crossOriginIframeRootIdMap.set(iframeEl, rootId);\n          this.patchRootIdOnNode(e.data.node, rootId);\n          return {\n            timestamp: e.timestamp,\n            type: EventType.IncrementalSnapshot,\n            data: {\n              source: IncrementalSource.Mutation,\n              adds: [{\n                parentId: this.mirror.getId(iframeEl),\n                nextId: null,\n                node: e.data.node\n              }],\n              removes: [],\n              texts: [],\n              attributes: [],\n              isAttachIframe: true\n            }\n          };\n        }\n      case EventType.Meta:\n      case EventType.Load:\n      case EventType.DomContentLoaded:\n        {\n          return false;\n        }\n      case EventType.Plugin:\n        {\n          return e;\n        }\n      case EventType.Custom:\n        {\n          this.replaceIds(e.data.payload, iframeEl, ['id', 'parentId', 'previousId', 'nextId']);\n          return e;\n        }\n      case EventType.IncrementalSnapshot:\n        {\n          switch (e.data.source) {\n            case IncrementalSource.Mutation:\n              {\n                e.data.adds.forEach(n => {\n                  this.replaceIds(n, iframeEl, ['parentId', 'nextId', 'previousId']);\n                  this.replaceIdOnNode(n.node, iframeEl);\n                  const rootId = this.crossOriginIframeRootIdMap.get(iframeEl);\n                  rootId && this.patchRootIdOnNode(n.node, rootId);\n                });\n                e.data.removes.forEach(n => {\n                  this.replaceIds(n, iframeEl, ['parentId', 'id']);\n                });\n                e.data.attributes.forEach(n => {\n                  this.replaceIds(n, iframeEl, ['id']);\n                });\n                e.data.texts.forEach(n => {\n                  this.replaceIds(n, iframeEl, ['id']);\n                });\n                return e;\n              }\n            case IncrementalSource.Drag:\n            case IncrementalSource.TouchMove:\n            case IncrementalSource.MouseMove:\n              {\n                e.data.positions.forEach(p => {\n                  this.replaceIds(p, iframeEl, ['id']);\n                });\n                return e;\n              }\n            case IncrementalSource.ViewportResize:\n              {\n                return false;\n              }\n            case IncrementalSource.MediaInteraction:\n            case IncrementalSource.MouseInteraction:\n            case IncrementalSource.Scroll:\n            case IncrementalSource.CanvasMutation:\n            case IncrementalSource.Input:\n              {\n                this.replaceIds(e.data, iframeEl, ['id']);\n                return e;\n              }\n            case IncrementalSource.StyleSheetRule:\n            case IncrementalSource.StyleDeclaration:\n              {\n                this.replaceIds(e.data, iframeEl, ['id']);\n                this.replaceStyleIds(e.data, iframeEl, ['styleId']);\n                return e;\n              }\n            case IncrementalSource.Font:\n              {\n                return e;\n              }\n            case IncrementalSource.Selection:\n              {\n                e.data.ranges.forEach(range => {\n                  this.replaceIds(range, iframeEl, ['start', 'end']);\n                });\n                return e;\n              }\n            case IncrementalSource.AdoptedStyleSheet:\n              {\n                this.replaceIds(e.data, iframeEl, ['id']);\n                this.replaceStyleIds(e.data, iframeEl, ['styleIds']);\n                _optionalChain$1([e, 'access', _3 => _3.data, 'access', _4 => _4.styles, 'optionalAccess', _5 => _5.forEach, 'call', _6 => _6(style => {\n                  this.replaceStyleIds(style, iframeEl, ['styleId']);\n                })]);\n                return e;\n              }\n          }\n        }\n    }\n    return false;\n  }\n  replace(iframeMirror, obj, iframeEl, keys) {\n    for (const key of keys) {\n      if (!Array.isArray(obj[key]) && typeof obj[key] !== 'number') continue;\n      if (Array.isArray(obj[key])) {\n        obj[key] = iframeMirror.getIds(iframeEl, obj[key]);\n      } else {\n        obj[key] = iframeMirror.getId(iframeEl, obj[key]);\n      }\n    }\n    return obj;\n  }\n  replaceIds(obj, iframeEl, keys) {\n    return this.replace(this.crossOriginIframeMirror, obj, iframeEl, keys);\n  }\n  replaceStyleIds(obj, iframeEl, keys) {\n    return this.replace(this.crossOriginIframeStyleMirror, obj, iframeEl, keys);\n  }\n  replaceIdOnNode(node, iframeEl) {\n    this.replaceIds(node, iframeEl, ['id', 'rootId']);\n    if ('childNodes' in node) {\n      node.childNodes.forEach(child => {\n        this.replaceIdOnNode(child, iframeEl);\n      });\n    }\n  }\n  patchRootIdOnNode(node, rootId) {\n    if (node.type !== NodeType$1.Document && !node.rootId) node.rootId = rootId;\n    if ('childNodes' in node) {\n      node.childNodes.forEach(child => {\n        this.patchRootIdOnNode(child, rootId);\n      });\n    }\n  }\n}\nclass ShadowDomManagerNoop {\n  init() {}\n  addShadowRoot() {}\n  observeAttachShadow() {}\n  reset() {}\n}\nclass ShadowDomManager {\n  constructor(options) {\n    this.shadowDoms = new WeakSet();\n    this.restoreHandlers = [];\n    this.mutationCb = options.mutationCb;\n    this.scrollCb = options.scrollCb;\n    this.bypassOptions = options.bypassOptions;\n    this.mirror = options.mirror;\n    this.init();\n  }\n  init() {\n    this.reset();\n    this.patchAttachShadow(Element, document);\n  }\n  addShadowRoot(shadowRoot, doc) {\n    if (!isNativeShadowDom(shadowRoot)) return;\n    if (this.shadowDoms.has(shadowRoot)) return;\n    this.shadowDoms.add(shadowRoot);\n    const observer = initMutationObserver({\n      ...this.bypassOptions,\n      doc,\n      mutationCb: this.mutationCb,\n      mirror: this.mirror,\n      shadowDomManager: this\n    }, shadowRoot);\n    this.restoreHandlers.push(() => observer.disconnect());\n    this.restoreHandlers.push(initScrollObserver({\n      ...this.bypassOptions,\n      scrollCb: this.scrollCb,\n      doc: shadowRoot,\n      mirror: this.mirror\n    }));\n    setTimeout$1(() => {\n      if (shadowRoot.adoptedStyleSheets && shadowRoot.adoptedStyleSheets.length > 0) this.bypassOptions.stylesheetManager.adoptStyleSheets(shadowRoot.adoptedStyleSheets, this.mirror.getId(shadowRoot.host));\n      this.restoreHandlers.push(initAdoptedStyleSheetObserver({\n        mirror: this.mirror,\n        stylesheetManager: this.bypassOptions.stylesheetManager\n      }, shadowRoot));\n    }, 0);\n  }\n  observeAttachShadow(iframeElement) {\n    if (!iframeElement.contentWindow || !iframeElement.contentDocument) return;\n    this.patchAttachShadow(iframeElement.contentWindow.Element, iframeElement.contentDocument);\n  }\n  patchAttachShadow(element, doc) {\n    const manager = this;\n    this.restoreHandlers.push(patch(element.prototype, 'attachShadow', function (original) {\n      return function (option) {\n        const shadowRoot = original.call(this, option);\n        if (this.shadowRoot && inDom(this)) manager.addShadowRoot(this.shadowRoot, doc);\n        return shadowRoot;\n      };\n    }));\n  }\n  reset() {\n    this.restoreHandlers.forEach(handler => {\n      try {\n        handler();\n      } catch (e) {}\n    });\n    this.restoreHandlers = [];\n    this.shadowDoms = new WeakSet();\n  }\n}\nclass CanvasManagerNoop {\n  reset() {}\n  freeze() {}\n  unfreeze() {}\n  lock() {}\n  unlock() {}\n  snapshot() {}\n}\nclass StylesheetManager {\n  constructor(options) {\n    this.trackedLinkElements = new WeakSet();\n    this.styleMirror = new StyleSheetMirror();\n    this.mutationCb = options.mutationCb;\n    this.adoptedStyleSheetCb = options.adoptedStyleSheetCb;\n  }\n  attachLinkElement(linkEl, childSn) {\n    if ('_cssText' in childSn.attributes) this.mutationCb({\n      adds: [],\n      removes: [],\n      texts: [],\n      attributes: [{\n        id: childSn.id,\n        attributes: childSn.attributes\n      }]\n    });\n    this.trackLinkElement(linkEl);\n  }\n  trackLinkElement(linkEl) {\n    if (this.trackedLinkElements.has(linkEl)) return;\n    this.trackedLinkElements.add(linkEl);\n    this.trackStylesheetInLinkElement(linkEl);\n  }\n  adoptStyleSheets(sheets, hostId) {\n    if (sheets.length === 0) return;\n    const adoptedStyleSheetData = {\n      id: hostId,\n      styleIds: []\n    };\n    const styles = [];\n    for (const sheet of sheets) {\n      let styleId;\n      if (!this.styleMirror.has(sheet)) {\n        styleId = this.styleMirror.add(sheet);\n        styles.push({\n          styleId,\n          rules: Array.from(sheet.rules || CSSRule, (r, index) => ({\n            rule: stringifyRule(r),\n            index\n          }))\n        });\n      } else styleId = this.styleMirror.getId(sheet);\n      adoptedStyleSheetData.styleIds.push(styleId);\n    }\n    if (styles.length > 0) adoptedStyleSheetData.styles = styles;\n    this.adoptedStyleSheetCb(adoptedStyleSheetData);\n  }\n  reset() {\n    this.styleMirror.reset();\n    this.trackedLinkElements = new WeakSet();\n  }\n  trackStylesheetInLinkElement(linkEl) {}\n}\nclass ProcessedNodeManager {\n  constructor() {\n    this.nodeMap = new WeakMap();\n    this.loop = true;\n    this.periodicallyClear();\n  }\n  periodicallyClear() {\n    onRequestAnimationFrame(() => {\n      this.clear();\n      if (this.loop) this.periodicallyClear();\n    });\n  }\n  inOtherBuffer(node, thisBuffer) {\n    const buffers = this.nodeMap.get(node);\n    return buffers && Array.from(buffers).some(buffer => buffer !== thisBuffer);\n  }\n  add(node, buffer) {\n    this.nodeMap.set(node, (this.nodeMap.get(node) || new Set()).add(buffer));\n  }\n  clear() {\n    this.nodeMap = new WeakMap();\n  }\n  destroy() {\n    this.loop = false;\n  }\n}\nlet wrappedEmit;\nlet _takeFullSnapshot;\nconst mirror = createMirror();\nfunction record() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    emit,\n    checkoutEveryNms,\n    checkoutEveryNth,\n    blockClass = 'rr-block',\n    blockSelector = null,\n    unblockSelector = null,\n    ignoreClass = 'rr-ignore',\n    ignoreSelector = null,\n    maskAllText = false,\n    maskTextClass = 'rr-mask',\n    unmaskTextClass = null,\n    maskTextSelector = null,\n    unmaskTextSelector = null,\n    inlineStylesheet = true,\n    maskAllInputs,\n    maskInputOptions: _maskInputOptions,\n    slimDOMOptions: _slimDOMOptions,\n    maskAttributeFn,\n    maskInputFn,\n    maskTextFn,\n    maxCanvasSize = null,\n    packFn,\n    sampling = {},\n    dataURLOptions = {},\n    mousemoveWait,\n    recordCanvas = false,\n    recordCrossOriginIframes = false,\n    recordAfter = options.recordAfter === 'DOMContentLoaded' ? options.recordAfter : 'load',\n    userTriggeredOnInput = false,\n    collectFonts = false,\n    inlineImages = false,\n    plugins,\n    keepIframeSrcFn = () => false,\n    ignoreCSSAttributes = new Set([]),\n    errorHandler,\n    onMutation,\n    getCanvasManager\n  } = options;\n  registerErrorHandler(errorHandler);\n  const inEmittingFrame = recordCrossOriginIframes ? window.parent === window : true;\n  let passEmitsToParent = false;\n  if (!inEmittingFrame) {\n    try {\n      if (window.parent.document) {\n        passEmitsToParent = false;\n      }\n    } catch (e) {\n      passEmitsToParent = true;\n    }\n  }\n  if (inEmittingFrame && !emit) {\n    throw new Error('emit function is required');\n  }\n  if (mousemoveWait !== undefined && sampling.mousemove === undefined) {\n    sampling.mousemove = mousemoveWait;\n  }\n  mirror.reset();\n  const maskInputOptions = maskAllInputs === true ? {\n    color: true,\n    date: true,\n    'datetime-local': true,\n    email: true,\n    month: true,\n    number: true,\n    range: true,\n    search: true,\n    tel: true,\n    text: true,\n    time: true,\n    url: true,\n    week: true,\n    textarea: true,\n    select: true,\n    radio: true,\n    checkbox: true\n  } : _maskInputOptions !== undefined ? _maskInputOptions : {};\n  const slimDOMOptions = _slimDOMOptions === true || _slimDOMOptions === 'all' ? {\n    script: true,\n    comment: true,\n    headFavicon: true,\n    headWhitespace: true,\n    headMetaSocial: true,\n    headMetaRobots: true,\n    headMetaHttpEquiv: true,\n    headMetaVerification: true,\n    headMetaAuthorship: _slimDOMOptions === 'all',\n    headMetaDescKeywords: _slimDOMOptions === 'all'\n  } : _slimDOMOptions ? _slimDOMOptions : {};\n  polyfill();\n  let lastFullSnapshotEvent;\n  let incrementalSnapshotCount = 0;\n  const eventProcessor = e => {\n    for (const plugin of plugins || []) {\n      if (plugin.eventProcessor) {\n        e = plugin.eventProcessor(e);\n      }\n    }\n    if (packFn && !passEmitsToParent) {\n      e = packFn(e);\n    }\n    return e;\n  };\n  wrappedEmit = (r, isCheckout) => {\n    const e = r;\n    e.timestamp = nowTimestamp();\n    if (_optionalChain([mutationBuffers, 'access', _ => _[0], 'optionalAccess', _2 => _2.isFrozen, 'call', _3 => _3()]) && e.type !== EventType.FullSnapshot && !(e.type === EventType.IncrementalSnapshot && e.data.source === IncrementalSource.Mutation)) {\n      mutationBuffers.forEach(buf => buf.unfreeze());\n    }\n    if (inEmittingFrame) {\n      _optionalChain([emit, 'optionalCall', _4 => _4(eventProcessor(e), isCheckout)]);\n    } else if (passEmitsToParent) {\n      const message = {\n        type: 'rrweb',\n        event: eventProcessor(e),\n        origin: window.location.origin,\n        isCheckout\n      };\n      window.parent.postMessage(message, '*');\n    }\n    if (e.type === EventType.FullSnapshot) {\n      lastFullSnapshotEvent = e;\n      incrementalSnapshotCount = 0;\n    } else if (e.type === EventType.IncrementalSnapshot) {\n      if (e.data.source === IncrementalSource.Mutation && e.data.isAttachIframe) {\n        return;\n      }\n      incrementalSnapshotCount++;\n      const exceedCount = checkoutEveryNth && incrementalSnapshotCount >= checkoutEveryNth;\n      const exceedTime = checkoutEveryNms && lastFullSnapshotEvent && e.timestamp - lastFullSnapshotEvent.timestamp > checkoutEveryNms;\n      if (exceedCount || exceedTime) {\n        takeFullSnapshot(true);\n      }\n    }\n  };\n  const wrappedMutationEmit = m => {\n    wrappedEmit({\n      type: EventType.IncrementalSnapshot,\n      data: {\n        source: IncrementalSource.Mutation,\n        ...m\n      }\n    });\n  };\n  const wrappedScrollEmit = p => wrappedEmit({\n    type: EventType.IncrementalSnapshot,\n    data: {\n      source: IncrementalSource.Scroll,\n      ...p\n    }\n  });\n  const wrappedCanvasMutationEmit = p => wrappedEmit({\n    type: EventType.IncrementalSnapshot,\n    data: {\n      source: IncrementalSource.CanvasMutation,\n      ...p\n    }\n  });\n  const wrappedAdoptedStyleSheetEmit = a => wrappedEmit({\n    type: EventType.IncrementalSnapshot,\n    data: {\n      source: IncrementalSource.AdoptedStyleSheet,\n      ...a\n    }\n  });\n  const stylesheetManager = new StylesheetManager({\n    mutationCb: wrappedMutationEmit,\n    adoptedStyleSheetCb: wrappedAdoptedStyleSheetEmit\n  });\n  const iframeManager = typeof __RRWEB_EXCLUDE_IFRAME__ === 'boolean' && __RRWEB_EXCLUDE_IFRAME__ ? new IframeManagerNoop() : new IframeManager({\n    mirror,\n    mutationCb: wrappedMutationEmit,\n    stylesheetManager: stylesheetManager,\n    recordCrossOriginIframes,\n    wrappedEmit\n  });\n  for (const plugin of plugins || []) {\n    if (plugin.getMirror) plugin.getMirror({\n      nodeMirror: mirror,\n      crossOriginIframeMirror: iframeManager.crossOriginIframeMirror,\n      crossOriginIframeStyleMirror: iframeManager.crossOriginIframeStyleMirror\n    });\n  }\n  const processedNodeManager = new ProcessedNodeManager();\n  const canvasManager = _getCanvasManager(getCanvasManager, {\n    mirror,\n    win: window,\n    mutationCb: p => wrappedEmit({\n      type: EventType.IncrementalSnapshot,\n      data: {\n        source: IncrementalSource.CanvasMutation,\n        ...p\n      }\n    }),\n    recordCanvas,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    maxCanvasSize,\n    sampling: sampling['canvas'],\n    dataURLOptions,\n    errorHandler\n  });\n  const shadowDomManager = typeof __RRWEB_EXCLUDE_SHADOW_DOM__ === 'boolean' && __RRWEB_EXCLUDE_SHADOW_DOM__ ? new ShadowDomManagerNoop() : new ShadowDomManager({\n    mutationCb: wrappedMutationEmit,\n    scrollCb: wrappedScrollEmit,\n    bypassOptions: {\n      onMutation,\n      blockClass,\n      blockSelector,\n      unblockSelector,\n      maskAllText,\n      maskTextClass,\n      unmaskTextClass,\n      maskTextSelector,\n      unmaskTextSelector,\n      inlineStylesheet,\n      maskInputOptions,\n      dataURLOptions,\n      maskAttributeFn,\n      maskTextFn,\n      maskInputFn,\n      recordCanvas,\n      inlineImages,\n      sampling,\n      slimDOMOptions,\n      iframeManager,\n      stylesheetManager,\n      canvasManager,\n      keepIframeSrcFn,\n      processedNodeManager\n    },\n    mirror\n  });\n  const takeFullSnapshot = function () {\n    let isCheckout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    wrappedEmit({\n      type: EventType.Meta,\n      data: {\n        href: window.location.href,\n        width: getWindowWidth(),\n        height: getWindowHeight()\n      }\n    }, isCheckout);\n    stylesheetManager.reset();\n    shadowDomManager.init();\n    mutationBuffers.forEach(buf => buf.lock());\n    const node = snapshot(document, {\n      mirror,\n      blockClass,\n      blockSelector,\n      unblockSelector,\n      maskAllText,\n      maskTextClass,\n      unmaskTextClass,\n      maskTextSelector,\n      unmaskTextSelector,\n      inlineStylesheet,\n      maskAllInputs: maskInputOptions,\n      maskAttributeFn,\n      maskInputFn,\n      maskTextFn,\n      slimDOM: slimDOMOptions,\n      dataURLOptions,\n      recordCanvas,\n      inlineImages,\n      onSerialize: n => {\n        if (isSerializedIframe(n, mirror)) {\n          iframeManager.addIframe(n);\n        }\n        if (isSerializedStylesheet(n, mirror)) {\n          stylesheetManager.trackLinkElement(n);\n        }\n        if (hasShadowRoot(n)) {\n          shadowDomManager.addShadowRoot(n.shadowRoot, document);\n        }\n      },\n      onIframeLoad: (iframe, childSn) => {\n        iframeManager.attachIframe(iframe, childSn);\n        shadowDomManager.observeAttachShadow(iframe);\n      },\n      onStylesheetLoad: (linkEl, childSn) => {\n        stylesheetManager.attachLinkElement(linkEl, childSn);\n      },\n      keepIframeSrcFn\n    });\n    if (!node) {\n      return console.warn('Failed to snapshot the document');\n    }\n    wrappedEmit({\n      type: EventType.FullSnapshot,\n      data: {\n        node,\n        initialOffset: getWindowScroll(window)\n      }\n    });\n    mutationBuffers.forEach(buf => buf.unlock());\n    if (document.adoptedStyleSheets && document.adoptedStyleSheets.length > 0) stylesheetManager.adoptStyleSheets(document.adoptedStyleSheets, mirror.getId(document));\n  };\n  _takeFullSnapshot = takeFullSnapshot;\n  try {\n    const handlers = [];\n    const observe = doc => {\n      return callbackWrapper(initObservers)({\n        onMutation,\n        mutationCb: wrappedMutationEmit,\n        mousemoveCb: (positions, source) => wrappedEmit({\n          type: EventType.IncrementalSnapshot,\n          data: {\n            source,\n            positions\n          }\n        }),\n        mouseInteractionCb: d => wrappedEmit({\n          type: EventType.IncrementalSnapshot,\n          data: {\n            source: IncrementalSource.MouseInteraction,\n            ...d\n          }\n        }),\n        scrollCb: wrappedScrollEmit,\n        viewportResizeCb: d => wrappedEmit({\n          type: EventType.IncrementalSnapshot,\n          data: {\n            source: IncrementalSource.ViewportResize,\n            ...d\n          }\n        }),\n        inputCb: v => wrappedEmit({\n          type: EventType.IncrementalSnapshot,\n          data: {\n            source: IncrementalSource.Input,\n            ...v\n          }\n        }),\n        mediaInteractionCb: p => wrappedEmit({\n          type: EventType.IncrementalSnapshot,\n          data: {\n            source: IncrementalSource.MediaInteraction,\n            ...p\n          }\n        }),\n        styleSheetRuleCb: r => wrappedEmit({\n          type: EventType.IncrementalSnapshot,\n          data: {\n            source: IncrementalSource.StyleSheetRule,\n            ...r\n          }\n        }),\n        styleDeclarationCb: r => wrappedEmit({\n          type: EventType.IncrementalSnapshot,\n          data: {\n            source: IncrementalSource.StyleDeclaration,\n            ...r\n          }\n        }),\n        canvasMutationCb: wrappedCanvasMutationEmit,\n        fontCb: p => wrappedEmit({\n          type: EventType.IncrementalSnapshot,\n          data: {\n            source: IncrementalSource.Font,\n            ...p\n          }\n        }),\n        selectionCb: p => {\n          wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n              source: IncrementalSource.Selection,\n              ...p\n            }\n          });\n        },\n        customElementCb: c => {\n          wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n              source: IncrementalSource.CustomElement,\n              ...c\n            }\n          });\n        },\n        blockClass,\n        ignoreClass,\n        ignoreSelector,\n        maskAllText,\n        maskTextClass,\n        unmaskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        maskInputOptions,\n        inlineStylesheet,\n        sampling,\n        recordCanvas,\n        inlineImages,\n        userTriggeredOnInput,\n        collectFonts,\n        doc,\n        maskAttributeFn,\n        maskInputFn,\n        maskTextFn,\n        keepIframeSrcFn,\n        blockSelector,\n        unblockSelector,\n        slimDOMOptions,\n        dataURLOptions,\n        mirror,\n        iframeManager,\n        stylesheetManager,\n        shadowDomManager,\n        processedNodeManager,\n        canvasManager,\n        ignoreCSSAttributes,\n        plugins: _optionalChain([plugins, 'optionalAccess', _5 => _5.filter, 'call', _6 => _6(p => p.observer), 'optionalAccess', _7 => _7.map, 'call', _8 => _8(p => ({\n          observer: p.observer,\n          options: p.options,\n          callback: payload => wrappedEmit({\n            type: EventType.Plugin,\n            data: {\n              plugin: p.name,\n              payload\n            }\n          })\n        }))]) || []\n      }, {});\n    };\n    iframeManager.addLoadListener(iframeEl => {\n      try {\n        handlers.push(observe(iframeEl.contentDocument));\n      } catch (error) {\n        console.warn(error);\n      }\n    });\n    const init = () => {\n      takeFullSnapshot();\n      handlers.push(observe(document));\n    };\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\n      init();\n    } else {\n      handlers.push(on('DOMContentLoaded', () => {\n        wrappedEmit({\n          type: EventType.DomContentLoaded,\n          data: {}\n        });\n        if (recordAfter === 'DOMContentLoaded') init();\n      }));\n      handlers.push(on('load', () => {\n        wrappedEmit({\n          type: EventType.Load,\n          data: {}\n        });\n        if (recordAfter === 'load') init();\n      }, window));\n    }\n    return () => {\n      handlers.forEach(h => h());\n      processedNodeManager.destroy();\n      _takeFullSnapshot = undefined;\n      unregisterErrorHandler();\n    };\n  } catch (error) {\n    console.warn(error);\n  }\n}\nfunction takeFullSnapshot(isCheckout) {\n  if (!_takeFullSnapshot) {\n    throw new Error('please take full snapshot after start recording');\n  }\n  _takeFullSnapshot(isCheckout);\n}\nrecord.mirror = mirror;\nrecord.takeFullSnapshot = takeFullSnapshot;\nfunction _getCanvasManager(getCanvasManagerFn, options) {\n  try {\n    return getCanvasManagerFn ? getCanvasManagerFn(options) : new CanvasManagerNoop();\n  } catch (e2) {\n    console.warn('Unable to initialize CanvasManager');\n    return new CanvasManagerNoop();\n  }\n}\nconst ReplayEventTypeIncrementalSnapshot = 3;\nconst ReplayEventTypeCustom = 5;\n\n/**\n * Converts a timestamp to ms, if it was in s, or keeps it as ms.\n */\nfunction timestampToMs(timestamp) {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp : timestamp * 1000;\n}\n\n/**\n * Converts a timestamp to s, if it was in ms, or keeps it as s.\n */\nfunction timestampToS(timestamp) {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Add a breadcrumb event to replay.\n */\nfunction addBreadcrumbEvent(replay, breadcrumb) {\n  if (breadcrumb.category === 'sentry.transaction') {\n    return;\n  }\n  if (['ui.click', 'ui.input'].includes(breadcrumb.category)) {\n    replay.triggerUserActivity();\n  } else {\n    replay.checkAndHandleExpiredSession();\n  }\n  replay.addUpdate(() => {\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.throttledAddEvent({\n      type: EventType.Custom,\n      // TODO: We were converting from ms to seconds for breadcrumbs, spans,\n      // but maybe we should just keep them as milliseconds\n      timestamp: (breadcrumb.timestamp || 0) * 1000,\n      data: {\n        tag: 'breadcrumb',\n        // normalize to max. 10 depth and 1_000 properties per object\n        payload: normalize(breadcrumb, 10, 1000)\n      }\n    });\n\n    // Do not flush after console log messages\n    return breadcrumb.category === 'console';\n  });\n}\nconst INTERACTIVE_SELECTOR = 'button,a';\n\n/** Get the closest interactive parent element, or else return the given element. */\nfunction getClosestInteractive(element) {\n  const closestInteractive = element.closest(INTERACTIVE_SELECTOR);\n  return closestInteractive || element;\n}\n\n/**\n * For clicks, we check if the target is inside of a button or link\n * If so, we use this as the target instead\n * This is useful because if you click on the image in <button><img></button>,\n * The target will be the image, not the button, which we don't want here\n */\nfunction getClickTargetNode(event) {\n  const target = getTargetNode(event);\n  if (!target || !(target instanceof Element)) {\n    return target;\n  }\n  return getClosestInteractive(target);\n}\n\n/** Get the event target node. */\nfunction getTargetNode(event) {\n  if (isEventWithTarget(event)) {\n    return event.target;\n  }\n  return event;\n}\nfunction isEventWithTarget(event) {\n  return typeof event === 'object' && !!event && 'target' in event;\n}\nlet handlers;\n\n/**\n * Register a handler to be called when `window.open()` is called.\n * Returns a cleanup function.\n */\nfunction onWindowOpen(cb) {\n  // Ensure to only register this once\n  if (!handlers) {\n    handlers = [];\n    monkeyPatchWindowOpen();\n  }\n  handlers.push(cb);\n  return () => {\n    const pos = handlers ? handlers.indexOf(cb) : -1;\n    if (pos > -1) {\n      handlers.splice(pos, 1);\n    }\n  };\n}\nfunction monkeyPatchWindowOpen() {\n  fill(WINDOW, 'open', function (originalWindowOpen) {\n    return function () {\n      if (handlers) {\n        try {\n          handlers.forEach(handler => handler());\n        } catch (e) {\n          // ignore errors in here\n        }\n      }\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n      return originalWindowOpen.apply(WINDOW, args);\n    };\n  });\n}\n\n/** Handle a click. */\nfunction handleClick(clickDetector, clickBreadcrumb, node) {\n  clickDetector.handleClick(clickBreadcrumb, node);\n}\n\n/** A click detector class that can be used to detect slow or rage clicks on elements. */\nclass ClickDetector {\n  // protected for testing\n\n  constructor(replay, slowClickConfig) {\n    let _addBreadcrumbEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : addBreadcrumbEvent;\n    this._lastMutation = 0;\n    this._lastScroll = 0;\n    this._clicks = [];\n\n    // We want everything in s, but options are in ms\n    this._timeout = slowClickConfig.timeout / 1000;\n    this._threshold = slowClickConfig.threshold / 1000;\n    this._scollTimeout = slowClickConfig.scrollTimeout / 1000;\n    this._replay = replay;\n    this._ignoreSelector = slowClickConfig.ignoreSelector;\n    this._addBreadcrumbEvent = _addBreadcrumbEvent;\n  }\n\n  /** Register click detection handlers on mutation or scroll. */\n  addListeners() {\n    const cleanupWindowOpen = onWindowOpen(() => {\n      // Treat window.open as mutation\n      this._lastMutation = nowInSeconds();\n    });\n    this._teardown = () => {\n      cleanupWindowOpen();\n      this._clicks = [];\n      this._lastMutation = 0;\n      this._lastScroll = 0;\n    };\n  }\n\n  /** Clean up listeners. */\n  removeListeners() {\n    if (this._teardown) {\n      this._teardown();\n    }\n    if (this._checkClickTimeout) {\n      clearTimeout(this._checkClickTimeout);\n    }\n  }\n\n  /** @inheritDoc */\n  handleClick(breadcrumb, node) {\n    if (ignoreElement(node, this._ignoreSelector) || !isClickBreadcrumb(breadcrumb)) {\n      return;\n    }\n    const newClick = {\n      timestamp: timestampToS(breadcrumb.timestamp),\n      clickBreadcrumb: breadcrumb,\n      // Set this to 0 so we know it originates from the click breadcrumb\n      clickCount: 0,\n      node\n    };\n\n    // If there was a click in the last 1s on the same element, ignore it - only keep a single reference per second\n    if (this._clicks.some(click => click.node === newClick.node && Math.abs(click.timestamp - newClick.timestamp) < 1)) {\n      return;\n    }\n    this._clicks.push(newClick);\n\n    // If this is the first new click, set a timeout to check for multi clicks\n    if (this._clicks.length === 1) {\n      this._scheduleCheckClicks();\n    }\n  }\n\n  /** @inheritDoc */\n  registerMutation() {\n    let timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    this._lastMutation = timestampToS(timestamp);\n  }\n\n  /** @inheritDoc */\n  registerScroll() {\n    let timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    this._lastScroll = timestampToS(timestamp);\n  }\n\n  /** @inheritDoc */\n  registerClick(element) {\n    const node = getClosestInteractive(element);\n    this._handleMultiClick(node);\n  }\n\n  /** Count multiple clicks on elements. */\n  _handleMultiClick(node) {\n    this._getClicks(node).forEach(click => {\n      click.clickCount++;\n    });\n  }\n\n  /** Get all pending clicks for a given node. */\n  _getClicks(node) {\n    return this._clicks.filter(click => click.node === node);\n  }\n\n  /** Check the clicks that happened. */\n  _checkClicks() {\n    const timedOutClicks = [];\n    const now = nowInSeconds();\n    this._clicks.forEach(click => {\n      if (!click.mutationAfter && this._lastMutation) {\n        click.mutationAfter = click.timestamp <= this._lastMutation ? this._lastMutation - click.timestamp : undefined;\n      }\n      if (!click.scrollAfter && this._lastScroll) {\n        click.scrollAfter = click.timestamp <= this._lastScroll ? this._lastScroll - click.timestamp : undefined;\n      }\n\n      // All of these are in seconds!\n      if (click.timestamp + this._timeout <= now) {\n        timedOutClicks.push(click);\n      }\n    });\n\n    // Remove \"old\" clicks\n    for (const click of timedOutClicks) {\n      const pos = this._clicks.indexOf(click);\n      if (pos > -1) {\n        this._generateBreadcrumbs(click);\n        this._clicks.splice(pos, 1);\n      }\n    }\n\n    // Trigger new check, unless no clicks left\n    if (this._clicks.length) {\n      this._scheduleCheckClicks();\n    }\n  }\n\n  /** Generate matching breadcrumb(s) for the click. */\n  _generateBreadcrumbs(click) {\n    const replay = this._replay;\n    const hadScroll = click.scrollAfter && click.scrollAfter <= this._scollTimeout;\n    const hadMutation = click.mutationAfter && click.mutationAfter <= this._threshold;\n    const isSlowClick = !hadScroll && !hadMutation;\n    const {\n      clickCount,\n      clickBreadcrumb\n    } = click;\n\n    // Slow click\n    if (isSlowClick) {\n      // If `mutationAfter` is set, it means a mutation happened after the threshold, but before the timeout\n      // If not, it means we just timed out without scroll & mutation\n      const timeAfterClickMs = Math.min(click.mutationAfter || this._timeout, this._timeout) * 1000;\n      const endReason = timeAfterClickMs < this._timeout * 1000 ? 'mutation' : 'timeout';\n      const breadcrumb = {\n        type: 'default',\n        message: clickBreadcrumb.message,\n        timestamp: clickBreadcrumb.timestamp,\n        category: 'ui.slowClickDetected',\n        data: {\n          ...clickBreadcrumb.data,\n          url: WINDOW.location.href,\n          route: replay.getCurrentRoute(),\n          timeAfterClickMs,\n          endReason,\n          // If clickCount === 0, it means multiClick was not correctly captured here\n          // - we still want to send 1 in this case\n          clickCount: clickCount || 1\n        }\n      };\n      this._addBreadcrumbEvent(replay, breadcrumb);\n      return;\n    }\n\n    // Multi click\n    if (clickCount > 1) {\n      const breadcrumb = {\n        type: 'default',\n        message: clickBreadcrumb.message,\n        timestamp: clickBreadcrumb.timestamp,\n        category: 'ui.multiClick',\n        data: {\n          ...clickBreadcrumb.data,\n          url: WINDOW.location.href,\n          route: replay.getCurrentRoute(),\n          clickCount,\n          metric: true\n        }\n      };\n      this._addBreadcrumbEvent(replay, breadcrumb);\n    }\n  }\n\n  /** Schedule to check current clicks. */\n  _scheduleCheckClicks() {\n    if (this._checkClickTimeout) {\n      clearTimeout(this._checkClickTimeout);\n    }\n    this._checkClickTimeout = setTimeout(() => this._checkClicks(), 1000);\n  }\n}\nconst SLOW_CLICK_TAGS = ['A', 'BUTTON', 'INPUT'];\n\n/** exported for tests only */\nfunction ignoreElement(node, ignoreSelector) {\n  if (!SLOW_CLICK_TAGS.includes(node.tagName)) {\n    return true;\n  }\n\n  // If <input> tag, we only want to consider input[type='submit'] & input[type='button']\n  if (node.tagName === 'INPUT' && !['submit', 'button'].includes(node.getAttribute('type') || '')) {\n    return true;\n  }\n\n  // If <a> tag, detect special variants that may not lead to an action\n  // If target !== _self, we may open the link somewhere else, which would lead to no action\n  // Also, when downloading a file, we may not leave the page, but still not trigger an action\n  if (node.tagName === 'A' && (node.hasAttribute('download') || node.hasAttribute('target') && node.getAttribute('target') !== '_self')) {\n    return true;\n  }\n  if (ignoreSelector && node.matches(ignoreSelector)) {\n    return true;\n  }\n  return false;\n}\nfunction isClickBreadcrumb(breadcrumb) {\n  return !!(breadcrumb.data && typeof breadcrumb.data.nodeId === 'number' && breadcrumb.timestamp);\n}\n\n// This is good enough for us, and is easier to test/mock than `timestampInSeconds`\nfunction nowInSeconds() {\n  return Date.now() / 1000;\n}\n\n/** Update the click detector based on a recording event of rrweb. */\nfunction updateClickDetectorForRecordingEvent(clickDetector, event) {\n  try {\n    // note: We only consider incremental snapshots here\n    // This means that any full snapshot is ignored for mutation detection - the reason is that we simply cannot know if a mutation happened here.\n    // E.g. think that we are buffering, an error happens and we take a full snapshot because we switched to session mode -\n    // in this scenario, we would not know if a dead click happened because of the error, which is a key dead click scenario.\n    // Instead, by ignoring full snapshots, we have the risk that we generate a false positive\n    // (if a mutation _did_ happen but was \"swallowed\" by the full snapshot)\n    // But this should be more unlikely as we'd generally capture the incremental snapshot right away\n\n    if (!isIncrementalEvent(event)) {\n      return;\n    }\n    const {\n      source\n    } = event.data;\n    if (source === IncrementalSource.Mutation) {\n      clickDetector.registerMutation(event.timestamp);\n    }\n    if (source === IncrementalSource.Scroll) {\n      clickDetector.registerScroll(event.timestamp);\n    }\n    if (isIncrementalMouseInteraction(event)) {\n      const {\n        type,\n        id\n      } = event.data;\n      const node = record.mirror.getNode(id);\n      if (node instanceof HTMLElement && type === MouseInteractions.Click) {\n        clickDetector.registerClick(node);\n      }\n    }\n  } catch (e) {\n    // ignore errors here, e.g. if accessing something that does not exist\n  }\n}\nfunction isIncrementalEvent(event) {\n  return event.type === ReplayEventTypeIncrementalSnapshot;\n}\nfunction isIncrementalMouseInteraction(event) {\n  return event.data.source === IncrementalSource.MouseInteraction;\n}\n\n/**\n * Create a breadcrumb for a replay.\n */\nfunction createBreadcrumb(breadcrumb) {\n  return {\n    timestamp: Date.now() / 1000,\n    type: 'default',\n    ...breadcrumb\n  };\n}\nvar NodeType;\n(function (NodeType) {\n  NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n  NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n  NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n  NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n  NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n  NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType || (NodeType = {}));\n\n// Note that these are the serialized attributes and not attributes directly on\n// the DOM Node. Attributes we are interested in:\nconst ATTRIBUTES_TO_RECORD = new Set(['id', 'class', 'aria-label', 'role', 'name', 'alt', 'title', 'data-test-id', 'data-testid', 'disabled', 'aria-disabled', 'data-sentry-component']);\n\n/**\n * Inclusion list of attributes that we want to record from the DOM element\n */\nfunction getAttributesToRecord(attributes) {\n  const obj = {};\n  for (const key in attributes) {\n    if (ATTRIBUTES_TO_RECORD.has(key)) {\n      let normalizedKey = key;\n      if (key === 'data-testid' || key === 'data-test-id') {\n        normalizedKey = 'testId';\n      }\n      obj[normalizedKey] = attributes[key];\n    }\n  }\n  return obj;\n}\nconst handleDomListener = replay => {\n  return handlerData => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n    const result = handleDom(handlerData);\n    if (!result) {\n      return;\n    }\n    const isClick = handlerData.name === 'click';\n    const event = isClick ? handlerData.event : undefined;\n    // Ignore clicks if ctrl/alt/meta/shift keys are held down as they alter behavior of clicks (e.g. open in new tab)\n    if (isClick && replay.clickDetector && event && event.target && !event.altKey && !event.metaKey && !event.ctrlKey && !event.shiftKey) {\n      handleClick(replay.clickDetector, result, getClickTargetNode(handlerData.event));\n    }\n    addBreadcrumbEvent(replay, result);\n  };\n};\n\n/** Get the base DOM breadcrumb. */\nfunction getBaseDomBreadcrumb(target, message) {\n  const nodeId = record.mirror.getId(target);\n  const node = nodeId && record.mirror.getNode(nodeId);\n  const meta = node && record.mirror.getMeta(node);\n  const element = meta && isElement(meta) ? meta : null;\n  return {\n    message,\n    data: element ? {\n      nodeId,\n      node: {\n        id: nodeId,\n        tagName: element.tagName,\n        textContent: Array.from(element.childNodes).map(node => node.type === NodeType.Text && node.textContent).filter(Boolean) // filter out empty values\n        .map(text => text.trim()).join(''),\n        attributes: getAttributesToRecord(element.attributes)\n      }\n    } : {}\n  };\n}\n\n/**\n * An event handler to react to DOM events.\n * Exported for tests.\n */\nfunction handleDom(handlerData) {\n  const {\n    target,\n    message\n  } = getDomTarget(handlerData);\n  return createBreadcrumb({\n    category: `ui.${handlerData.name}`,\n    ...getBaseDomBreadcrumb(target, message)\n  });\n}\nfunction getDomTarget(handlerData) {\n  const isClick = handlerData.name === 'click';\n  let message;\n  let target = null;\n\n  // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n  try {\n    target = isClick ? getClickTargetNode(handlerData.event) : getTargetNode(handlerData.event);\n    message = htmlTreeAsString(target, {\n      maxStringLength: 200\n    }) || '<unknown>';\n  } catch (e) {\n    message = '<unknown>';\n  }\n  return {\n    target,\n    message\n  };\n}\nfunction isElement(node) {\n  return node.type === NodeType.Element;\n}\n\n/** Handle keyboard events & create breadcrumbs. */\nfunction handleKeyboardEvent(replay, event) {\n  if (!replay.isEnabled()) {\n    return;\n  }\n\n  // Update user activity, but do not restart recording as it can create\n  // noisy/low-value replays (e.g. user comes back from idle, hits alt-tab, new\n  // session with a single \"keydown\" breadcrumb is created)\n  replay.updateUserActivity();\n  const breadcrumb = getKeyboardBreadcrumb(event);\n  if (!breadcrumb) {\n    return;\n  }\n  addBreadcrumbEvent(replay, breadcrumb);\n}\n\n/** exported only for tests */\nfunction getKeyboardBreadcrumb(event) {\n  const {\n    metaKey,\n    shiftKey,\n    ctrlKey,\n    altKey,\n    key,\n    target\n  } = event;\n\n  // never capture for input fields\n  if (!target || isInputElement(target) || !key) {\n    return null;\n  }\n\n  // Note: We do not consider shift here, as that means \"uppercase\"\n  const hasModifierKey = metaKey || ctrlKey || altKey;\n  const isCharacterKey = key.length === 1; // other keys like Escape, Tab, etc have a longer length\n\n  // Do not capture breadcrumb if only a word key is pressed\n  // This could leak e.g. user input\n  if (!hasModifierKey && isCharacterKey) {\n    return null;\n  }\n  const message = htmlTreeAsString(target, {\n    maxStringLength: 200\n  }) || '<unknown>';\n  const baseBreadcrumb = getBaseDomBreadcrumb(target, message);\n  return createBreadcrumb({\n    category: 'ui.keyDown',\n    message,\n    data: {\n      ...baseBreadcrumb.data,\n      metaKey,\n      shiftKey,\n      ctrlKey,\n      altKey,\n      key\n    }\n  });\n}\nfunction isInputElement(target) {\n  return target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable;\n}\n\n// Map entryType -> function to normalize data for event\nconst ENTRY_TYPES = {\n  // @ts-expect-error TODO: entry type does not fit the create* functions entry type\n  resource: createResourceEntry,\n  paint: createPaintEntry,\n  // @ts-expect-error TODO: entry type does not fit the create* functions entry type\n  navigation: createNavigationEntry\n};\n\n/**\n * Create replay performance entries from the browser performance entries.\n */\nfunction createPerformanceEntries(entries) {\n  return entries.map(createPerformanceEntry).filter(Boolean);\n}\nfunction createPerformanceEntry(entry) {\n  if (!ENTRY_TYPES[entry.entryType]) {\n    return null;\n  }\n  return ENTRY_TYPES[entry.entryType](entry);\n}\nfunction getAbsoluteTime(time) {\n  // browserPerformanceTimeOrigin can be undefined if `performance` or\n  // `performance.now` doesn't exist, but this is already checked by this integration\n  return ((browserPerformanceTimeOrigin || WINDOW.performance.timeOrigin) + time) / 1000;\n}\nfunction createPaintEntry(entry) {\n  const {\n    duration,\n    entryType,\n    name,\n    startTime\n  } = entry;\n  const start = getAbsoluteTime(startTime);\n  return {\n    type: entryType,\n    name,\n    start,\n    end: start + duration,\n    data: undefined\n  };\n}\nfunction createNavigationEntry(entry) {\n  const {\n    entryType,\n    name,\n    decodedBodySize,\n    duration,\n    domComplete,\n    encodedBodySize,\n    domContentLoadedEventStart,\n    domContentLoadedEventEnd,\n    domInteractive,\n    loadEventStart,\n    loadEventEnd,\n    redirectCount,\n    startTime,\n    transferSize,\n    type\n  } = entry;\n\n  // Ignore entries with no duration, they do not seem to be useful and cause dupes\n  if (duration === 0) {\n    return null;\n  }\n  return {\n    type: `${entryType}.${type}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(domComplete),\n    name,\n    data: {\n      size: transferSize,\n      decodedBodySize,\n      encodedBodySize,\n      duration,\n      domInteractive,\n      domContentLoadedEventStart,\n      domContentLoadedEventEnd,\n      loadEventStart,\n      loadEventEnd,\n      domComplete,\n      redirectCount\n    }\n  };\n}\nfunction createResourceEntry(entry) {\n  const {\n    entryType,\n    initiatorType,\n    name,\n    responseEnd,\n    startTime,\n    decodedBodySize,\n    encodedBodySize,\n    responseStatus,\n    transferSize\n  } = entry;\n\n  // Core SDK handles these\n  if (['fetch', 'xmlhttprequest'].includes(initiatorType)) {\n    return null;\n  }\n  return {\n    type: `${entryType}.${initiatorType}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(responseEnd),\n    name,\n    data: {\n      size: transferSize,\n      statusCode: responseStatus,\n      decodedBodySize,\n      encodedBodySize\n    }\n  };\n}\n\n/**\n * Add a LCP event to the replay based on an LCP metric.\n */\nfunction getLargestContentfulPaint(metric) {\n  const entries = metric.entries;\n  const lastEntry = entries[entries.length - 1];\n  const element = lastEntry ? lastEntry.element : undefined;\n  const value = metric.value;\n  const end = getAbsoluteTime(value);\n  const data = {\n    type: 'largest-contentful-paint',\n    name: 'largest-contentful-paint',\n    start: end,\n    end,\n    data: {\n      value,\n      size: value,\n      nodeId: element ? record.mirror.getId(element) : undefined\n    }\n  };\n  return data;\n}\n\n/**\n * Sets up a PerformanceObserver to listen to all performance entry types.\n * Returns a callback to stop observing.\n */\nfunction setupPerformanceObserver(replay) {\n  function addPerformanceEntry(entry) {\n    // It is possible for entries to come up multiple times\n    if (!replay.performanceEntries.includes(entry)) {\n      replay.performanceEntries.push(entry);\n    }\n  }\n  function onEntries(_ref17) {\n    let {\n      entries\n    } = _ref17;\n    entries.forEach(addPerformanceEntry);\n  }\n  const clearCallbacks = [];\n  ['navigation', 'paint', 'resource'].forEach(type => {\n    clearCallbacks.push(addPerformanceInstrumentationHandler(type, onEntries));\n  });\n  clearCallbacks.push(addLcpInstrumentationHandler(_ref18 => {\n    let {\n      metric\n    } = _ref18;\n    replay.replayPerformanceEntries.push(getLargestContentfulPaint(metric));\n  }));\n\n  // A callback to cleanup all handlers\n  return () => {\n    clearCallbacks.forEach(clearCallback => clearCallback());\n  };\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;\nconst r = `var t=Uint8Array,n=Uint16Array,r=Int32Array,e=new t([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),i=new t([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),a=new t([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),s=function(t,e){for(var i=new n(31),a=0;a<31;++a)i[a]=e+=1<<t[a-1];var s=new r(i[30]);for(a=1;a<30;++a)for(var o=i[a];o<i[a+1];++o)s[o]=o-i[a]<<5|a;return{b:i,r:s}},o=s(e,2),f=o.b,h=o.r;f[28]=258,h[258]=28;for(var l=s(i,0).r,u=new n(32768),c=0;c<32768;++c){var v=(43690&c)>>1|(21845&c)<<1;v=(61680&(v=(52428&v)>>2|(13107&v)<<2))>>4|(3855&v)<<4,u[c]=((65280&v)>>8|(255&v)<<8)>>1}var d=function(t,r,e){for(var i=t.length,a=0,s=new n(r);a<i;++a)t[a]&&++s[t[a]-1];var o,f=new n(r);for(a=1;a<r;++a)f[a]=f[a-1]+s[a-1]<<1;if(e){o=new n(1<<r);var h=15-r;for(a=0;a<i;++a)if(t[a])for(var l=a<<4|t[a],c=r-t[a],v=f[t[a]-1]++<<c,d=v|(1<<c)-1;v<=d;++v)o[u[v]>>h]=l}else for(o=new n(i),a=0;a<i;++a)t[a]&&(o[a]=u[f[t[a]-1]++]>>15-t[a]);return o},g=new t(288);for(c=0;c<144;++c)g[c]=8;for(c=144;c<256;++c)g[c]=9;for(c=256;c<280;++c)g[c]=7;for(c=280;c<288;++c)g[c]=8;var w=new t(32);for(c=0;c<32;++c)w[c]=5;var p=d(g,9,0),y=d(w,5,0),m=function(t){return(t+7)/8|0},b=function(n,r,e){return(null==r||r<0)&&(r=0),(null==e||e>n.length)&&(e=n.length),new t(n.subarray(r,e))},M=[\"unexpected EOF\",\"invalid block type\",\"invalid length/literal\",\"invalid distance\",\"stream finished\",\"no stream handler\",,\"no callback\",\"invalid UTF-8 data\",\"extra field too long\",\"date not in range 1980-2099\",\"filename too long\",\"stream finishing\",\"invalid zip data\"],E=function(t,n,r){var e=new Error(n||M[t]);if(e.code=t,Error.captureStackTrace&&Error.captureStackTrace(e,E),!r)throw e;return e},z=function(t,n,r){r<<=7&n;var e=n/8|0;t[e]|=r,t[e+1]|=r>>8},A=function(t,n,r){r<<=7&n;var e=n/8|0;t[e]|=r,t[e+1]|=r>>8,t[e+2]|=r>>16},_=function(r,e){for(var i=[],a=0;a<r.length;++a)r[a]&&i.push({s:a,f:r[a]});var s=i.length,o=i.slice();if(!s)return{t:F,l:0};if(1==s){var f=new t(i[0].s+1);return f[i[0].s]=1,{t:f,l:1}}i.sort((function(t,n){return t.f-n.f})),i.push({s:-1,f:25001});var h=i[0],l=i[1],u=0,c=1,v=2;for(i[0]={s:-1,f:h.f+l.f,l:h,r:l};c!=s-1;)h=i[i[u].f<i[v].f?u++:v++],l=i[u!=c&&i[u].f<i[v].f?u++:v++],i[c++]={s:-1,f:h.f+l.f,l:h,r:l};var d=o[0].s;for(a=1;a<s;++a)o[a].s>d&&(d=o[a].s);var g=new n(d+1),w=x(i[c-1],g,0);if(w>e){a=0;var p=0,y=w-e,m=1<<y;for(o.sort((function(t,n){return g[n.s]-g[t.s]||t.f-n.f}));a<s;++a){var b=o[a].s;if(!(g[b]>e))break;p+=m-(1<<w-g[b]),g[b]=e}for(p>>=y;p>0;){var M=o[a].s;g[M]<e?p-=1<<e-g[M]++-1:++a}for(;a>=0&&p;--a){var E=o[a].s;g[E]==e&&(--g[E],++p)}w=e}return{t:new t(g),l:w}},x=function(t,n,r){return-1==t.s?Math.max(x(t.l,n,r+1),x(t.r,n,r+1)):n[t.s]=r},D=function(t){for(var r=t.length;r&&!t[--r];);for(var e=new n(++r),i=0,a=t[0],s=1,o=function(t){e[i++]=t},f=1;f<=r;++f)if(t[f]==a&&f!=r)++s;else{if(!a&&s>2){for(;s>138;s-=138)o(32754);s>2&&(o(s>10?s-11<<5|28690:s-3<<5|12305),s=0)}else if(s>3){for(o(a),--s;s>6;s-=6)o(8304);s>2&&(o(s-3<<5|8208),s=0)}for(;s--;)o(a);s=1,a=t[f]}return{c:e.subarray(0,i),n:r}},T=function(t,n){for(var r=0,e=0;e<n.length;++e)r+=t[e]*n[e];return r},k=function(t,n,r){var e=r.length,i=m(n+2);t[i]=255&e,t[i+1]=e>>8,t[i+2]=255^t[i],t[i+3]=255^t[i+1];for(var a=0;a<e;++a)t[i+a+4]=r[a];return 8*(i+4+e)},C=function(t,r,s,o,f,h,l,u,c,v,m){z(r,m++,s),++f[256];for(var b=_(f,15),M=b.t,E=b.l,x=_(h,15),C=x.t,U=x.l,F=D(M),I=F.c,S=F.n,L=D(C),O=L.c,j=L.n,q=new n(19),B=0;B<I.length;++B)++q[31&I[B]];for(B=0;B<O.length;++B)++q[31&O[B]];for(var G=_(q,7),H=G.t,J=G.l,K=19;K>4&&!H[a[K-1]];--K);var N,P,Q,R,V=v+5<<3,W=T(f,g)+T(h,w)+l,X=T(f,M)+T(h,C)+l+14+3*K+T(q,H)+2*q[16]+3*q[17]+7*q[18];if(c>=0&&V<=W&&V<=X)return k(r,m,t.subarray(c,c+v));if(z(r,m,1+(X<W)),m+=2,X<W){N=d(M,E,0),P=M,Q=d(C,U,0),R=C;var Y=d(H,J,0);z(r,m,S-257),z(r,m+5,j-1),z(r,m+10,K-4),m+=14;for(B=0;B<K;++B)z(r,m+3*B,H[a[B]]);m+=3*K;for(var Z=[I,O],$=0;$<2;++$){var tt=Z[$];for(B=0;B<tt.length;++B){var nt=31&tt[B];z(r,m,Y[nt]),m+=H[nt],nt>15&&(z(r,m,tt[B]>>5&127),m+=tt[B]>>12)}}}else N=p,P=g,Q=y,R=w;for(B=0;B<u;++B){var rt=o[B];if(rt>255){A(r,m,N[(nt=rt>>18&31)+257]),m+=P[nt+257],nt>7&&(z(r,m,rt>>23&31),m+=e[nt]);var et=31&rt;A(r,m,Q[et]),m+=R[et],et>3&&(A(r,m,rt>>5&8191),m+=i[et])}else A(r,m,N[rt]),m+=P[rt]}return A(r,m,N[256]),m+P[256]},U=new r([65540,131080,131088,131104,262176,1048704,1048832,2114560,2117632]),F=new t(0),I=function(){for(var t=new Int32Array(256),n=0;n<256;++n){for(var r=n,e=9;--e;)r=(1&r&&-306674912)^r>>>1;t[n]=r}return t}(),S=function(){var t=1,n=0;return{p:function(r){for(var e=t,i=n,a=0|r.length,s=0;s!=a;){for(var o=Math.min(s+2655,a);s<o;++s)i+=e+=r[s];e=(65535&e)+15*(e>>16),i=(65535&i)+15*(i>>16)}t=e,n=i},d:function(){return(255&(t%=65521))<<24|(65280&t)<<8|(255&(n%=65521))<<8|n>>8}}},L=function(a,s,o,f,u){if(!u&&(u={l:1},s.dictionary)){var c=s.dictionary.subarray(-32768),v=new t(c.length+a.length);v.set(c),v.set(a,c.length),a=v,u.w=c.length}return function(a,s,o,f,u,c){var v=c.z||a.length,d=new t(f+v+5*(1+Math.ceil(v/7e3))+u),g=d.subarray(f,d.length-u),w=c.l,p=7&(c.r||0);if(s){p&&(g[0]=c.r>>3);for(var y=U[s-1],M=y>>13,E=8191&y,z=(1<<o)-1,A=c.p||new n(32768),_=c.h||new n(z+1),x=Math.ceil(o/3),D=2*x,T=function(t){return(a[t]^a[t+1]<<x^a[t+2]<<D)&z},F=new r(25e3),I=new n(288),S=new n(32),L=0,O=0,j=c.i||0,q=0,B=c.w||0,G=0;j+2<v;++j){var H=T(j),J=32767&j,K=_[H];if(A[J]=K,_[H]=J,B<=j){var N=v-j;if((L>7e3||q>24576)&&(N>423||!w)){p=C(a,g,0,F,I,S,O,q,G,j-G,p),q=L=O=0,G=j;for(var P=0;P<286;++P)I[P]=0;for(P=0;P<30;++P)S[P]=0}var Q=2,R=0,V=E,W=J-K&32767;if(N>2&&H==T(j-W))for(var X=Math.min(M,N)-1,Y=Math.min(32767,j),Z=Math.min(258,N);W<=Y&&--V&&J!=K;){if(a[j+Q]==a[j+Q-W]){for(var $=0;$<Z&&a[j+$]==a[j+$-W];++$);if($>Q){if(Q=$,R=W,$>X)break;var tt=Math.min(W,$-2),nt=0;for(P=0;P<tt;++P){var rt=j-W+P&32767,et=rt-A[rt]&32767;et>nt&&(nt=et,K=rt)}}}W+=(J=K)-(K=A[J])&32767}if(R){F[q++]=268435456|h[Q]<<18|l[R];var it=31&h[Q],at=31&l[R];O+=e[it]+i[at],++I[257+it],++S[at],B=j+Q,++L}else F[q++]=a[j],++I[a[j]]}}for(j=Math.max(j,B);j<v;++j)F[q++]=a[j],++I[a[j]];p=C(a,g,w,F,I,S,O,q,G,j-G,p),w||(c.r=7&p|g[p/8|0]<<3,p-=7,c.h=_,c.p=A,c.i=j,c.w=B)}else{for(j=c.w||0;j<v+w;j+=65535){var st=j+65535;st>=v&&(g[p/8|0]=w,st=v),p=k(g,p+1,a.subarray(j,st))}c.i=v}return b(d,0,f+m(p)+u)}(a,null==s.level?6:s.level,null==s.mem?Math.ceil(1.5*Math.max(8,Math.min(13,Math.log(a.length)))):12+s.mem,o,f,u)},O=function(t,n,r){for(;r;++n)t[n]=r,r>>>=8},j=function(){function n(n,r){if(\"function\"==typeof n&&(r=n,n={}),this.ondata=r,this.o=n||{},this.s={l:0,i:32768,w:32768,z:32768},this.b=new t(98304),this.o.dictionary){var e=this.o.dictionary.subarray(-32768);this.b.set(e,32768-e.length),this.s.i=32768-e.length}}return n.prototype.p=function(t,n){this.ondata(L(t,this.o,0,0,this.s),n)},n.prototype.push=function(n,r){this.ondata||E(5),this.s.l&&E(4);var e=n.length+this.s.z;if(e>this.b.length){if(e>2*this.b.length-32768){var i=new t(-32768&e);i.set(this.b.subarray(0,this.s.z)),this.b=i}var a=this.b.length-this.s.z;a&&(this.b.set(n.subarray(0,a),this.s.z),this.s.z=this.b.length,this.p(this.b,!1)),this.b.set(this.b.subarray(-32768)),this.b.set(n.subarray(a),32768),this.s.z=n.length-a+32768,this.s.i=32766,this.s.w=32768}else this.b.set(n,this.s.z),this.s.z+=n.length;this.s.l=1&r,(this.s.z>this.s.w+8191||r)&&(this.p(this.b,r||!1),this.s.w=this.s.i,this.s.i-=2)},n}();function q(t,n){n||(n={});var r=function(){var t=-1;return{p:function(n){for(var r=t,e=0;e<n.length;++e)r=I[255&r^n[e]]^r>>>8;t=r},d:function(){return~t}}}(),e=t.length;r.p(t);var i,a=L(t,n,10+((i=n).filename?i.filename.length+1:0),8),s=a.length;return function(t,n){var r=n.filename;if(t[0]=31,t[1]=139,t[2]=8,t[8]=n.level<2?4:9==n.level?2:0,t[9]=3,0!=n.mtime&&O(t,4,Math.floor(new Date(n.mtime||Date.now())/1e3)),r){t[3]=8;for(var e=0;e<=r.length;++e)t[e+10]=r.charCodeAt(e)}}(a,n),O(a,s-8,r.d()),O(a,s-4,e),a}var B=function(){function t(t,n){this.c=S(),this.v=1,j.call(this,t,n)}return t.prototype.push=function(t,n){this.c.p(t),j.prototype.push.call(this,t,n)},t.prototype.p=function(t,n){var r=L(t,this.o,this.v&&(this.o.dictionary?6:2),n&&4,this.s);this.v&&(function(t,n){var r=n.level,e=0==r?0:r<6?1:9==r?3:2;if(t[0]=120,t[1]=e<<6|(n.dictionary&&32),t[1]|=31-(t[0]<<8|t[1])%31,n.dictionary){var i=S();i.p(n.dictionary),O(t,2,i.d())}}(r,this.o),this.v=0),n&&O(r,r.length-4,this.c.d()),this.ondata(r,n)},t}(),G=\"undefined\"!=typeof TextEncoder&&new TextEncoder,H=\"undefined\"!=typeof TextDecoder&&new TextDecoder;try{H.decode(F,{stream:!0})}catch(t){}var J=function(){function t(t){this.ondata=t}return t.prototype.push=function(t,n){this.ondata||E(5),this.d&&E(4),this.ondata(K(t),this.d=n||!1)},t}();function K(n,r){if(r){for(var e=new t(n.length),i=0;i<n.length;++i)e[i]=n.charCodeAt(i);return e}if(G)return G.encode(n);var a=n.length,s=new t(n.length+(n.length>>1)),o=0,f=function(t){s[o++]=t};for(i=0;i<a;++i){if(o+5>s.length){var h=new t(o+8+(a-i<<1));h.set(s),s=h}var l=n.charCodeAt(i);l<128||r?f(l):l<2048?(f(192|l>>6),f(128|63&l)):l>55295&&l<57344?(f(240|(l=65536+(1047552&l)|1023&n.charCodeAt(++i))>>18),f(128|l>>12&63),f(128|l>>6&63),f(128|63&l)):(f(224|l>>12),f(128|l>>6&63),f(128|63&l))}return b(s,0,o)}const N=new class{constructor(){this._init()}clear(){this._init()}addEvent(t){if(!t)throw new Error(\"Adding invalid event\");const n=this._hasEvents?\",\":\"\";this.stream.push(n+t),this._hasEvents=!0}finish(){this.stream.push(\"]\",!0);const t=function(t){let n=0;for(let r=0,e=t.length;r<e;r++)n+=t[r].length;const r=new Uint8Array(n);for(let n=0,e=0,i=t.length;n<i;n++){const i=t[n];r.set(i,e),e+=i.length}return r}(this._deflatedData);return this._init(),t}_init(){this._hasEvents=!1,this._deflatedData=[],this.deflate=new B,this.deflate.ondata=(t,n)=>{this._deflatedData.push(t)},this.stream=new J(((t,n)=>{this.deflate.push(t,n)})),this.stream.push(\"[\")}},P={clear:()=>{N.clear()},addEvent:t=>N.addEvent(t),finish:()=>N.finish(),compress:t=>function(t){return q(K(t))}(t)};addEventListener(\"message\",(function(t){const n=t.data.method,r=t.data.id,e=t.data.arg;if(n in P&&\"function\"==typeof P[n])try{const t=P[n](e);postMessage({id:r,method:n,success:!0,response:t})}catch(t){postMessage({id:r,method:n,success:!1,response:t.message}),console.error(t)}})),postMessage({id:void 0,method:\"init\",success:!0,response:void 0});`;\nfunction e() {\n  const e = new Blob([r]);\n  return URL.createObjectURL(e);\n}\n\n/**\n * Log a message in debug mode, and add a breadcrumb when _experiment.traceInternals is enabled.\n */\nfunction logInfo(message, shouldAddBreadcrumb) {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n  logger.info(message);\n  if (shouldAddBreadcrumb) {\n    addLogBreadcrumb(message);\n  }\n}\n\n/**\n * Log a message, and add a breadcrumb in the next tick.\n * This is necessary when the breadcrumb may be added before the replay is initialized.\n */\nfunction logInfoNextTick(message, shouldAddBreadcrumb) {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n  logger.info(message);\n  if (shouldAddBreadcrumb) {\n    // Wait a tick here to avoid race conditions for some initial logs\n    // which may be added before replay is initialized\n    setTimeout(() => {\n      addLogBreadcrumb(message);\n    }, 0);\n  }\n}\nfunction addLogBreadcrumb(message) {\n  addBreadcrumb({\n    category: 'console',\n    data: {\n      logger: 'replay'\n    },\n    level: 'info',\n    message\n  }, {\n    level: 'info'\n  });\n}\n\n/** This error indicates that the event buffer size exceeded the limit.. */\nclass EventBufferSizeExceededError extends Error {\n  constructor() {\n    super(`Event buffer exceeded maximum size of ${REPLAY_MAX_EVENT_BUFFER_SIZE}.`);\n  }\n}\n\n/**\n * A basic event buffer that does not do any compression.\n * Used as fallback if the compression worker cannot be loaded or is disabled.\n */\nclass EventBufferArray {\n  /** All the events that are buffered to be sent. */\n\n  /** @inheritdoc */\n\n  constructor() {\n    this.events = [];\n    this._totalSize = 0;\n    this.hasCheckout = false;\n  }\n\n  /** @inheritdoc */\n  get hasEvents() {\n    return this.events.length > 0;\n  }\n\n  /** @inheritdoc */\n  get type() {\n    return 'sync';\n  }\n\n  /** @inheritdoc */\n  destroy() {\n    this.events = [];\n  }\n\n  /** @inheritdoc */\n  async addEvent(event) {\n    const eventSize = JSON.stringify(event).length;\n    this._totalSize += eventSize;\n    if (this._totalSize > REPLAY_MAX_EVENT_BUFFER_SIZE) {\n      throw new EventBufferSizeExceededError();\n    }\n    this.events.push(event);\n  }\n\n  /** @inheritdoc */\n  finish() {\n    return new Promise(resolve => {\n      // Make a copy of the events array reference and immediately clear the\n      // events member so that we do not lose new events while uploading\n      // attachment.\n      const eventsRet = this.events;\n      this.clear();\n      resolve(JSON.stringify(eventsRet));\n    });\n  }\n\n  /** @inheritdoc */\n  clear() {\n    this.events = [];\n    this._totalSize = 0;\n    this.hasCheckout = false;\n  }\n\n  /** @inheritdoc */\n  getEarliestTimestamp() {\n    const timestamp = this.events.map(event => event.timestamp).sort()[0];\n    if (!timestamp) {\n      return null;\n    }\n    return timestampToMs(timestamp);\n  }\n}\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nclass WorkerHandler {\n  constructor(worker) {\n    this._worker = worker;\n    this._id = 0;\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n  ensureReady() {\n    // Ensure we only check once\n    if (this._ensureReadyPromise) {\n      return this._ensureReadyPromise;\n    }\n    this._ensureReadyPromise = new Promise((resolve, reject) => {\n      this._worker.addEventListener('message', _ref19 => {\n        let {\n          data\n        } = _ref19;\n        if (data.success) {\n          resolve();\n        } else {\n          reject();\n        }\n      }, {\n        once: true\n      });\n      this._worker.addEventListener('error', error => {\n        reject(error);\n      }, {\n        once: true\n      });\n    });\n    return this._ensureReadyPromise;\n  }\n\n  /**\n   * Destroy the worker.\n   */\n  destroy() {\n    logInfo('[Replay] Destroying compression worker');\n    this._worker.terminate();\n  }\n\n  /**\n   * Post message to worker and wait for response before resolving promise.\n   */\n  postMessage(method, arg) {\n    const id = this._getAndIncrementId();\n    return new Promise((resolve, reject) => {\n      const listener = _ref20 => {\n        let {\n          data\n        } = _ref20;\n        const response = data;\n        if (response.method !== method) {\n          return;\n        }\n\n        // There can be multiple listeners for a single method, the id ensures\n        // that the response matches the caller.\n        if (response.id !== id) {\n          return;\n        }\n\n        // At this point, we'll always want to remove listener regardless of result status\n        this._worker.removeEventListener('message', listener);\n        if (!response.success) {\n          // TODO: Do some error handling, not sure what\n          DEBUG_BUILD && logger.error('[Replay]', response.response);\n          reject(new Error('Error in compression worker'));\n          return;\n        }\n        resolve(response.response);\n      };\n\n      // Note: we can't use `once` option because it's possible it needs to\n      // listen to multiple messages\n      this._worker.addEventListener('message', listener);\n      this._worker.postMessage({\n        id,\n        method,\n        arg\n      });\n    });\n  }\n\n  /** Get the current ID and increment it for the next call. */\n  _getAndIncrementId() {\n    return this._id++;\n  }\n}\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nclass EventBufferCompressionWorker {\n  /** @inheritdoc */\n\n  constructor(worker) {\n    this._worker = new WorkerHandler(worker);\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n    this.hasCheckout = false;\n  }\n\n  /** @inheritdoc */\n  get hasEvents() {\n    return !!this._earliestTimestamp;\n  }\n\n  /** @inheritdoc */\n  get type() {\n    return 'worker';\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n  ensureReady() {\n    return this._worker.ensureReady();\n  }\n\n  /**\n   * Destroy the event buffer.\n   */\n  destroy() {\n    this._worker.destroy();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfuly received and processed by worker.\n   */\n  addEvent(event) {\n    const timestamp = timestampToMs(event.timestamp);\n    if (!this._earliestTimestamp || timestamp < this._earliestTimestamp) {\n      this._earliestTimestamp = timestamp;\n    }\n    const data = JSON.stringify(event);\n    this._totalSize += data.length;\n    if (this._totalSize > REPLAY_MAX_EVENT_BUFFER_SIZE) {\n      return Promise.reject(new EventBufferSizeExceededError());\n    }\n    return this._sendEventToWorker(data);\n  }\n\n  /**\n   * Finish the event buffer and return the compressed data.\n   */\n  finish() {\n    return this._finishRequest();\n  }\n\n  /** @inheritdoc */\n  clear() {\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n    this.hasCheckout = false;\n\n    // We do not wait on this, as we assume the order of messages is consistent for the worker\n    this._worker.postMessage('clear').then(null, e => {\n      DEBUG_BUILD && logger.warn('[Replay] Sending \"clear\" message to worker failed', e);\n    });\n  }\n\n  /** @inheritdoc */\n  getEarliestTimestamp() {\n    return this._earliestTimestamp;\n  }\n\n  /**\n   * Send the event to the worker.\n   */\n  _sendEventToWorker(data) {\n    return this._worker.postMessage('addEvent', data);\n  }\n\n  /**\n   * Finish the request and return the compressed data from the worker.\n   */\n  async _finishRequest() {\n    const response = await this._worker.postMessage('finish');\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n    return response;\n  }\n}\n\n/**\n * This proxy will try to use the compression worker, and fall back to use the simple buffer if an error occurs there.\n * This can happen e.g. if the worker cannot be loaded.\n * Exported only for testing.\n */\nclass EventBufferProxy {\n  constructor(worker) {\n    this._fallback = new EventBufferArray();\n    this._compression = new EventBufferCompressionWorker(worker);\n    this._used = this._fallback;\n    this._ensureWorkerIsLoadedPromise = this._ensureWorkerIsLoaded();\n  }\n\n  /** @inheritdoc */\n  get type() {\n    return this._used.type;\n  }\n\n  /** @inheritDoc */\n  get hasEvents() {\n    return this._used.hasEvents;\n  }\n\n  /** @inheritdoc */\n  get hasCheckout() {\n    return this._used.hasCheckout;\n  }\n  /** @inheritdoc */\n  set hasCheckout(value) {\n    this._used.hasCheckout = value;\n  }\n\n  /** @inheritDoc */\n  destroy() {\n    this._fallback.destroy();\n    this._compression.destroy();\n  }\n\n  /** @inheritdoc */\n  clear() {\n    return this._used.clear();\n  }\n\n  /** @inheritdoc */\n  getEarliestTimestamp() {\n    return this._used.getEarliestTimestamp();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfully added.\n   */\n  addEvent(event) {\n    return this._used.addEvent(event);\n  }\n\n  /** @inheritDoc */\n  async finish() {\n    // Ensure the worker is loaded, so the sent event is compressed\n    await this.ensureWorkerIsLoaded();\n    return this._used.finish();\n  }\n\n  /** Ensure the worker has loaded. */\n  ensureWorkerIsLoaded() {\n    return this._ensureWorkerIsLoadedPromise;\n  }\n\n  /** Actually check if the worker has been loaded. */\n  async _ensureWorkerIsLoaded() {\n    try {\n      await this._compression.ensureReady();\n    } catch (error) {\n      // If the worker fails to load, we fall back to the simple buffer.\n      // Nothing more to do from our side here\n      logInfo('[Replay] Failed to load the compression worker, falling back to simple buffer');\n      return;\n    }\n\n    // Now we need to switch over the array buffer to the compression worker\n    await this._switchToCompressionWorker();\n  }\n\n  /** Switch the used buffer to the compression worker. */\n  async _switchToCompressionWorker() {\n    const {\n      events,\n      hasCheckout\n    } = this._fallback;\n    const addEventPromises = [];\n    for (const event of events) {\n      addEventPromises.push(this._compression.addEvent(event));\n    }\n    this._compression.hasCheckout = hasCheckout;\n\n    // We switch over to the new buffer immediately - any further events will be added\n    // after the previously buffered ones\n    this._used = this._compression;\n\n    // Wait for original events to be re-added before resolving\n    try {\n      await Promise.all(addEventPromises);\n    } catch (error) {\n      DEBUG_BUILD && logger.warn('[Replay] Failed to add events when switching buffers.', error);\n    }\n  }\n}\n\n/**\n * Create an event buffer for replays.\n */\nfunction createEventBuffer(_ref21) {\n  let {\n    useCompression,\n    workerUrl: customWorkerUrl\n  } = _ref21;\n  if (useCompression &&\n  // eslint-disable-next-line no-restricted-globals\n  window.Worker) {\n    const worker = _loadWorker(customWorkerUrl);\n    if (worker) {\n      return worker;\n    }\n  }\n  logInfo('[Replay] Using simple buffer');\n  return new EventBufferArray();\n}\nfunction _loadWorker(customWorkerUrl) {\n  try {\n    const workerUrl = customWorkerUrl || _getWorkerUrl();\n    if (!workerUrl) {\n      return;\n    }\n    logInfo(`[Replay] Using compression worker${customWorkerUrl ? ` from ${customWorkerUrl}` : ''}`);\n    const worker = new Worker(workerUrl);\n    return new EventBufferProxy(worker);\n  } catch (error) {\n    logInfo('[Replay] Failed to create compression worker');\n    // Fall back to use simple event buffer array\n  }\n}\nfunction _getWorkerUrl() {\n  if (typeof __SENTRY_EXCLUDE_REPLAY_WORKER__ === 'undefined' || !__SENTRY_EXCLUDE_REPLAY_WORKER__) {\n    return e();\n  }\n  return '';\n}\n\n/** If sessionStorage is available. */\nfunction hasSessionStorage() {\n  try {\n    // This can throw, e.g. when being accessed in a sandboxed iframe\n    return 'sessionStorage' in WINDOW && !!WINDOW.sessionStorage;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Removes the session from Session Storage and unsets session in replay instance\n */\nfunction clearSession(replay) {\n  deleteSession();\n  replay.session = undefined;\n}\n\n/**\n * Deletes a session from storage\n */\nfunction deleteSession() {\n  if (!hasSessionStorage()) {\n    return;\n  }\n  try {\n    WINDOW.sessionStorage.removeItem(REPLAY_SESSION_KEY);\n  } catch (e) {\n    // Ignore potential SecurityError exceptions\n  }\n}\n\n/**\n * Given a sample rate, returns true if replay should be sampled.\n *\n * 1.0 = 100% sampling\n * 0.0 = 0% sampling\n */\nfunction isSampled(sampleRate) {\n  if (sampleRate === undefined) {\n    return false;\n  }\n\n  // Math.random() returns a number in range of 0 to 1 (inclusive of 0, but not 1)\n  return Math.random() < sampleRate;\n}\n\n/**\n * Get a session with defaults & applied sampling.\n */\nfunction makeSession(session) {\n  const now = Date.now();\n  const id = session.id || uuid4();\n  // Note that this means we cannot set a started/lastActivity of `0`, but this should not be relevant outside of tests.\n  const started = session.started || now;\n  const lastActivity = session.lastActivity || now;\n  const segmentId = session.segmentId || 0;\n  const sampled = session.sampled;\n  const previousSessionId = session.previousSessionId;\n  return {\n    id,\n    started,\n    lastActivity,\n    segmentId,\n    sampled,\n    previousSessionId\n  };\n}\n\n/**\n * Save a session to session storage.\n */\nfunction saveSession(session) {\n  if (!hasSessionStorage()) {\n    return;\n  }\n  try {\n    WINDOW.sessionStorage.setItem(REPLAY_SESSION_KEY, JSON.stringify(session));\n  } catch (e) {\n    // Ignore potential SecurityError exceptions\n  }\n}\n\n/**\n * Get the sampled status for a session based on sample rates & current sampled status.\n */\nfunction getSessionSampleType(sessionSampleRate, allowBuffering) {\n  return isSampled(sessionSampleRate) ? 'session' : allowBuffering ? 'buffer' : false;\n}\n\n/**\n * Create a new session, which in its current implementation is a Sentry event\n * that all replays will be saved to as attachments. Currently, we only expect\n * one of these Sentry events per \"replay session\".\n */\nfunction createSession(_ref22) {\n  let {\n    sessionSampleRate,\n    allowBuffering,\n    stickySession = false\n  } = _ref22;\n  let {\n    previousSessionId\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const sampled = getSessionSampleType(sessionSampleRate, allowBuffering);\n  const session = makeSession({\n    sampled,\n    previousSessionId\n  });\n  if (stickySession) {\n    saveSession(session);\n  }\n  return session;\n}\n\n/**\n * Fetches a session from storage\n */\nfunction fetchSession(traceInternals) {\n  if (!hasSessionStorage()) {\n    return null;\n  }\n  try {\n    // This can throw if cookies are disabled\n    const sessionStringFromStorage = WINDOW.sessionStorage.getItem(REPLAY_SESSION_KEY);\n    if (!sessionStringFromStorage) {\n      return null;\n    }\n    const sessionObj = JSON.parse(sessionStringFromStorage);\n    logInfoNextTick('[Replay] Loading existing session', traceInternals);\n    return makeSession(sessionObj);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Given an initial timestamp and an expiry duration, checks to see if current\n * time should be considered as expired.\n */\nfunction isExpired(initialTime, expiry) {\n  let targetTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : +new Date();\n  // Always expired if < 0\n  if (initialTime === null || expiry === undefined || expiry < 0) {\n    return true;\n  }\n\n  // Never expires if == 0\n  if (expiry === 0) {\n    return false;\n  }\n  return initialTime + expiry <= targetTime;\n}\n\n/**\n * Checks to see if session is expired\n */\nfunction isSessionExpired(session, _ref23) {\n  let {\n    maxReplayDuration,\n    sessionIdleExpire,\n    targetTime = Date.now()\n  } = _ref23;\n  return (\n    // First, check that maximum session length has not been exceeded\n    isExpired(session.started, maxReplayDuration, targetTime) ||\n    // check that the idle timeout has not been exceeded (i.e. user has\n    // performed an action within the last `sessionIdleExpire` ms)\n    isExpired(session.lastActivity, sessionIdleExpire, targetTime)\n  );\n}\n\n/** If the session should be refreshed or not. */\nfunction shouldRefreshSession(session, _ref24) {\n  let {\n    sessionIdleExpire,\n    maxReplayDuration\n  } = _ref24;\n  // If not expired, all good, just keep the session\n  if (!isSessionExpired(session, {\n    sessionIdleExpire,\n    maxReplayDuration\n  })) {\n    return false;\n  }\n\n  // If we are buffering & haven't ever flushed yet, always continue\n  if (session.sampled === 'buffer' && session.segmentId === 0) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Get or create a session, when initializing the replay.\n * Returns a session that may be unsampled.\n */\nfunction loadOrCreateSession(_ref25, sessionOptions) {\n  let {\n    traceInternals,\n    sessionIdleExpire,\n    maxReplayDuration,\n    previousSessionId\n  } = _ref25;\n  const existingSession = sessionOptions.stickySession && fetchSession(traceInternals);\n\n  // No session exists yet, just create a new one\n  if (!existingSession) {\n    logInfoNextTick('[Replay] Creating new session', traceInternals);\n    return createSession(sessionOptions, {\n      previousSessionId\n    });\n  }\n  if (!shouldRefreshSession(existingSession, {\n    sessionIdleExpire,\n    maxReplayDuration\n  })) {\n    return existingSession;\n  }\n  logInfoNextTick('[Replay] Session in sessionStorage is expired, creating new one...');\n  return createSession(sessionOptions, {\n    previousSessionId: existingSession.id\n  });\n}\nfunction isCustomEvent(event) {\n  return event.type === EventType.Custom;\n}\n\n/**\n * Add an event to the event buffer.\n * In contrast to `addEvent`, this does not return a promise & does not wait for the adding of the event to succeed/fail.\n * Instead this returns `true` if we tried to add the event, else false.\n * It returns `false` e.g. if we are paused, disabled, or out of the max replay duration.\n *\n * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n */\nfunction addEventSync(replay, event, isCheckout) {\n  if (!shouldAddEvent(replay, event)) {\n    return false;\n  }\n\n  // This should never reject\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  _addEvent(replay, event, isCheckout);\n  return true;\n}\n\n/**\n * Add an event to the event buffer.\n * Resolves to `null` if no event was added, else to `void`.\n *\n * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n */\nfunction addEvent(replay, event, isCheckout) {\n  if (!shouldAddEvent(replay, event)) {\n    return Promise.resolve(null);\n  }\n  return _addEvent(replay, event, isCheckout);\n}\nasync function _addEvent(replay, event, isCheckout) {\n  if (!replay.eventBuffer) {\n    return null;\n  }\n  try {\n    if (isCheckout && replay.recordingMode === 'buffer') {\n      replay.eventBuffer.clear();\n    }\n    if (isCheckout) {\n      replay.eventBuffer.hasCheckout = true;\n    }\n    const replayOptions = replay.getOptions();\n    const eventAfterPossibleCallback = maybeApplyCallback(event, replayOptions.beforeAddRecordingEvent);\n    if (!eventAfterPossibleCallback) {\n      return;\n    }\n    return await replay.eventBuffer.addEvent(eventAfterPossibleCallback);\n  } catch (error) {\n    const reason = error && error instanceof EventBufferSizeExceededError ? 'addEventSizeExceeded' : 'addEvent';\n    DEBUG_BUILD && logger.error(error);\n    await replay.stop({\n      reason\n    });\n    const client = getClient();\n    if (client) {\n      client.recordDroppedEvent('internal_sdk_error', 'replay');\n    }\n  }\n}\n\n/** Exported only for tests. */\nfunction shouldAddEvent(replay, event) {\n  if (!replay.eventBuffer || replay.isPaused() || !replay.isEnabled()) {\n    return false;\n  }\n  const timestampInMs = timestampToMs(event.timestamp);\n\n  // Throw out events that happen more than 5 minutes ago. This can happen if\n  // page has been left open and idle for a long period of time and user\n  // comes back to trigger a new session. The performance entries rely on\n  // `performance.timeOrigin`, which is when the page first opened.\n  if (timestampInMs + replay.timeouts.sessionIdlePause < Date.now()) {\n    return false;\n  }\n\n  // Throw out events that are +60min from the initial timestamp\n  if (timestampInMs > replay.getContext().initialTimestamp + replay.getOptions().maxReplayDuration) {\n    logInfo(`[Replay] Skipping event with timestamp ${timestampInMs} because it is after maxReplayDuration`, replay.getOptions()._experiments.traceInternals);\n    return false;\n  }\n  return true;\n}\nfunction maybeApplyCallback(event, callback) {\n  try {\n    if (typeof callback === 'function' && isCustomEvent(event)) {\n      return callback(event);\n    }\n  } catch (error) {\n    DEBUG_BUILD && logger.error('[Replay] An error occured in the `beforeAddRecordingEvent` callback, skipping the event...', error);\n    return null;\n  }\n  return event;\n}\n\n/** If the event is an error event */\nfunction isErrorEvent(event) {\n  return !event.type;\n}\n\n/** If the event is a transaction event */\nfunction isTransactionEvent(event) {\n  return event.type === 'transaction';\n}\n\n/** If the event is an replay event */\nfunction isReplayEvent(event) {\n  return event.type === 'replay_event';\n}\n\n/** If the event is a feedback event */\nfunction isFeedbackEvent(event) {\n  return event.type === 'feedback';\n}\n\n/**\n * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n */\nfunction handleAfterSendEvent(replay) {\n  // Custom transports may still be returning `Promise<void>`, which means we cannot expect the status code to be available there\n  // TODO (v8): remove this check as it will no longer be necessary\n  const enforceStatusCode = isBaseTransportSend();\n  return (event, sendResponse) => {\n    if (!replay.isEnabled() || !isErrorEvent(event) && !isTransactionEvent(event)) {\n      return;\n    }\n    const statusCode = sendResponse && sendResponse.statusCode;\n\n    // We only want to do stuff on successful error sending, otherwise you get error replays without errors attached\n    // If not using the base transport, we allow `undefined` response (as a custom transport may not implement this correctly yet)\n    // If we do use the base transport, we skip if we encountered an non-OK status code\n    if (enforceStatusCode && (!statusCode || statusCode < 200 || statusCode >= 300)) {\n      return;\n    }\n    if (isTransactionEvent(event)) {\n      handleTransactionEvent(replay, event);\n      return;\n    }\n    handleErrorEvent(replay, event);\n  };\n}\nfunction handleTransactionEvent(replay, event) {\n  const replayContext = replay.getContext();\n\n  // Collect traceIds in _context regardless of `recordingMode`\n  // In error mode, _context gets cleared on every checkout\n  // We limit to max. 100 transactions linked\n  if (event.contexts && event.contexts.trace && event.contexts.trace.trace_id && replayContext.traceIds.size < 100) {\n    replayContext.traceIds.add(event.contexts.trace.trace_id);\n  }\n}\nfunction handleErrorEvent(replay, event) {\n  const replayContext = replay.getContext();\n\n  // Add error to list of errorIds of replay. This is ok to do even if not\n  // sampled because context will get reset at next checkout.\n  // XXX: There is also a race condition where it's possible to capture an\n  // error to Sentry before Replay SDK has loaded, but response returns after\n  // it was loaded, and this gets called.\n  // We limit to max. 100 errors linked\n  if (event.event_id && replayContext.errorIds.size < 100) {\n    replayContext.errorIds.add(event.event_id);\n  }\n\n  // If error event is tagged with replay id it means it was sampled (when in buffer mode)\n  // Need to be very careful that this does not cause an infinite loop\n  if (replay.recordingMode !== 'buffer' || !event.tags || !event.tags.replayId) {\n    return;\n  }\n  const {\n    beforeErrorSampling\n  } = replay.getOptions();\n  if (typeof beforeErrorSampling === 'function' && !beforeErrorSampling(event)) {\n    return;\n  }\n  setTimeout(() => {\n    // Capture current event buffer as new replay\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.sendBufferedReplayOrFlush();\n  });\n}\nfunction isBaseTransportSend() {\n  const client = getClient();\n  if (!client) {\n    return false;\n  }\n  const transport = client.getTransport();\n  if (!transport) {\n    return false;\n  }\n  return transport.send.__sentry__baseTransport__ || false;\n}\n\n/**\n * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n */\nfunction handleBeforeSendEvent(replay) {\n  return event => {\n    if (!replay.isEnabled() || !isErrorEvent(event)) {\n      return;\n    }\n    handleHydrationError(replay, event);\n  };\n}\nfunction handleHydrationError(replay, event) {\n  const exceptionValue = event.exception && event.exception.values && event.exception.values[0].value;\n  if (typeof exceptionValue !== 'string') {\n    return;\n  }\n  if (\n  // Only matches errors in production builds of react-dom\n  // Example https://reactjs.org/docs/error-decoder.html?invariant=423\n  exceptionValue.match(/reactjs\\.org\\/docs\\/error-decoder\\.html\\?invariant=(418|419|422|423|425)/) ||\n  // Development builds of react-dom\n  // Error 1: Hydration failed because the initial UI does not match what was rendered on the server.\n  // Error 2: Text content does not match server-rendered HTML. Warning: Text content did not match.\n  exceptionValue.match(/(does not match server-rendered HTML|Hydration failed because)/i)) {\n    const breadcrumb = createBreadcrumb({\n      category: 'replay.hydrate-error'\n    });\n    addBreadcrumbEvent(replay, breadcrumb);\n  }\n}\n\n/**\n * Returns true if we think the given event is an error originating inside of rrweb.\n */\nfunction isRrwebError(event, hint) {\n  if (event.type || !event.exception || !event.exception.values || !event.exception.values.length) {\n    return false;\n  }\n\n  // @ts-expect-error this may be set by rrweb when it finds errors\n  if (hint.originalException && hint.originalException.__rrweb__) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Add a feedback breadcrumb event to replay.\n */\nfunction addFeedbackBreadcrumb(replay, event) {\n  replay.triggerUserActivity();\n  replay.addUpdate(() => {\n    if (!event.timestamp) {\n      // Ignore events that don't have timestamps (this shouldn't happen, more of a typing issue)\n      // Return true here so that we don't flush\n      return true;\n    }\n\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.throttledAddEvent({\n      type: EventType.Custom,\n      timestamp: event.timestamp * 1000,\n      data: {\n        tag: 'breadcrumb',\n        payload: {\n          timestamp: event.timestamp,\n          type: 'default',\n          category: 'sentry.feedback',\n          data: {\n            feedbackId: event.event_id\n          }\n        }\n      }\n    });\n    return false;\n  });\n}\n\n/**\n * Determine if event should be sampled (only applies in buffer mode).\n * When an event is captured by `hanldleGlobalEvent`, when in buffer mode\n * we determine if we want to sample the error or not.\n */\nfunction shouldSampleForBufferEvent(replay, event) {\n  if (replay.recordingMode !== 'buffer') {\n    return false;\n  }\n\n  // ignore this error because otherwise we could loop indefinitely with\n  // trying to capture replay and failing\n  if (event.message === UNABLE_TO_SEND_REPLAY) {\n    return false;\n  }\n\n  // Require the event to be an error event & to have an exception\n  if (!event.exception || event.type) {\n    return false;\n  }\n  return isSampled(replay.getOptions().errorSampleRate);\n}\n\n/**\n * Returns a listener to be added to `addEventProcessor(listener)`.\n */\nfunction handleGlobalEventListener(replay) {\n  let includeAfterSendEventHandling = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const afterSendHandler = includeAfterSendEventHandling ? handleAfterSendEvent(replay) : undefined;\n  return Object.assign((event, hint) => {\n    // Do nothing if replay has been disabled\n    if (!replay.isEnabled()) {\n      return event;\n    }\n    if (isReplayEvent(event)) {\n      // Replays have separate set of breadcrumbs, do not include breadcrumbs\n      // from core SDK\n      delete event.breadcrumbs;\n      return event;\n    }\n\n    // We only want to handle errors, transactions, and feedbacks, nothing else\n    if (!isErrorEvent(event) && !isTransactionEvent(event) && !isFeedbackEvent(event)) {\n      return event;\n    }\n\n    // Ensure we do not add replay_id if the session is expired\n    const isSessionActive = replay.checkAndHandleExpiredSession();\n    if (!isSessionActive) {\n      return event;\n    }\n    if (isFeedbackEvent(event)) {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      replay.flush();\n      event.contexts.feedback.replay_id = replay.getSessionId();\n      // Add a replay breadcrumb for this piece of feedback\n      addFeedbackBreadcrumb(replay, event);\n      return event;\n    }\n\n    // Unless `captureExceptions` is enabled, we want to ignore errors coming from rrweb\n    // As there can be a bunch of stuff going wrong in internals there, that we don't want to bubble up to users\n    if (isRrwebError(event, hint) && !replay.getOptions()._experiments.captureExceptions) {\n      DEBUG_BUILD && logger.log('[Replay] Ignoring error from rrweb internals', event);\n      return null;\n    }\n\n    // When in buffer mode, we decide to sample here.\n    // Later, in `handleAfterSendEvent`, if the replayId is set, we know that we sampled\n    // And convert the buffer session to a full session\n    const isErrorEventSampled = shouldSampleForBufferEvent(replay, event);\n\n    // Tag errors if it has been sampled in buffer mode, or if it is session mode\n    // Only tag transactions if in session mode\n    const shouldTagReplayId = isErrorEventSampled || replay.recordingMode === 'session';\n    if (shouldTagReplayId) {\n      event.tags = {\n        ...event.tags,\n        replayId: replay.getSessionId()\n      };\n    }\n\n    // In cases where a custom client is used that does not support the new hooks (yet),\n    // we manually call this hook method here\n    if (afterSendHandler) {\n      // Pretend the error had a 200 response so we always capture it\n      afterSendHandler(event, {\n        statusCode: 200\n      });\n    }\n    return event;\n  }, {\n    id: 'Replay'\n  });\n}\n\n/**\n * Create a \"span\" for each performance entry.\n */\nfunction createPerformanceSpans(replay, entries) {\n  return entries.map(_ref26 => {\n    let {\n      type,\n      start,\n      end,\n      name,\n      data\n    } = _ref26;\n    const response = replay.throttledAddEvent({\n      type: EventType.Custom,\n      timestamp: start,\n      data: {\n        tag: 'performanceSpan',\n        payload: {\n          op: type,\n          description: name,\n          startTimestamp: start,\n          endTimestamp: end,\n          data\n        }\n      }\n    });\n\n    // If response is a string, it means its either THROTTLED or SKIPPED\n    return typeof response === 'string' ? Promise.resolve(null) : response;\n  });\n}\nfunction handleHistory(handlerData) {\n  const {\n    from,\n    to\n  } = handlerData;\n  const now = Date.now() / 1000;\n  return {\n    type: 'navigation.push',\n    start: now,\n    end: now,\n    name: to,\n    data: {\n      previous: from\n    }\n  };\n}\n\n/**\n * Returns a listener to be added to `addHistoryInstrumentationHandler(listener)`.\n */\nfunction handleHistorySpanListener(replay) {\n  return handlerData => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n    const result = handleHistory(handlerData);\n    if (result === null) {\n      return;\n    }\n\n    // Need to collect visited URLs\n    replay.getContext().urls.push(result.name);\n    replay.triggerUserActivity();\n    replay.addUpdate(() => {\n      createPerformanceSpans(replay, [result]);\n      // Returning false to flush\n      return false;\n    });\n  };\n}\n\n/**\n * Check whether a given request URL should be filtered out. This is so we\n * don't log Sentry ingest requests.\n */\nfunction shouldFilterRequest(replay, url) {\n  // If we enabled the `traceInternals` experiment, we want to trace everything\n  if (DEBUG_BUILD && replay.getOptions()._experiments.traceInternals) {\n    return false;\n  }\n  return isSentryRequestUrl(url, getClient());\n}\n\n/** Add a performance entry breadcrumb */\nfunction addNetworkBreadcrumb(replay, result) {\n  if (!replay.isEnabled()) {\n    return;\n  }\n  if (result === null) {\n    return;\n  }\n  if (shouldFilterRequest(replay, result.name)) {\n    return;\n  }\n  replay.addUpdate(() => {\n    createPerformanceSpans(replay, [result]);\n    // Returning true will cause `addUpdate` to not flush\n    // We do not want network requests to cause a flush. This will prevent\n    // recurring/polling requests from keeping the replay session alive.\n    return true;\n  });\n}\n\n/** only exported for tests */\nfunction handleFetch(handlerData) {\n  const {\n    startTimestamp,\n    endTimestamp,\n    fetchData,\n    response\n  } = handlerData;\n  if (!endTimestamp) {\n    return null;\n  }\n\n  // This is only used as a fallback, so we know the body sizes are never set here\n  const {\n    method,\n    url\n  } = fetchData;\n  return {\n    type: 'resource.fetch',\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: url,\n    data: {\n      method,\n      statusCode: response ? response.status : undefined\n    }\n  };\n}\n\n/**\n * Returns a listener to be added to `addFetchInstrumentationHandler(listener)`.\n */\nfunction handleFetchSpanListener(replay) {\n  return handlerData => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n    const result = handleFetch(handlerData);\n    addNetworkBreadcrumb(replay, result);\n  };\n}\n\n/** only exported for tests */\nfunction handleXhr(handlerData) {\n  const {\n    startTimestamp,\n    endTimestamp,\n    xhr\n  } = handlerData;\n  const sentryXhrData = xhr[SENTRY_XHR_DATA_KEY];\n  if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n    return null;\n  }\n\n  // This is only used as a fallback, so we know the body sizes are never set here\n  const {\n    method,\n    url,\n    status_code: statusCode\n  } = sentryXhrData;\n  if (url === undefined) {\n    return null;\n  }\n  return {\n    type: 'resource.xhr',\n    name: url,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    data: {\n      method,\n      statusCode\n    }\n  };\n}\n\n/**\n * Returns a listener to be added to `addXhrInstrumentationHandler(listener)`.\n */\nfunction handleXhrSpanListener(replay) {\n  return handlerData => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n    const result = handleXhr(handlerData);\n    addNetworkBreadcrumb(replay, result);\n  };\n}\n\n/** Get the size of a body. */\nfunction getBodySize(body, textEncoder) {\n  if (!body) {\n    return undefined;\n  }\n  try {\n    if (typeof body === 'string') {\n      return textEncoder.encode(body).length;\n    }\n    if (body instanceof URLSearchParams) {\n      return textEncoder.encode(body.toString()).length;\n    }\n    if (body instanceof FormData) {\n      const formDataStr = _serializeFormData(body);\n      return textEncoder.encode(formDataStr).length;\n    }\n    if (body instanceof Blob) {\n      return body.size;\n    }\n    if (body instanceof ArrayBuffer) {\n      return body.byteLength;\n    }\n\n    // Currently unhandled types: ArrayBufferView, ReadableStream\n  } catch (e) {\n    // just return undefined\n  }\n  return undefined;\n}\n\n/** Convert a Content-Length header to number/undefined.  */\nfunction parseContentLengthHeader(header) {\n  if (!header) {\n    return undefined;\n  }\n  const size = parseInt(header, 10);\n  return isNaN(size) ? undefined : size;\n}\n\n/** Get the string representation of a body. */\nfunction getBodyString(body) {\n  try {\n    if (typeof body === 'string') {\n      return [body];\n    }\n    if (body instanceof URLSearchParams) {\n      return [body.toString()];\n    }\n    if (body instanceof FormData) {\n      return [_serializeFormData(body)];\n    }\n    if (!body) {\n      return [undefined];\n    }\n  } catch (e2) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to serialize body', body);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n  DEBUG_BUILD && logger.info('[Replay] Skipping network body because of body type', body);\n  return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n}\n\n/** Merge a warning into an existing network request/response. */\nfunction mergeWarning(info, warning) {\n  if (!info) {\n    return {\n      headers: {},\n      size: undefined,\n      _meta: {\n        warnings: [warning]\n      }\n    };\n  }\n  const newMeta = {\n    ...info._meta\n  };\n  const existingWarnings = newMeta.warnings || [];\n  newMeta.warnings = [...existingWarnings, warning];\n  info._meta = newMeta;\n  return info;\n}\n\n/** Convert ReplayNetworkRequestData to a PerformanceEntry. */\nfunction makeNetworkReplayBreadcrumb(type, data) {\n  if (!data) {\n    return null;\n  }\n  const {\n    startTimestamp,\n    endTimestamp,\n    url,\n    method,\n    statusCode,\n    request,\n    response\n  } = data;\n  const result = {\n    type,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: url,\n    data: dropUndefinedKeys({\n      method,\n      statusCode,\n      request,\n      response\n    })\n  };\n  return result;\n}\n\n/** Build the request or response part of a replay network breadcrumb that was skipped. */\nfunction buildSkippedNetworkRequestOrResponse(bodySize) {\n  return {\n    headers: {},\n    size: bodySize,\n    _meta: {\n      warnings: ['URL_SKIPPED']\n    }\n  };\n}\n\n/** Build the request or response part of a replay network breadcrumb. */\nfunction buildNetworkRequestOrResponse(headers, bodySize, body) {\n  if (!bodySize && Object.keys(headers).length === 0) {\n    return undefined;\n  }\n  if (!bodySize) {\n    return {\n      headers\n    };\n  }\n  if (!body) {\n    return {\n      headers,\n      size: bodySize\n    };\n  }\n  const info = {\n    headers,\n    size: bodySize\n  };\n  const {\n    body: normalizedBody,\n    warnings\n  } = normalizeNetworkBody(body);\n  info.body = normalizedBody;\n  if (warnings && warnings.length > 0) {\n    info._meta = {\n      warnings\n    };\n  }\n  return info;\n}\n\n/** Filter a set of headers */\nfunction getAllowedHeaders(headers, allowedHeaders) {\n  return Object.keys(headers).reduce((filteredHeaders, key) => {\n    const normalizedKey = key.toLowerCase();\n    // Avoid putting empty strings into the headers\n    if (allowedHeaders.includes(normalizedKey) && headers[key]) {\n      filteredHeaders[normalizedKey] = headers[key];\n    }\n    return filteredHeaders;\n  }, {});\n}\nfunction _serializeFormData(formData) {\n  // This is a bit simplified, but gives us a decent estimate\n  // This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'\n  // @ts-expect-error passing FormData to URLSearchParams actually works\n  return new URLSearchParams(formData).toString();\n}\nfunction normalizeNetworkBody(body) {\n  if (!body || typeof body !== 'string') {\n    return {\n      body\n    };\n  }\n  const exceedsSizeLimit = body.length > NETWORK_BODY_MAX_SIZE;\n  const isProbablyJson = _strIsProbablyJson(body);\n  if (exceedsSizeLimit) {\n    const truncatedBody = body.slice(0, NETWORK_BODY_MAX_SIZE);\n    if (isProbablyJson) {\n      return {\n        body: truncatedBody,\n        warnings: ['MAYBE_JSON_TRUNCATED']\n      };\n    }\n    return {\n      body: `${truncatedBody}…`,\n      warnings: ['TEXT_TRUNCATED']\n    };\n  }\n  if (isProbablyJson) {\n    try {\n      const jsonBody = JSON.parse(body);\n      return {\n        body: jsonBody\n      };\n    } catch (e3) {\n      // fall back to just send the body as string\n    }\n  }\n  return {\n    body\n  };\n}\nfunction _strIsProbablyJson(str) {\n  const first = str[0];\n  const last = str[str.length - 1];\n\n  // Simple check: If this does not start & end with {} or [], it's not JSON\n  return first === '[' && last === ']' || first === '{' && last === '}';\n}\n\n/** Match an URL against a list of strings/Regex. */\nfunction urlMatches(url, urls) {\n  const fullUrl = getFullUrl(url);\n  return stringMatchesSomePattern(fullUrl, urls);\n}\n\n/** exported for tests */\nfunction getFullUrl(url) {\n  let baseURI = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WINDOW.document.baseURI;\n  // Short circuit for common cases:\n  if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith(WINDOW.location.origin)) {\n    return url;\n  }\n  const fixedUrl = new URL(url, baseURI);\n\n  // If these do not match, we are not dealing with a relative URL, so just return it\n  if (fixedUrl.origin !== new URL(baseURI).origin) {\n    return url;\n  }\n  const fullUrl = fixedUrl.href;\n\n  // Remove trailing slashes, if they don't match the original URL\n  if (!url.endsWith('/') && fullUrl.endsWith('/')) {\n    return fullUrl.slice(0, -1);\n  }\n  return fullUrl;\n}\n\n/**\n * Capture a fetch breadcrumb to a replay.\n * This adds additional data (where approriate).\n */\nasync function captureFetchBreadcrumbToReplay(breadcrumb, hint, options) {\n  try {\n    const data = await _prepareFetchData(breadcrumb, hint, options);\n\n    // Create a replay performance entry from this breadcrumb\n    const result = makeNetworkReplayBreadcrumb('resource.fetch', data);\n    addNetworkBreadcrumb(options.replay, result);\n  } catch (error) {\n    DEBUG_BUILD && logger.error('[Replay] Failed to capture fetch breadcrumb', error);\n  }\n}\n\n/**\n * Enrich a breadcrumb with additional data.\n * This has to be sync & mutate the given breadcrumb,\n * as the breadcrumb is afterwards consumed by other handlers.\n */\nfunction enrichFetchBreadcrumb(breadcrumb, hint, options) {\n  const {\n    input,\n    response\n  } = hint;\n  const body = input ? _getFetchRequestArgBody(input) : undefined;\n  const reqSize = getBodySize(body, options.textEncoder);\n  const resSize = response ? parseContentLengthHeader(response.headers.get('content-length')) : undefined;\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\nasync function _prepareFetchData(breadcrumb, hint, options) {\n  const now = Date.now();\n  const {\n    startTimestamp = now,\n    endTimestamp = now\n  } = hint;\n  const {\n    url,\n    method,\n    status_code: statusCode = 0,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize\n  } = breadcrumb.data;\n  const captureDetails = urlMatches(url, options.networkDetailAllowUrls) && !urlMatches(url, options.networkDetailDenyUrls);\n  const request = captureDetails ? _getRequestInfo(options, hint.input, requestBodySize) : buildSkippedNetworkRequestOrResponse(requestBodySize);\n  const response = await _getResponseInfo(captureDetails, options, hint.response, responseBodySize);\n  return {\n    startTimestamp,\n    endTimestamp,\n    url,\n    method,\n    statusCode,\n    request,\n    response\n  };\n}\nfunction _getRequestInfo(_ref27, input, requestBodySize) {\n  let {\n    networkCaptureBodies,\n    networkRequestHeaders\n  } = _ref27;\n  const headers = input ? getRequestHeaders(input, networkRequestHeaders) : {};\n  if (!networkCaptureBodies) {\n    return buildNetworkRequestOrResponse(headers, requestBodySize, undefined);\n  }\n\n  // We only want to transmit string or string-like bodies\n  const requestBody = _getFetchRequestArgBody(input);\n  const [bodyStr, warning] = getBodyString(requestBody);\n  const data = buildNetworkRequestOrResponse(headers, requestBodySize, bodyStr);\n  if (warning) {\n    return mergeWarning(data, warning);\n  }\n  return data;\n}\n\n/** Exported only for tests. */\nasync function _getResponseInfo(captureDetails, _ref28, response, responseBodySize) {\n  let {\n    networkCaptureBodies,\n    textEncoder,\n    networkResponseHeaders\n  } = _ref28;\n  if (!captureDetails && responseBodySize !== undefined) {\n    return buildSkippedNetworkRequestOrResponse(responseBodySize);\n  }\n  const headers = response ? getAllHeaders(response.headers, networkResponseHeaders) : {};\n  if (!response || !networkCaptureBodies && responseBodySize !== undefined) {\n    return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);\n  }\n  const [bodyText, warning] = await _parseFetchResponseBody(response);\n  const result = getResponseData(bodyText, {\n    networkCaptureBodies,\n    textEncoder,\n    responseBodySize,\n    captureDetails,\n    headers\n  });\n  if (warning) {\n    return mergeWarning(result, warning);\n  }\n  return result;\n}\nfunction getResponseData(bodyText, _ref29) {\n  let {\n    networkCaptureBodies,\n    textEncoder,\n    responseBodySize,\n    captureDetails,\n    headers\n  } = _ref29;\n  try {\n    const size = bodyText && bodyText.length && responseBodySize === undefined ? getBodySize(bodyText, textEncoder) : responseBodySize;\n    if (!captureDetails) {\n      return buildSkippedNetworkRequestOrResponse(size);\n    }\n    if (networkCaptureBodies) {\n      return buildNetworkRequestOrResponse(headers, size, bodyText);\n    }\n    return buildNetworkRequestOrResponse(headers, size, undefined);\n  } catch (error) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to serialize response body', error);\n    // fallback\n    return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);\n  }\n}\nasync function _parseFetchResponseBody(response) {\n  const res = _tryCloneResponse(response);\n  if (!res) {\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n  try {\n    const text = await _tryGetResponseText(res);\n    return [text];\n  } catch (error) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to get text body from response', error);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n}\nfunction _getFetchRequestArgBody() {\n  let fetchArgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  // We only support getting the body from the fetch options\n  if (fetchArgs.length !== 2 || typeof fetchArgs[1] !== 'object') {\n    return undefined;\n  }\n  return fetchArgs[1].body;\n}\nfunction getAllHeaders(headers, allowedHeaders) {\n  const allHeaders = {};\n  allowedHeaders.forEach(header => {\n    if (headers.get(header)) {\n      allHeaders[header] = headers.get(header);\n    }\n  });\n  return allHeaders;\n}\nfunction getRequestHeaders(fetchArgs, allowedHeaders) {\n  if (fetchArgs.length === 1 && typeof fetchArgs[0] !== 'string') {\n    return getHeadersFromOptions(fetchArgs[0], allowedHeaders);\n  }\n  if (fetchArgs.length === 2) {\n    return getHeadersFromOptions(fetchArgs[1], allowedHeaders);\n  }\n  return {};\n}\nfunction getHeadersFromOptions(input, allowedHeaders) {\n  if (!input) {\n    return {};\n  }\n  const headers = input.headers;\n  if (!headers) {\n    return {};\n  }\n  if (headers instanceof Headers) {\n    return getAllHeaders(headers, allowedHeaders);\n  }\n\n  // We do not support this, as it is not really documented (anymore?)\n  if (Array.isArray(headers)) {\n    return {};\n  }\n  return getAllowedHeaders(headers, allowedHeaders);\n}\nfunction _tryCloneResponse(response) {\n  try {\n    // We have to clone this, as the body can only be read once\n    return response.clone();\n  } catch (error) {\n    // this can throw if the response was already consumed before\n    DEBUG_BUILD && logger.warn('[Replay] Failed to clone response body', error);\n  }\n}\n\n/**\n * Get the response body of a fetch request, or timeout after 500ms.\n * Fetch can return a streaming body, that may not resolve (or not for a long time).\n * If that happens, we rather abort after a short time than keep waiting for this.\n */\nfunction _tryGetResponseText(response) {\n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout(() => reject(new Error('Timeout while trying to read response body')), 500);\n    _getResponseText(response).then(txt => resolve(txt), reason => reject(reason)).finally(() => clearTimeout(timeout));\n  });\n}\nasync function _getResponseText(response) {\n  // Force this to be a promise, just to be safe\n  // eslint-disable-next-line no-return-await\n  return await response.text();\n}\n\n/**\n * Capture an XHR breadcrumb to a replay.\n * This adds additional data (where approriate).\n */\nasync function captureXhrBreadcrumbToReplay(breadcrumb, hint, options) {\n  try {\n    const data = _prepareXhrData(breadcrumb, hint, options);\n\n    // Create a replay performance entry from this breadcrumb\n    const result = makeNetworkReplayBreadcrumb('resource.xhr', data);\n    addNetworkBreadcrumb(options.replay, result);\n  } catch (error) {\n    DEBUG_BUILD && logger.error('[Replay] Failed to capture xhr breadcrumb', error);\n  }\n}\n\n/**\n * Enrich a breadcrumb with additional data.\n * This has to be sync & mutate the given breadcrumb,\n * as the breadcrumb is afterwards consumed by other handlers.\n */\nfunction enrichXhrBreadcrumb(breadcrumb, hint, options) {\n  const {\n    xhr,\n    input\n  } = hint;\n  if (!xhr) {\n    return;\n  }\n  const reqSize = getBodySize(input, options.textEncoder);\n  const resSize = xhr.getResponseHeader('content-length') ? parseContentLengthHeader(xhr.getResponseHeader('content-length')) : _getBodySize(xhr.response, xhr.responseType, options.textEncoder);\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\nfunction _prepareXhrData(breadcrumb, hint, options) {\n  const now = Date.now();\n  const {\n    startTimestamp = now,\n    endTimestamp = now,\n    input,\n    xhr\n  } = hint;\n  const {\n    url,\n    method,\n    status_code: statusCode = 0,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize\n  } = breadcrumb.data;\n  if (!url) {\n    return null;\n  }\n  if (!xhr || !urlMatches(url, options.networkDetailAllowUrls) || urlMatches(url, options.networkDetailDenyUrls)) {\n    const request = buildSkippedNetworkRequestOrResponse(requestBodySize);\n    const response = buildSkippedNetworkRequestOrResponse(responseBodySize);\n    return {\n      startTimestamp,\n      endTimestamp,\n      url,\n      method,\n      statusCode,\n      request,\n      response\n    };\n  }\n  const xhrInfo = xhr[SENTRY_XHR_DATA_KEY];\n  const networkRequestHeaders = xhrInfo ? getAllowedHeaders(xhrInfo.request_headers, options.networkRequestHeaders) : {};\n  const networkResponseHeaders = getAllowedHeaders(getResponseHeaders(xhr), options.networkResponseHeaders);\n  const [requestBody, requestWarning] = options.networkCaptureBodies ? getBodyString(input) : [undefined];\n  const [responseBody, responseWarning] = options.networkCaptureBodies ? _getXhrResponseBody(xhr) : [undefined];\n  const request = buildNetworkRequestOrResponse(networkRequestHeaders, requestBodySize, requestBody);\n  const response = buildNetworkRequestOrResponse(networkResponseHeaders, responseBodySize, responseBody);\n  return {\n    startTimestamp,\n    endTimestamp,\n    url,\n    method,\n    statusCode,\n    request: requestWarning ? mergeWarning(request, requestWarning) : request,\n    response: responseWarning ? mergeWarning(response, responseWarning) : response\n  };\n}\nfunction getResponseHeaders(xhr) {\n  const headers = xhr.getAllResponseHeaders();\n  if (!headers) {\n    return {};\n  }\n  return headers.split('\\r\\n').reduce((acc, line) => {\n    const [key, value] = line.split(': ');\n    acc[key.toLowerCase()] = value;\n    return acc;\n  }, {});\n}\nfunction _getXhrResponseBody(xhr) {\n  // We collect errors that happen, but only log them if we can't get any response body\n  const errors = [];\n  try {\n    return [xhr.responseText];\n  } catch (e) {\n    errors.push(e);\n  }\n\n  // Try to manually parse the response body, if responseText fails\n  try {\n    return _parseXhrResponse(xhr.response, xhr.responseType);\n  } catch (e) {\n    errors.push(e);\n  }\n  DEBUG_BUILD && logger.warn('[Replay] Failed to get xhr response body', ...errors);\n  return [undefined];\n}\n\n/**\n * Get the string representation of the XHR response.\n * Based on MDN, these are the possible types of the response:\n * string\n * ArrayBuffer\n * Blob\n * Document\n * POJO\n *\n * Exported only for tests.\n */\nfunction _parseXhrResponse(body, responseType) {\n  try {\n    if (typeof body === 'string') {\n      return [body];\n    }\n    if (body instanceof Document) {\n      return [body.body.outerHTML];\n    }\n    if (responseType === 'json' && body && typeof body === 'object') {\n      return [JSON.stringify(body)];\n    }\n    if (!body) {\n      return [undefined];\n    }\n  } catch (e2) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to serialize body', body);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n  DEBUG_BUILD && logger.info('[Replay] Skipping network body because of body type', body);\n  return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n}\nfunction _getBodySize(body, responseType, textEncoder) {\n  try {\n    const bodyStr = responseType === 'json' && body && typeof body === 'object' ? JSON.stringify(body) : body;\n    return getBodySize(bodyStr, textEncoder);\n  } catch (e3) {\n    return undefined;\n  }\n}\n\n/**\n * This method does two things:\n * - It enriches the regular XHR/fetch breadcrumbs with request/response size data\n * - It captures the XHR/fetch breadcrumbs to the replay\n *   (enriching it with further data that is _not_ added to the regular breadcrumbs)\n */\nfunction handleNetworkBreadcrumbs(replay) {\n  const client = getClient();\n  try {\n    const textEncoder = new TextEncoder();\n    const {\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders,\n      networkResponseHeaders\n    } = replay.getOptions();\n    const options = {\n      replay,\n      textEncoder,\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders,\n      networkResponseHeaders\n    };\n    if (client && client.on) {\n      client.on('beforeAddBreadcrumb', (breadcrumb, hint) => beforeAddNetworkBreadcrumb(options, breadcrumb, hint));\n    } else {\n      // Fallback behavior\n      addFetchInstrumentationHandler(handleFetchSpanListener(replay));\n      addXhrInstrumentationHandler(handleXhrSpanListener(replay));\n    }\n  } catch (e2) {\n    // Do nothing\n  }\n}\n\n/** just exported for tests */\nfunction beforeAddNetworkBreadcrumb(options, breadcrumb, hint) {\n  if (!breadcrumb.data) {\n    return;\n  }\n  try {\n    if (_isXhrBreadcrumb(breadcrumb) && _isXhrHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      enrichXhrBreadcrumb(breadcrumb, hint, options);\n\n      // This call should not reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      captureXhrBreadcrumbToReplay(breadcrumb, hint, options);\n    }\n    if (_isFetchBreadcrumb(breadcrumb) && _isFetchHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      enrichFetchBreadcrumb(breadcrumb, hint, options);\n\n      // This call should not reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      captureFetchBreadcrumbToReplay(breadcrumb, hint, options);\n    }\n  } catch (e) {\n    DEBUG_BUILD && logger.warn('Error when enriching network breadcrumb');\n  }\n}\nfunction _isXhrBreadcrumb(breadcrumb) {\n  return breadcrumb.category === 'xhr';\n}\nfunction _isFetchBreadcrumb(breadcrumb) {\n  return breadcrumb.category === 'fetch';\n}\nfunction _isXhrHint(hint) {\n  return hint && hint.xhr;\n}\nfunction _isFetchHint(hint) {\n  return hint && hint.response;\n}\nlet _LAST_BREADCRUMB = null;\nfunction isBreadcrumbWithCategory(breadcrumb) {\n  return !!breadcrumb.category;\n}\nconst handleScopeListener = replay => scope => {\n  if (!replay.isEnabled()) {\n    return;\n  }\n  const result = handleScope(scope);\n  if (!result) {\n    return;\n  }\n  addBreadcrumbEvent(replay, result);\n};\n\n/**\n * An event handler to handle scope changes.\n */\nfunction handleScope(scope) {\n  // TODO (v8): Remove this guard. This was put in place because we introduced\n  // Scope.getLastBreadcrumb mid-v7 which caused incompatibilities with older SDKs.\n  // For now, we'll just return null if the method doesn't exist but we should eventually\n  // get rid of this guard.\n  const newBreadcrumb = scope.getLastBreadcrumb && scope.getLastBreadcrumb();\n\n  // Listener can be called when breadcrumbs have not changed, so we store the\n  // reference to the last crumb and only return a crumb if it has changed\n  if (_LAST_BREADCRUMB === newBreadcrumb || !newBreadcrumb) {\n    return null;\n  }\n  _LAST_BREADCRUMB = newBreadcrumb;\n  if (!isBreadcrumbWithCategory(newBreadcrumb) || ['fetch', 'xhr', 'sentry.event', 'sentry.transaction'].includes(newBreadcrumb.category) || newBreadcrumb.category.startsWith('ui.')) {\n    return null;\n  }\n  if (newBreadcrumb.category === 'console') {\n    return normalizeConsoleBreadcrumb(newBreadcrumb);\n  }\n  return createBreadcrumb(newBreadcrumb);\n}\n\n/** exported for tests only */\nfunction normalizeConsoleBreadcrumb(breadcrumb) {\n  const args = breadcrumb.data && breadcrumb.data.arguments;\n  if (!Array.isArray(args) || args.length === 0) {\n    return createBreadcrumb(breadcrumb);\n  }\n  let isTruncated = false;\n\n  // Avoid giant args captures\n  const normalizedArgs = args.map(arg => {\n    if (!arg) {\n      return arg;\n    }\n    if (typeof arg === 'string') {\n      if (arg.length > CONSOLE_ARG_MAX_SIZE) {\n        isTruncated = true;\n        return `${arg.slice(0, CONSOLE_ARG_MAX_SIZE)}…`;\n      }\n      return arg;\n    }\n    if (typeof arg === 'object') {\n      try {\n        const normalizedArg = normalize(arg, 7);\n        const stringified = JSON.stringify(normalizedArg);\n        if (stringified.length > CONSOLE_ARG_MAX_SIZE) {\n          isTruncated = true;\n          // We use the pretty printed JSON string here as a base\n          return `${JSON.stringify(normalizedArg, null, 2).slice(0, CONSOLE_ARG_MAX_SIZE)}…`;\n        }\n        return normalizedArg;\n      } catch (e) {\n        // fall back to default\n      }\n    }\n    return arg;\n  });\n  return createBreadcrumb({\n    ...breadcrumb,\n    data: {\n      ...breadcrumb.data,\n      arguments: normalizedArgs,\n      ...(isTruncated ? {\n        _meta: {\n          warnings: ['CONSOLE_ARG_TRUNCATED']\n        }\n      } : {})\n    }\n  });\n}\n\n/**\n * Add global listeners that cannot be removed.\n */\nfunction addGlobalListeners(replay) {\n  // Listeners from core SDK //\n  const scope = getCurrentScope();\n  const client = getClient();\n  scope.addScopeListener(handleScopeListener(replay));\n  addClickKeypressInstrumentationHandler(handleDomListener(replay));\n  addHistoryInstrumentationHandler(handleHistorySpanListener(replay));\n  handleNetworkBreadcrumbs(replay);\n\n  // Tag all (non replay) events that get sent to Sentry with the current\n  // replay ID so that we can reference them later in the UI\n  const eventProcessor = handleGlobalEventListener(replay, !hasHooks(client));\n  if (client && client.addEventProcessor) {\n    client.addEventProcessor(eventProcessor);\n  } else {\n    addEventProcessor(eventProcessor);\n  }\n\n  // If a custom client has no hooks yet, we continue to use the \"old\" implementation\n  if (hasHooks(client)) {\n    client.on('beforeSendEvent', handleBeforeSendEvent(replay));\n    client.on('afterSendEvent', handleAfterSendEvent(replay));\n    client.on('createDsc', dsc => {\n      const replayId = replay.getSessionId();\n      // We do not want to set the DSC when in buffer mode, as that means the replay has not been sent (yet)\n      if (replayId && replay.isEnabled() && replay.recordingMode === 'session') {\n        // Ensure to check that the session is still active - it could have expired in the meanwhile\n        const isSessionActive = replay.checkAndHandleExpiredSession();\n        if (isSessionActive) {\n          dsc.replay_id = replayId;\n        }\n      }\n    });\n    client.on('startTransaction', transaction => {\n      replay.lastTransaction = transaction;\n    });\n\n    // We may be missing the initial startTransaction due to timing issues,\n    // so we capture it on finish again.\n    client.on('finishTransaction', transaction => {\n      replay.lastTransaction = transaction;\n    });\n\n    // We want to flush replay\n    client.on('beforeSendFeedback', (feedbackEvent, options) => {\n      const replayId = replay.getSessionId();\n      if (options && options.includeReplay && replay.isEnabled() && replayId) {\n        // This should never reject\n        if (feedbackEvent.contexts && feedbackEvent.contexts.feedback) {\n          feedbackEvent.contexts.feedback.replay_id = replayId;\n        }\n      }\n    });\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction hasHooks(client) {\n  return !!(client && client.on);\n}\n\n/**\n * Create a \"span\" for the total amount of memory being used by JS objects\n * (including v8 internal objects).\n */\nasync function addMemoryEntry(replay) {\n  // window.performance.memory is a non-standard API and doesn't work on all browsers, so we try-catch this\n  try {\n    return Promise.all(createPerformanceSpans(replay, [\n    // @ts-expect-error memory doesn't exist on type Performance as the API is non-standard (we check that it exists above)\n    createMemoryEntry(WINDOW.performance.memory)]));\n  } catch (error) {\n    // Do nothing\n    return [];\n  }\n}\nfunction createMemoryEntry(memoryEntry) {\n  const {\n    jsHeapSizeLimit,\n    totalJSHeapSize,\n    usedJSHeapSize\n  } = memoryEntry;\n  // we don't want to use `getAbsoluteTime` because it adds the event time to the\n  // time origin, so we get the current timestamp instead\n  const time = Date.now() / 1000;\n  return {\n    type: 'memory',\n    name: 'memory',\n    start: time,\n    end: time,\n    data: {\n      memory: {\n        jsHeapSizeLimit,\n        totalJSHeapSize,\n        usedJSHeapSize\n      }\n    }\n  };\n}\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nfunction debounce(func, wait, options) {\n  let callbackReturnValue;\n  let timerId;\n  let maxTimerId;\n  const maxWait = options && options.maxWait ? Math.max(options.maxWait, wait) : 0;\n  function invokeFunc() {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n  function cancelTimers() {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n  function flush() {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n  function debounced() {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(invokeFunc, wait);\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeout(invokeFunc, maxWait);\n    }\n    return callbackReturnValue;\n  }\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Handler for recording events.\n *\n * Adds to event buffer, and has varying flushing behaviors if the event was a checkout.\n */\nfunction getHandleRecordingEmit(replay) {\n  let hadFirstEvent = false;\n  return (event, _isCheckout) => {\n    // If this is false, it means session is expired, create and a new session and wait for checkout\n    if (!replay.checkAndHandleExpiredSession()) {\n      DEBUG_BUILD && logger.warn('[Replay] Received replay event after session expired.');\n      return;\n    }\n\n    // `_isCheckout` is only set when the checkout is due to `checkoutEveryNms`\n    // We also want to treat the first event as a checkout, so we handle this specifically here\n    const isCheckout = _isCheckout || !hadFirstEvent;\n    hadFirstEvent = true;\n    if (replay.clickDetector) {\n      updateClickDetectorForRecordingEvent(replay.clickDetector, event);\n    }\n\n    // The handler returns `true` if we do not want to trigger debounced flush, `false` if we want to debounce flush.\n    replay.addUpdate(() => {\n      // The session is always started immediately on pageload/init, but for\n      // error-only replays, it should reflect the most recent checkout\n      // when an error occurs. Clear any state that happens before this current\n      // checkout. This needs to happen before `addEvent()` which updates state\n      // dependent on this reset.\n      if (replay.recordingMode === 'buffer' && isCheckout) {\n        replay.setInitialState();\n      }\n\n      // If the event is not added (e.g. due to being paused, disabled, or out of the max replay duration),\n      // Skip all further steps\n      if (!addEventSync(replay, event, isCheckout)) {\n        // Return true to skip scheduling a debounced flush\n        return true;\n      }\n\n      // Different behavior for full snapshots (type=2), ignore other event types\n      // See https://github.com/rrweb-io/rrweb/blob/d8f9290ca496712aa1e7d472549480c4e7876594/packages/rrweb/src/types.ts#L16\n      if (!isCheckout) {\n        return false;\n      }\n\n      // Additionally, create a meta event that will capture certain SDK settings.\n      // In order to handle buffer mode, this needs to either be done when we\n      // receive checkout events or at flush time.\n      //\n      // `isCheckout` is always true, but want to be explicit that it should\n      // only be added for checkouts\n      addSettingsEvent(replay, isCheckout);\n\n      // If there is a previousSessionId after a full snapshot occurs, then\n      // the replay session was started due to session expiration. The new session\n      // is started before triggering a new checkout and contains the id\n      // of the previous session. Do not immediately flush in this case\n      // to avoid capturing only the checkout and instead the replay will\n      // be captured if they perform any follow-up actions.\n      if (replay.session && replay.session.previousSessionId) {\n        return true;\n      }\n\n      // When in buffer mode, make sure we adjust the session started date to the current earliest event of the buffer\n      // this should usually be the timestamp of the checkout event, but to be safe...\n      if (replay.recordingMode === 'buffer' && replay.session && replay.eventBuffer) {\n        const earliestEvent = replay.eventBuffer.getEarliestTimestamp();\n        if (earliestEvent) {\n          logInfo(`[Replay] Updating session start time to earliest event in buffer to ${new Date(earliestEvent)}`, replay.getOptions()._experiments.traceInternals);\n          replay.session.started = earliestEvent;\n          if (replay.getOptions().stickySession) {\n            saveSession(replay.session);\n          }\n        }\n      }\n      if (replay.recordingMode === 'session') {\n        // If the full snapshot is due to an initial load, we will not have\n        // a previous session ID. In this case, we want to buffer events\n        // for a set amount of time before flushing. This can help avoid\n        // capturing replays of users that immediately close the window.\n\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        void replay.flush();\n      }\n      return true;\n    });\n  };\n}\n\n/**\n * Exported for tests\n */\nfunction createOptionsEvent(replay) {\n  const options = replay.getOptions();\n  return {\n    type: EventType.Custom,\n    timestamp: Date.now(),\n    data: {\n      tag: 'options',\n      payload: {\n        shouldRecordCanvas: replay.isRecordingCanvas(),\n        sessionSampleRate: options.sessionSampleRate,\n        errorSampleRate: options.errorSampleRate,\n        useCompressionOption: options.useCompression,\n        blockAllMedia: options.blockAllMedia,\n        maskAllText: options.maskAllText,\n        maskAllInputs: options.maskAllInputs,\n        useCompression: replay.eventBuffer ? replay.eventBuffer.type === 'worker' : false,\n        networkDetailHasUrls: options.networkDetailAllowUrls.length > 0,\n        networkCaptureBodies: options.networkCaptureBodies,\n        networkRequestHasHeaders: options.networkRequestHeaders.length > 0,\n        networkResponseHasHeaders: options.networkResponseHeaders.length > 0\n      }\n    }\n  };\n}\n\n/**\n * Add a \"meta\" event that contains a simplified view on current configuration\n * options. This should only be included on the first segment of a recording.\n */\nfunction addSettingsEvent(replay, isCheckout) {\n  // Only need to add this event when sending the first segment\n  if (!isCheckout || !replay.session || replay.session.segmentId !== 0) {\n    return;\n  }\n  addEventSync(replay, createOptionsEvent(replay), false);\n}\n\n/**\n * Create a replay envelope ready to be sent.\n * This includes both the replay event, as well as the recording data.\n */\nfunction createReplayEnvelope(replayEvent, recordingData, dsn, tunnel) {\n  return createEnvelope(createEventEnvelopeHeaders(replayEvent, getSdkMetadataForEnvelopeHeader(replayEvent), tunnel, dsn), [[{\n    type: 'replay_event'\n  }, replayEvent], [{\n    type: 'replay_recording',\n    // If string then we need to encode to UTF8, otherwise will have\n    // wrong size. TextEncoder has similar browser support to\n    // MutationObserver, although it does not accept IE11.\n    length: typeof recordingData === 'string' ? new TextEncoder().encode(recordingData).length : recordingData.length\n  }, recordingData]]);\n}\n\n/**\n * Prepare the recording data ready to be sent.\n */\nfunction prepareRecordingData(_ref30) {\n  let {\n    recordingData,\n    headers\n  } = _ref30;\n  let payloadWithSequence;\n\n  // XXX: newline is needed to separate sequence id from events\n  const replayHeaders = `${JSON.stringify(headers)}\n`;\n  if (typeof recordingData === 'string') {\n    payloadWithSequence = `${replayHeaders}${recordingData}`;\n  } else {\n    const enc = new TextEncoder();\n    // XXX: newline is needed to separate sequence id from events\n    const sequence = enc.encode(replayHeaders);\n    // Merge the two Uint8Arrays\n    payloadWithSequence = new Uint8Array(sequence.length + recordingData.length);\n    payloadWithSequence.set(sequence);\n    payloadWithSequence.set(recordingData, sequence.length);\n  }\n  return payloadWithSequence;\n}\n\n/**\n * Prepare a replay event & enrich it with the SDK metadata.\n */\nasync function prepareReplayEvent(_ref31) {\n  let {\n    client,\n    scope,\n    replayId: event_id,\n    event\n  } = _ref31;\n  const integrations = typeof client._integrations === 'object' && client._integrations !== null && !Array.isArray(client._integrations) ? Object.keys(client._integrations) : undefined;\n  const eventHint = {\n    event_id,\n    integrations\n  };\n  if (client.emit) {\n    client.emit('preprocessEvent', event, eventHint);\n  }\n  const preparedEvent = await prepareEvent(client.getOptions(), event, eventHint, scope, client, getIsolationScope());\n\n  // If e.g. a global event processor returned null\n  if (!preparedEvent) {\n    return null;\n  }\n\n  // This normally happens in browser client \"_prepareEvent\"\n  // but since we do not use this private method from the client, but rather the plain import\n  // we need to do this manually.\n  preparedEvent.platform = preparedEvent.platform || 'javascript';\n\n  // extract the SDK name because `client._prepareEvent` doesn't add it to the event\n  const metadata = client.getSdkMetadata && client.getSdkMetadata();\n  const {\n    name,\n    version\n  } = metadata && metadata.sdk || {};\n  preparedEvent.sdk = {\n    ...preparedEvent.sdk,\n    name: name || 'sentry.javascript.unknown',\n    version: version || '0.0.0'\n  };\n  return preparedEvent;\n}\n\n/**\n * Send replay attachment using `fetch()`\n */\nasync function sendReplayRequest(_ref32) {\n  let {\n    recordingData,\n    replayId,\n    segmentId: segment_id,\n    eventContext,\n    timestamp,\n    session\n  } = _ref32;\n  const preparedRecordingData = prepareRecordingData({\n    recordingData,\n    headers: {\n      segment_id\n    }\n  });\n  const {\n    urls,\n    errorIds,\n    traceIds,\n    initialTimestamp\n  } = eventContext;\n  const client = getClient();\n  const scope = getCurrentScope();\n  const transport = client && client.getTransport();\n  const dsn = client && client.getDsn();\n  if (!client || !transport || !dsn || !session.sampled) {\n    return;\n  }\n  const baseEvent = {\n    type: REPLAY_EVENT_NAME,\n    replay_start_timestamp: initialTimestamp / 1000,\n    timestamp: timestamp / 1000,\n    error_ids: errorIds,\n    trace_ids: traceIds,\n    urls,\n    replay_id: replayId,\n    segment_id,\n    replay_type: session.sampled\n  };\n  const replayEvent = await prepareReplayEvent({\n    scope,\n    client,\n    replayId,\n    event: baseEvent\n  });\n  if (!replayEvent) {\n    // Taken from baseclient's `_processEvent` method, where this is handled for errors/transactions\n    client.recordDroppedEvent('event_processor', 'replay', baseEvent);\n    logInfo('An event processor returned `null`, will not send event.');\n    return;\n  }\n\n  /*\n  For reference, the fully built event looks something like this:\n  {\n      \"type\": \"replay_event\",\n      \"timestamp\": 1670837008.634,\n      \"error_ids\": [\n          \"errorId\"\n      ],\n      \"trace_ids\": [\n          \"traceId\"\n      ],\n      \"urls\": [\n          \"https://example.com\"\n      ],\n      \"replay_id\": \"eventId\",\n      \"segment_id\": 3,\n      \"replay_type\": \"error\",\n      \"platform\": \"javascript\",\n      \"event_id\": \"eventId\",\n      \"environment\": \"production\",\n      \"sdk\": {\n          \"integrations\": [\n              \"BrowserTracing\",\n              \"Replay\"\n          ],\n          \"name\": \"sentry.javascript.browser\",\n          \"version\": \"7.25.0\"\n      },\n      \"sdkProcessingMetadata\": {},\n      \"contexts\": {\n      },\n  }\n  */\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete replayEvent.sdkProcessingMetadata;\n  const envelope = createReplayEnvelope(replayEvent, preparedRecordingData, dsn, client.getOptions().tunnel);\n  let response;\n  try {\n    response = await transport.send(envelope);\n  } catch (err) {\n    const error = new Error(UNABLE_TO_SEND_REPLAY);\n    try {\n      // In case browsers don't allow this property to be writable\n      // @ts-expect-error This needs lib es2022 and newer\n      error.cause = err;\n    } catch (e) {\n      // nothing to do\n    }\n    throw error;\n  }\n\n  // TODO (v8): we can remove this guard once transport.send's type signature doesn't include void anymore\n  if (!response) {\n    return response;\n  }\n\n  // If the status code is invalid, we want to immediately stop & not retry\n  if (typeof response.statusCode === 'number' && (response.statusCode < 200 || response.statusCode >= 300)) {\n    throw new TransportStatusCodeError(response.statusCode);\n  }\n  const rateLimits = updateRateLimits({}, response);\n  if (isRateLimited(rateLimits, 'replay')) {\n    throw new RateLimitError(rateLimits);\n  }\n  return response;\n}\n\n/**\n * This error indicates that the transport returned an invalid status code.\n */\nclass TransportStatusCodeError extends Error {\n  constructor(statusCode) {\n    super(`Transport returned status code ${statusCode}`);\n  }\n}\n\n/**\n * This error indicates that we hit a rate limit API error.\n */\nclass RateLimitError extends Error {\n  constructor(rateLimits) {\n    super('Rate limit hit');\n    this.rateLimits = rateLimits;\n  }\n}\n\n/**\n * Finalize and send the current replay event to Sentry\n */\nasync function sendReplay(replayData) {\n  let retryConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    count: 0,\n    interval: RETRY_BASE_INTERVAL\n  };\n  const {\n    recordingData,\n    options\n  } = replayData;\n\n  // short circuit if there's no events to upload (this shouldn't happen as _runFlush makes this check)\n  if (!recordingData.length) {\n    return;\n  }\n  try {\n    await sendReplayRequest(replayData);\n    return true;\n  } catch (err) {\n    if (err instanceof TransportStatusCodeError || err instanceof RateLimitError) {\n      throw err;\n    }\n\n    // Capture error for every failed replay\n    setContext('Replays', {\n      _retryCount: retryConfig.count\n    });\n    if (DEBUG_BUILD && options._experiments && options._experiments.captureExceptions) {\n      captureException(err);\n    }\n\n    // If an error happened here, it's likely that uploading the attachment\n    // failed, we'll can retry with the same events payload\n    if (retryConfig.count >= RETRY_MAX_COUNT) {\n      const error = new Error(`${UNABLE_TO_SEND_REPLAY} - max retries exceeded`);\n      try {\n        // In case browsers don't allow this property to be writable\n        // @ts-expect-error This needs lib es2022 and newer\n        error.cause = err;\n      } catch (e) {\n        // nothing to do\n      }\n      throw error;\n    }\n\n    // will retry in intervals of 5, 10, 30\n    retryConfig.interval *= ++retryConfig.count;\n    return new Promise((resolve, reject) => {\n      setTimeout(async () => {\n        try {\n          await sendReplay(replayData, retryConfig);\n          resolve(true);\n        } catch (err) {\n          reject(err);\n        }\n      }, retryConfig.interval);\n    });\n  }\n}\nconst THROTTLED = '__THROTTLED';\nconst SKIPPED = '__SKIPPED';\n\n/**\n * Create a throttled function off a given function.\n * When calling the throttled function, it will call the original function only\n * if it hasn't been called more than `maxCount` times in the last `durationSeconds`.\n *\n * Returns `THROTTLED` if throttled for the first time, after that `SKIPPED`,\n * or else the return value of the original function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction throttle(fn, maxCount, durationSeconds) {\n  const counter = new Map();\n  const _cleanup = now => {\n    const threshold = now - durationSeconds;\n    counter.forEach((_value, key) => {\n      if (key < threshold) {\n        counter.delete(key);\n      }\n    });\n  };\n  const _getTotalCount = () => {\n    return [...counter.values()].reduce((a, b) => a + b, 0);\n  };\n  let isThrottled = false;\n  return function () {\n    // Date in second-precision, which we use as basis for the throttling\n    const now = Math.floor(Date.now() / 1000);\n\n    // First, make sure to delete any old entries\n    _cleanup(now);\n\n    // If already over limit, do nothing\n    if (_getTotalCount() >= maxCount) {\n      const wasThrottled = isThrottled;\n      isThrottled = true;\n      return wasThrottled ? SKIPPED : THROTTLED;\n    }\n    isThrottled = false;\n    const count = counter.get(now) || 0;\n    counter.set(now, count + 1);\n    return fn(...arguments);\n  };\n}\n\n/* eslint-disable max-lines */ // TODO: We might want to split this file up\n\n/**\n * The main replay container class, which holds all the state and methods for recording and sending replays.\n */\nclass ReplayContainer {\n  /**\n   * Recording can happen in one of three modes:\n   *   - session: Record the whole session, sending it continuously\n   *   - buffer: Always keep the last 60s of recording, requires:\n   *     - having replaysOnErrorSampleRate > 0 to capture replay when an error occurs\n   *     - or calling `flush()` to send the replay\n   */\n\n  /**\n   * The current or last active transcation.\n   * This is only available when performance is enabled.\n   */\n\n  /**\n   * These are here so we can overwrite them in tests etc.\n   * @hidden\n   */\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n\n  /**\n   * Timestamp of the last user activity. This lives across sessions.\n   */\n\n  /**\n   * Is the integration currently active?\n   */\n\n  /**\n   * Paused is a state where:\n   * - DOM Recording is not listening at all\n   * - Nothing will be added to event buffer (e.g. core SDK events)\n   */\n\n  /**\n   * Have we attached listeners to the core SDK?\n   * Note we have to track this as there is no way to remove instrumentation handlers.\n   */\n\n  /**\n   * Function to stop recording\n   */\n\n  /**\n   * Internal use for canvas recording options\n   */\n\n  constructor(_ref33) {\n    let {\n      options,\n      recordingOptions\n    } = _ref33;\n    ReplayContainer.prototype.__init.call(this);\n    ReplayContainer.prototype.__init2.call(this);\n    ReplayContainer.prototype.__init3.call(this);\n    ReplayContainer.prototype.__init4.call(this);\n    ReplayContainer.prototype.__init5.call(this);\n    ReplayContainer.prototype.__init6.call(this);\n    this.eventBuffer = null;\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n    this.recordingMode = 'session';\n    this.timeouts = {\n      sessionIdlePause: SESSION_IDLE_PAUSE_DURATION,\n      sessionIdleExpire: SESSION_IDLE_EXPIRE_DURATION\n    };\n    this._lastActivity = Date.now();\n    this._isEnabled = false;\n    this._isPaused = false;\n    this._hasInitializedCoreListeners = false;\n    this._context = {\n      errorIds: new Set(),\n      traceIds: new Set(),\n      urls: [],\n      initialTimestamp: Date.now(),\n      initialUrl: ''\n    };\n    this._recordingOptions = recordingOptions;\n    this._options = options;\n    this._debouncedFlush = debounce(() => this._flush(), this._options.flushMinDelay, {\n      maxWait: this._options.flushMaxDelay\n    });\n    this._throttledAddEvent = throttle((event, isCheckout) => addEvent(this, event, isCheckout),\n    // Max 300 events...\n    300,\n    // ... per 5s\n    5);\n    const {\n      slowClickTimeout,\n      slowClickIgnoreSelectors\n    } = this.getOptions();\n    const slowClickConfig = slowClickTimeout ? {\n      threshold: Math.min(SLOW_CLICK_THRESHOLD, slowClickTimeout),\n      timeout: slowClickTimeout,\n      scrollTimeout: SLOW_CLICK_SCROLL_TIMEOUT,\n      ignoreSelector: slowClickIgnoreSelectors ? slowClickIgnoreSelectors.join(',') : ''\n    } : undefined;\n    if (slowClickConfig) {\n      this.clickDetector = new ClickDetector(this, slowClickConfig);\n    }\n  }\n\n  /** Get the event context. */\n  getContext() {\n    return this._context;\n  }\n\n  /** If recording is currently enabled. */\n  isEnabled() {\n    return this._isEnabled;\n  }\n\n  /** If recording is currently paused. */\n  isPaused() {\n    return this._isPaused;\n  }\n\n  /**\n   * Determine if canvas recording is enabled\n   */\n  isRecordingCanvas() {\n    return Boolean(this._canvas);\n  }\n\n  /** Get the replay integration options. */\n  getOptions() {\n    return this._options;\n  }\n\n  /**\n   * Initializes the plugin based on sampling configuration. Should not be\n   * called outside of constructor.\n   */\n  initializeSampling(previousSessionId) {\n    const {\n      errorSampleRate,\n      sessionSampleRate\n    } = this._options;\n\n    // If neither sample rate is > 0, then do nothing - user will need to call one of\n    // `start()` or `startBuffering` themselves.\n    if (errorSampleRate <= 0 && sessionSampleRate <= 0) {\n      return;\n    }\n\n    // Otherwise if there is _any_ sample rate set, try to load an existing\n    // session, or create a new one.\n    this._initializeSessionForSampling(previousSessionId);\n    if (!this.session) {\n      // This should not happen, something wrong has occurred\n      this._handleException(new Error('Unable to initialize and create session'));\n      return;\n    }\n    if (this.session.sampled === false) {\n      // This should only occur if `errorSampleRate` is 0 and was unsampled for\n      // session-based replay. In this case there is nothing to do.\n      return;\n    }\n\n    // If segmentId > 0, it means we've previously already captured this session\n    // In this case, we still want to continue in `session` recording mode\n    this.recordingMode = this.session.sampled === 'buffer' && this.session.segmentId === 0 ? 'buffer' : 'session';\n    logInfoNextTick(`[Replay] Starting replay in ${this.recordingMode} mode`, this._options._experiments.traceInternals);\n    this._initializeRecording();\n  }\n\n  /**\n   * Start a replay regardless of sampling rate. Calling this will always\n   * create a new session. Will throw an error if replay is already in progress.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * _performanceObserver, Recording, Sentry SDK, etc)\n   */\n  start() {\n    if (this._isEnabled && this.recordingMode === 'session') {\n      throw new Error('Replay recording is already in progress');\n    }\n    if (this._isEnabled && this.recordingMode === 'buffer') {\n      throw new Error('Replay buffering is in progress, call `flush()` to save the replay');\n    }\n    logInfoNextTick('[Replay] Starting replay in session mode', this._options._experiments.traceInternals);\n\n    // Required as user activity is initially set in\n    // constructor, so if `start()` is called after\n    // session idle expiration, a replay will not be\n    // created due to an idle timeout.\n    this._updateUserActivity();\n    const session = loadOrCreateSession({\n      maxReplayDuration: this._options.maxReplayDuration,\n      sessionIdleExpire: this.timeouts.sessionIdleExpire,\n      traceInternals: this._options._experiments.traceInternals\n    }, {\n      stickySession: this._options.stickySession,\n      // This is intentional: create a new session-based replay when calling `start()`\n      sessionSampleRate: 1,\n      allowBuffering: false\n    });\n    this.session = session;\n    this._initializeRecording();\n  }\n\n  /**\n   * Start replay buffering. Buffers until `flush()` is called or, if\n   * `replaysOnErrorSampleRate` > 0, an error occurs.\n   */\n  startBuffering() {\n    if (this._isEnabled) {\n      throw new Error('Replay recording is already in progress');\n    }\n    logInfoNextTick('[Replay] Starting replay in buffer mode', this._options._experiments.traceInternals);\n    const session = loadOrCreateSession({\n      sessionIdleExpire: this.timeouts.sessionIdleExpire,\n      maxReplayDuration: this._options.maxReplayDuration,\n      traceInternals: this._options._experiments.traceInternals\n    }, {\n      stickySession: this._options.stickySession,\n      sessionSampleRate: 0,\n      allowBuffering: true\n    });\n    this.session = session;\n    this.recordingMode = 'buffer';\n    this._initializeRecording();\n  }\n\n  /**\n   * Start recording.\n   *\n   * Note that this will cause a new DOM checkout\n   */\n  startRecording() {\n    try {\n      const canvasOptions = this._canvas;\n      this._stopRecording = record({\n        ...this._recordingOptions,\n        // When running in error sampling mode, we need to overwrite `checkoutEveryNms`\n        // Without this, it would record forever, until an error happens, which we don't want\n        // instead, we'll always keep the last 60 seconds of replay before an error happened\n        ...(this.recordingMode === 'buffer' && {\n          checkoutEveryNms: BUFFER_CHECKOUT_TIME\n        }),\n        emit: getHandleRecordingEmit(this),\n        onMutation: this._onMutationHandler,\n        ...(canvasOptions ? {\n          recordCanvas: canvasOptions.recordCanvas,\n          getCanvasManager: canvasOptions.getCanvasManager,\n          sampling: canvasOptions.sampling,\n          dataURLOptions: canvasOptions.dataURLOptions\n        } : {})\n      });\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Stops the recording, if it was running.\n   *\n   * Returns true if it was previously stopped, or is now stopped,\n   * otherwise false.\n   */\n  stopRecording() {\n    try {\n      if (this._stopRecording) {\n        this._stopRecording();\n        this._stopRecording = undefined;\n      }\n      return true;\n    } catch (err) {\n      this._handleException(err);\n      return false;\n    }\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n  async stop() {\n    let {\n      forceFlush = false,\n      reason\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this._isEnabled) {\n      return;\n    }\n\n    // We can't move `_isEnabled` after awaiting a flush, otherwise we can\n    // enter into an infinite loop when `stop()` is called while flushing.\n    this._isEnabled = false;\n    try {\n      logInfo(`[Replay] Stopping Replay${reason ? ` triggered by ${reason}` : ''}`, this._options._experiments.traceInternals);\n      this._removeListeners();\n      this.stopRecording();\n      this._debouncedFlush.cancel();\n      // See comment above re: `_isEnabled`, we \"force\" a flush, ignoring the\n      // `_isEnabled` state of the plugin since it was disabled above.\n      if (forceFlush) {\n        await this._flush({\n          force: true\n        });\n      }\n\n      // After flush, destroy event buffer\n      this.eventBuffer && this.eventBuffer.destroy();\n      this.eventBuffer = null;\n\n      // Clear session from session storage, note this means if a new session\n      // is started after, it will not have `previousSessionId`\n      clearSession(this);\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Pause some replay functionality. See comments for `_isPaused`.\n   * This differs from stop as this only stops DOM recording, it is\n   * not as thorough of a shutdown as `stop()`.\n   */\n  pause() {\n    if (this._isPaused) {\n      return;\n    }\n    this._isPaused = true;\n    this.stopRecording();\n    logInfo('[Replay] Pausing replay', this._options._experiments.traceInternals);\n  }\n\n  /**\n   * Resumes recording, see notes for `pause().\n   *\n   * Note that calling `startRecording()` here will cause a\n   * new DOM checkout.`\n   */\n  resume() {\n    if (!this._isPaused || !this._checkSession()) {\n      return;\n    }\n    this._isPaused = false;\n    this.startRecording();\n    logInfo('[Replay] Resuming replay', this._options._experiments.traceInternals);\n  }\n\n  /**\n   * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n   * Unless `continueRecording` is false, the replay will continue to record and\n   * behave as a \"session\"-based replay.\n   *\n   * Otherwise, queue up a flush.\n   */\n  async sendBufferedReplayOrFlush() {\n    let {\n      continueRecording = true\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.recordingMode === 'session') {\n      return this.flushImmediate();\n    }\n    const activityTime = Date.now();\n    logInfo('[Replay] Converting buffer to session', this._options._experiments.traceInternals);\n\n    // Allow flush to complete before resuming as a session recording, otherwise\n    // the checkout from `startRecording` may be included in the payload.\n    // Prefer to keep the error replay as a separate (and smaller) segment\n    // than the session replay.\n    await this.flushImmediate();\n    const hasStoppedRecording = this.stopRecording();\n    if (!continueRecording || !hasStoppedRecording) {\n      return;\n    }\n\n    // To avoid race conditions where this is called multiple times, we check here again that we are still buffering\n    if (this.recordingMode === 'session') {\n      return;\n    }\n\n    // Re-start recording in session-mode\n    this.recordingMode = 'session';\n\n    // Once this session ends, we do not want to refresh it\n    if (this.session) {\n      this._updateUserActivity(activityTime);\n      this._updateSessionActivity(activityTime);\n      this._maybeSaveSession();\n    }\n    this.startRecording();\n  }\n\n  /**\n   * We want to batch uploads of replay events. Save events only if\n   * `<flushMinDelay>` milliseconds have elapsed since the last event\n   * *OR* if `<flushMaxDelay>` milliseconds have elapsed.\n   *\n   * Accepts a callback to perform side-effects and returns true to stop batch\n   * processing and hand back control to caller.\n   */\n  addUpdate(cb) {\n    // We need to always run `cb` (e.g. in the case of `this.recordingMode == 'buffer'`)\n    const cbResult = cb();\n\n    // If this option is turned on then we will only want to call `flush`\n    // explicitly\n    if (this.recordingMode === 'buffer') {\n      return;\n    }\n\n    // If callback is true, we do not want to continue with flushing -- the\n    // caller will need to handle it.\n    if (cbResult === true) {\n      return;\n    }\n\n    // addUpdate is called quite frequently - use _debouncedFlush so that it\n    // respects the flush delays and does not flush immediately\n    this._debouncedFlush();\n  }\n\n  /**\n   * Updates the user activity timestamp and resumes recording. This should be\n   * called in an event handler for a user action that we consider as the user\n   * being \"active\" (e.g. a mouse click).\n   */\n  triggerUserActivity() {\n    this._updateUserActivity();\n\n    // This case means that recording was once stopped due to inactivity.\n    // Ensure that recording is resumed.\n    if (!this._stopRecording) {\n      // Create a new session, otherwise when the user action is flushed, it\n      // will get rejected due to an expired session.\n      if (!this._checkSession()) {\n        return;\n      }\n\n      // Note: This will cause a new DOM checkout\n      this.resume();\n      return;\n    }\n\n    // Otherwise... recording was never suspended, continue as normalish\n    this.checkAndHandleExpiredSession();\n    this._updateSessionActivity();\n  }\n\n  /**\n   * Updates the user activity timestamp *without* resuming\n   * recording. Some user events (e.g. keydown) can be create\n   * low-value replays that only contain the keypress as a\n   * breadcrumb. Instead this would require other events to\n   * create a new replay after a session has expired.\n   */\n  updateUserActivity() {\n    this._updateUserActivity();\n    this._updateSessionActivity();\n  }\n\n  /**\n   * Only flush if `this.recordingMode === 'session'`\n   */\n  conditionalFlush() {\n    if (this.recordingMode === 'buffer') {\n      return Promise.resolve();\n    }\n    return this.flushImmediate();\n  }\n\n  /**\n   * Flush using debounce flush\n   */\n  flush() {\n    return this._debouncedFlush();\n  }\n\n  /**\n   * Always flush via `_debouncedFlush` so that we do not have flushes triggered\n   * from calling both `flush` and `_debouncedFlush`. Otherwise, there could be\n   * cases of mulitple flushes happening closely together.\n   */\n  flushImmediate() {\n    this._debouncedFlush();\n    // `.flush` is provided by the debounced function, analogously to lodash.debounce\n    return this._debouncedFlush.flush();\n  }\n\n  /**\n   * Cancels queued up flushes.\n   */\n  cancelFlush() {\n    this._debouncedFlush.cancel();\n  }\n\n  /** Get the current sesion (=replay) ID */\n  getSessionId() {\n    return this.session && this.session.id;\n  }\n\n  /**\n   * Checks if recording should be stopped due to user inactivity. Otherwise\n   * check if session is expired and create a new session if so. Triggers a new\n   * full snapshot on new session.\n   *\n   * Returns true if session is not expired, false otherwise.\n   * @hidden\n   */\n  checkAndHandleExpiredSession() {\n    // Prevent starting a new session if the last user activity is older than\n    // SESSION_IDLE_PAUSE_DURATION. Otherwise non-user activity can trigger a new\n    // session+recording. This creates noisy replays that do not have much\n    // content in them.\n    if (this._lastActivity && isExpired(this._lastActivity, this.timeouts.sessionIdlePause) && this.session && this.session.sampled === 'session') {\n      // Pause recording only for session-based replays. Otherwise, resuming\n      // will create a new replay and will conflict with users who only choose\n      // to record error-based replays only. (e.g. the resumed replay will not\n      // contain a reference to an error)\n      this.pause();\n      return;\n    }\n\n    // --- There is recent user activity --- //\n    // This will create a new session if expired, based on expiry length\n    if (!this._checkSession()) {\n      // Check session handles the refreshing itself\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Capture some initial state that can change throughout the lifespan of the\n   * replay. This is required because otherwise they would be captured at the\n   * first flush.\n   */\n  setInitialState() {\n    const urlPath = `${WINDOW.location.pathname}${WINDOW.location.hash}${WINDOW.location.search}`;\n    const url = `${WINDOW.location.origin}${urlPath}`;\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n\n    // Reset _context as well\n    this._clearContext();\n    this._context.initialUrl = url;\n    this._context.initialTimestamp = Date.now();\n    this._context.urls.push(url);\n  }\n\n  /**\n   * Add a breadcrumb event, that may be throttled.\n   * If it was throttled, we add a custom breadcrumb to indicate that.\n   */\n  throttledAddEvent(event, isCheckout) {\n    const res = this._throttledAddEvent(event, isCheckout);\n\n    // If this is THROTTLED, it means we have throttled the event for the first time\n    // In this case, we want to add a breadcrumb indicating that something was skipped\n    if (res === THROTTLED) {\n      const breadcrumb = createBreadcrumb({\n        category: 'replay.throttled'\n      });\n      this.addUpdate(() => {\n        // Return `false` if the event _was_ added, as that means we schedule a flush\n        return !addEventSync(this, {\n          type: ReplayEventTypeCustom,\n          timestamp: breadcrumb.timestamp || 0,\n          data: {\n            tag: 'breadcrumb',\n            payload: breadcrumb,\n            metric: true\n          }\n        });\n      });\n    }\n    return res;\n  }\n\n  /**\n   * This will get the parametrized route name of the current page.\n   * This is only available if performance is enabled, and if an instrumented router is used.\n   */\n  getCurrentRoute() {\n    // eslint-disable-next-line deprecation/deprecation\n    const lastTransaction = this.lastTransaction || getCurrentScope().getTransaction();\n    const attributes = lastTransaction && spanToJSON(lastTransaction).data || {};\n    const source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n    if (!lastTransaction || !source || !['route', 'custom'].includes(source)) {\n      return undefined;\n    }\n    return spanToJSON(lastTransaction).description;\n  }\n\n  /**\n   * Initialize and start all listeners to varying events (DOM,\n   * Performance Observer, Recording, Sentry SDK, etc)\n   */\n  _initializeRecording() {\n    this.setInitialState();\n\n    // this method is generally called on page load or manually - in both cases\n    // we should treat it as an activity\n    this._updateSessionActivity();\n    this.eventBuffer = createEventBuffer({\n      useCompression: this._options.useCompression,\n      workerUrl: this._options.workerUrl\n    });\n    this._removeListeners();\n    this._addListeners();\n\n    // Need to set as enabled before we start recording, as `record()` can trigger a flush with a new checkout\n    this._isEnabled = true;\n    this._isPaused = false;\n    this.startRecording();\n  }\n\n  /** A wrapper to conditionally capture exceptions. */\n  _handleException(error) {\n    DEBUG_BUILD && logger.error('[Replay]', error);\n    if (DEBUG_BUILD && this._options._experiments && this._options._experiments.captureExceptions) {\n      captureException(error);\n    }\n  }\n\n  /**\n   * Loads (or refreshes) the current session.\n   */\n  _initializeSessionForSampling(previousSessionId) {\n    // Whenever there is _any_ error sample rate, we always allow buffering\n    // Because we decide on sampling when an error occurs, we need to buffer at all times if sampling for errors\n    const allowBuffering = this._options.errorSampleRate > 0;\n    const session = loadOrCreateSession({\n      sessionIdleExpire: this.timeouts.sessionIdleExpire,\n      maxReplayDuration: this._options.maxReplayDuration,\n      traceInternals: this._options._experiments.traceInternals,\n      previousSessionId\n    }, {\n      stickySession: this._options.stickySession,\n      sessionSampleRate: this._options.sessionSampleRate,\n      allowBuffering\n    });\n    this.session = session;\n  }\n\n  /**\n   * Checks and potentially refreshes the current session.\n   * Returns false if session is not recorded.\n   */\n  _checkSession() {\n    // If there is no session yet, we do not want to refresh anything\n    // This should generally not happen, but to be safe....\n    if (!this.session) {\n      return false;\n    }\n    const currentSession = this.session;\n    if (shouldRefreshSession(currentSession, {\n      sessionIdleExpire: this.timeouts.sessionIdleExpire,\n      maxReplayDuration: this._options.maxReplayDuration\n    })) {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._refreshSession(currentSession);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Refresh a session with a new one.\n   * This stops the current session (without forcing a flush, as that would never work since we are expired),\n   * and then does a new sampling based on the refreshed session.\n   */\n  async _refreshSession(session) {\n    if (!this._isEnabled) {\n      return;\n    }\n    await this.stop({\n      reason: 'refresh session'\n    });\n    this.initializeSampling(session.id);\n  }\n\n  /**\n   * Adds listeners to record events for the replay\n   */\n  _addListeners() {\n    try {\n      WINDOW.document.addEventListener('visibilitychange', this._handleVisibilityChange);\n      WINDOW.addEventListener('blur', this._handleWindowBlur);\n      WINDOW.addEventListener('focus', this._handleWindowFocus);\n      WINDOW.addEventListener('keydown', this._handleKeyboardEvent);\n      if (this.clickDetector) {\n        this.clickDetector.addListeners();\n      }\n\n      // There is no way to remove these listeners, so ensure they are only added once\n      if (!this._hasInitializedCoreListeners) {\n        addGlobalListeners(this);\n        this._hasInitializedCoreListeners = true;\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n    this._performanceCleanupCallback = setupPerformanceObserver(this);\n  }\n\n  /**\n   * Cleans up listeners that were created in `_addListeners`\n   */\n  _removeListeners() {\n    try {\n      WINDOW.document.removeEventListener('visibilitychange', this._handleVisibilityChange);\n      WINDOW.removeEventListener('blur', this._handleWindowBlur);\n      WINDOW.removeEventListener('focus', this._handleWindowFocus);\n      WINDOW.removeEventListener('keydown', this._handleKeyboardEvent);\n      if (this.clickDetector) {\n        this.clickDetector.removeListeners();\n      }\n      if (this._performanceCleanupCallback) {\n        this._performanceCleanupCallback();\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Handle when visibility of the page content changes. Opening a new tab will\n   * cause the state to change to hidden because of content of current page will\n   * be hidden. Likewise, moving a different window to cover the contents of the\n   * page will also trigger a change to a hidden state.\n   */\n  __init() {\n    this._handleVisibilityChange = () => {\n      if (WINDOW.document.visibilityState === 'visible') {\n        this._doChangeToForegroundTasks();\n      } else {\n        this._doChangeToBackgroundTasks();\n      }\n    };\n  }\n\n  /**\n   * Handle when page is blurred\n   */\n  __init2() {\n    this._handleWindowBlur = () => {\n      const breadcrumb = createBreadcrumb({\n        category: 'ui.blur'\n      });\n\n      // Do not count blur as a user action -- it's part of the process of them\n      // leaving the page\n      this._doChangeToBackgroundTasks(breadcrumb);\n    };\n  }\n\n  /**\n   * Handle when page is focused\n   */\n  __init3() {\n    this._handleWindowFocus = () => {\n      const breadcrumb = createBreadcrumb({\n        category: 'ui.focus'\n      });\n\n      // Do not count focus as a user action -- instead wait until they focus and\n      // interactive with page\n      this._doChangeToForegroundTasks(breadcrumb);\n    };\n  }\n\n  /** Ensure page remains active when a key is pressed. */\n  __init4() {\n    this._handleKeyboardEvent = event => {\n      handleKeyboardEvent(this, event);\n    };\n  }\n\n  /**\n   * Tasks to run when we consider a page to be hidden (via blurring and/or visibility)\n   */\n  _doChangeToBackgroundTasks(breadcrumb) {\n    if (!this.session) {\n      return;\n    }\n    const expired = isSessionExpired(this.session, {\n      maxReplayDuration: this._options.maxReplayDuration,\n      sessionIdleExpire: this.timeouts.sessionIdleExpire\n    });\n    if (expired) {\n      return;\n    }\n    if (breadcrumb) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n\n    // Send replay when the page/tab becomes hidden. There is no reason to send\n    // replay if it becomes visible, since no actions we care about were done\n    // while it was hidden\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    void this.conditionalFlush();\n  }\n\n  /**\n   * Tasks to run when we consider a page to be visible (via focus and/or visibility)\n   */\n  _doChangeToForegroundTasks(breadcrumb) {\n    if (!this.session) {\n      return;\n    }\n    const isSessionActive = this.checkAndHandleExpiredSession();\n    if (!isSessionActive) {\n      // If the user has come back to the page within SESSION_IDLE_PAUSE_DURATION\n      // ms, we will re-use the existing session, otherwise create a new\n      // session\n      logInfo('[Replay] Document has become active, but session has expired');\n      return;\n    }\n    if (breadcrumb) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n  }\n\n  /**\n   * Update user activity (across session lifespans)\n   */\n  _updateUserActivity() {\n    let _lastActivity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    this._lastActivity = _lastActivity;\n  }\n\n  /**\n   * Updates the session's last activity timestamp\n   */\n  _updateSessionActivity() {\n    let _lastActivity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    if (this.session) {\n      this.session.lastActivity = _lastActivity;\n      this._maybeSaveSession();\n    }\n  }\n\n  /**\n   * Helper to create (and buffer) a replay breadcrumb from a core SDK breadcrumb\n   */\n  _createCustomBreadcrumb(breadcrumb) {\n    this.addUpdate(() => {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.throttledAddEvent({\n        type: EventType.Custom,\n        timestamp: breadcrumb.timestamp || 0,\n        data: {\n          tag: 'breadcrumb',\n          payload: breadcrumb\n        }\n      });\n    });\n  }\n\n  /**\n   * Observed performance events are added to `this.performanceEntries`. These\n   * are included in the replay event before it is finished and sent to Sentry.\n   */\n  _addPerformanceEntries() {\n    const performanceEntries = createPerformanceEntries(this.performanceEntries).concat(this.replayPerformanceEntries);\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n    return Promise.all(createPerformanceSpans(this, performanceEntries));\n  }\n\n  /**\n   * Clear _context\n   */\n  _clearContext() {\n    // XXX: `initialTimestamp` and `initialUrl` do not get cleared\n    this._context.errorIds.clear();\n    this._context.traceIds.clear();\n    this._context.urls = [];\n  }\n\n  /** Update the initial timestamp based on the buffer content. */\n  _updateInitialTimestampFromEventBuffer() {\n    const {\n      session,\n      eventBuffer\n    } = this;\n    if (!session || !eventBuffer) {\n      return;\n    }\n\n    // we only ever update this on the initial segment\n    if (session.segmentId) {\n      return;\n    }\n    const earliestEvent = eventBuffer.getEarliestTimestamp();\n    if (earliestEvent && earliestEvent < this._context.initialTimestamp) {\n      this._context.initialTimestamp = earliestEvent;\n    }\n  }\n\n  /**\n   * Return and clear _context\n   */\n  _popEventContext() {\n    const _context = {\n      initialTimestamp: this._context.initialTimestamp,\n      initialUrl: this._context.initialUrl,\n      errorIds: Array.from(this._context.errorIds),\n      traceIds: Array.from(this._context.traceIds),\n      urls: this._context.urls\n    };\n    this._clearContext();\n    return _context;\n  }\n\n  /**\n   * Flushes replay event buffer to Sentry.\n   *\n   * Performance events are only added right before flushing - this is\n   * due to the buffered performance observer events.\n   *\n   * Should never be called directly, only by `flush`\n   */\n  async _runFlush() {\n    const replayId = this.getSessionId();\n    if (!this.session || !this.eventBuffer || !replayId) {\n      DEBUG_BUILD && logger.error('[Replay] No session or eventBuffer found to flush.');\n      return;\n    }\n    await this._addPerformanceEntries();\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer || !this.eventBuffer.hasEvents) {\n      return;\n    }\n\n    // Only attach memory event if eventBuffer is not empty\n    await addMemoryEntry(this);\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer) {\n      return;\n    }\n\n    // if this changed in the meanwhile, e.g. because the session was refreshed or similar, we abort here\n    if (replayId !== this.getSessionId()) {\n      return;\n    }\n    try {\n      // This uses the data from the eventBuffer, so we need to call this before `finish()\n      this._updateInitialTimestampFromEventBuffer();\n      const timestamp = Date.now();\n\n      // Check total duration again, to avoid sending outdated stuff\n      // We leave 30s wiggle room to accomodate late flushing etc.\n      // This _could_ happen when the browser is suspended during flushing, in which case we just want to stop\n      if (timestamp - this._context.initialTimestamp > this._options.maxReplayDuration + 30000) {\n        throw new Error('Session is too long, not sending replay');\n      }\n      const eventContext = this._popEventContext();\n      // Always increment segmentId regardless of outcome of sending replay\n      const segmentId = this.session.segmentId++;\n      this._maybeSaveSession();\n\n      // Note this empties the event buffer regardless of outcome of sending replay\n      const recordingData = await this.eventBuffer.finish();\n      await sendReplay({\n        replayId,\n        recordingData,\n        segmentId,\n        eventContext,\n        session: this.session,\n        options: this.getOptions(),\n        timestamp\n      });\n    } catch (err) {\n      this._handleException(err);\n\n      // This means we retried 3 times and all of them failed,\n      // or we ran into a problem we don't want to retry, like rate limiting.\n      // In this case, we want to completely stop the replay - otherwise, we may get inconsistent segments\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.stop({\n        reason: 'sendReplay'\n      });\n      const client = getClient();\n      if (client) {\n        client.recordDroppedEvent('send_error', 'replay');\n      }\n    }\n  }\n\n  /**\n   * Flush recording data to Sentry. Creates a lock so that only a single flush\n   * can be active at a time. Do not call this directly.\n   */\n  __init5() {\n    var _this2 = this;\n    this._flush = async function () {\n      let {\n        force = false\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (!_this2._isEnabled && !force) {\n        // This can happen if e.g. the replay was stopped because of exceeding the retry limit\n        return;\n      }\n      if (!_this2.checkAndHandleExpiredSession()) {\n        DEBUG_BUILD && logger.error('[Replay] Attempting to finish replay event after session expired.');\n        return;\n      }\n      if (!_this2.session) {\n        // should never happen, as we would have bailed out before\n        return;\n      }\n      const start = _this2.session.started;\n      const now = Date.now();\n      const duration = now - start;\n\n      // A flush is about to happen, cancel any queued flushes\n      _this2._debouncedFlush.cancel();\n\n      // If session is too short, or too long (allow some wiggle room over maxReplayDuration), do not send it\n      // This _should_ not happen, but it may happen if flush is triggered due to a page activity change or similar\n      const tooShort = duration < _this2._options.minReplayDuration;\n      const tooLong = duration > _this2._options.maxReplayDuration + 5000;\n      if (tooShort || tooLong) {\n        logInfo(`[Replay] Session duration (${Math.floor(duration / 1000)}s) is too ${tooShort ? 'short' : 'long'}, not sending replay.`, _this2._options._experiments.traceInternals);\n        if (tooShort) {\n          _this2._debouncedFlush();\n        }\n        return;\n      }\n      const eventBuffer = _this2.eventBuffer;\n      if (eventBuffer && _this2.session.segmentId === 0 && !eventBuffer.hasCheckout) {\n        logInfo('[Replay] Flushing initial segment without checkout.', _this2._options._experiments.traceInternals);\n        // TODO FN: Evaluate if we want to stop here, or remove this again?\n      }\n\n      // this._flushLock acts as a lock so that future calls to `_flush()`\n      // will be blocked until this promise resolves\n      if (!_this2._flushLock) {\n        _this2._flushLock = _this2._runFlush();\n        await _this2._flushLock;\n        _this2._flushLock = undefined;\n        return;\n      }\n\n      // Wait for previous flush to finish, then call the debounced `_flush()`.\n      // It's possible there are other flush requests queued and waiting for it\n      // to resolve. We want to reduce all outstanding requests (as well as any\n      // new flush requests that occur within a second of the locked flush\n      // completing) into a single flush.\n\n      try {\n        await _this2._flushLock;\n      } catch (err) {\n        DEBUG_BUILD && logger.error(err);\n      } finally {\n        _this2._debouncedFlush();\n      }\n    };\n  }\n\n  /** Save the session, if it is sticky */\n  _maybeSaveSession() {\n    if (this.session && this._options.stickySession) {\n      saveSession(this.session);\n    }\n  }\n\n  /** Handler for rrweb.record.onMutation */\n  __init6() {\n    this._onMutationHandler = mutations => {\n      const count = mutations.length;\n      const mutationLimit = this._options.mutationLimit;\n      const mutationBreadcrumbLimit = this._options.mutationBreadcrumbLimit;\n      const overMutationLimit = mutationLimit && count > mutationLimit;\n\n      // Create a breadcrumb if a lot of mutations happen at the same time\n      // We can show this in the UI as an information with potential performance improvements\n      if (count > mutationBreadcrumbLimit || overMutationLimit) {\n        const breadcrumb = createBreadcrumb({\n          category: 'replay.mutations',\n          data: {\n            count,\n            limit: overMutationLimit\n          }\n        });\n        this._createCustomBreadcrumb(breadcrumb);\n      }\n\n      // Stop replay if over the mutation limit\n      if (overMutationLimit) {\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.stop({\n          reason: 'mutationLimit',\n          forceFlush: this.recordingMode === 'session'\n        });\n        return false;\n      }\n\n      // `true` means we use the regular mutation handling by rrweb\n      return true;\n    };\n  }\n}\nfunction getOption(selectors, defaultSelectors, deprecatedClassOption, deprecatedSelectorOption) {\n  const deprecatedSelectors = typeof deprecatedSelectorOption === 'string' ? deprecatedSelectorOption.split(',') : [];\n  const allSelectors = [...selectors,\n  // @deprecated\n  ...deprecatedSelectors,\n  // sentry defaults\n  ...defaultSelectors];\n\n  // @deprecated\n  if (typeof deprecatedClassOption !== 'undefined') {\n    // NOTE: No support for RegExp\n    if (typeof deprecatedClassOption === 'string') {\n      allSelectors.push(`.${deprecatedClassOption}`);\n    }\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('[Replay] You are using a deprecated configuration item for privacy. Read the documentation on how to use the new privacy configuration.');\n    });\n  }\n  return allSelectors.join(',');\n}\n\n/**\n * Returns privacy related configuration for use in rrweb\n */\nfunction getPrivacyOptions(_ref34) {\n  let {\n    mask,\n    unmask,\n    block,\n    unblock,\n    ignore,\n    // eslint-disable-next-line deprecation/deprecation\n    blockClass,\n    // eslint-disable-next-line deprecation/deprecation\n    blockSelector,\n    // eslint-disable-next-line deprecation/deprecation\n    maskTextClass,\n    // eslint-disable-next-line deprecation/deprecation\n    maskTextSelector,\n    // eslint-disable-next-line deprecation/deprecation\n    ignoreClass\n  } = _ref34;\n  const defaultBlockedElements = ['base[href=\"/\"]'];\n  const maskSelector = getOption(mask, ['.sentry-mask', '[data-sentry-mask]'], maskTextClass, maskTextSelector);\n  const unmaskSelector = getOption(unmask, ['.sentry-unmask', '[data-sentry-unmask]']);\n  const options = {\n    // We are making the decision to make text and input selectors the same\n    maskTextSelector: maskSelector,\n    unmaskTextSelector: unmaskSelector,\n    blockSelector: getOption(block, ['.sentry-block', '[data-sentry-block]', ...defaultBlockedElements], blockClass, blockSelector),\n    unblockSelector: getOption(unblock, ['.sentry-unblock', '[data-sentry-unblock]']),\n    ignoreSelector: getOption(ignore, ['.sentry-ignore', '[data-sentry-ignore]', 'input[type=\"file\"]'], ignoreClass)\n  };\n  if (blockClass instanceof RegExp) {\n    options.blockClass = blockClass;\n  }\n  if (maskTextClass instanceof RegExp) {\n    options.maskTextClass = maskTextClass;\n  }\n  return options;\n}\n\n/**\n * Masks an attribute if necessary, otherwise return attribute value as-is.\n */\nfunction maskAttribute(_ref35) {\n  let {\n    el,\n    key,\n    maskAttributes,\n    maskAllText,\n    privacyOptions,\n    value\n  } = _ref35;\n  // We only mask attributes if `maskAllText` is true\n  if (!maskAllText) {\n    return value;\n  }\n\n  // unmaskTextSelector takes precendence\n  if (privacyOptions.unmaskTextSelector && el.matches(privacyOptions.unmaskTextSelector)) {\n    return value;\n  }\n  if (maskAttributes.includes(key) ||\n  // Need to mask `value` attribute for `<input>` if it's a button-like\n  // type\n  key === 'value' && el.tagName === 'INPUT' && ['submit', 'button'].includes(el.getAttribute('type') || '')) {\n    return value.replace(/[\\S]/g, '*');\n  }\n  return value;\n}\nconst MEDIA_SELECTORS = 'img,image,svg,video,object,picture,embed,map,audio,link[rel=\"icon\"],link[rel=\"apple-touch-icon\"]';\nconst DEFAULT_NETWORK_HEADERS = ['content-length', 'content-type', 'accept'];\nlet _initialized = false;\nconst replayIntegration$1 = options => {\n  // eslint-disable-next-line deprecation/deprecation\n  return new Replay$1(options);\n};\n\n/**\n * The main replay integration class, to be passed to `init({  integrations: [] })`.\n * @deprecated Use `replayIntegration()` instead.\n */\nclass Replay$1 {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Replay';\n  }\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n\n  /**\n   * Initial options passed to the replay integration, merged with default values.\n   * Note: `sessionSampleRate` and `errorSampleRate` are not required here, as they\n   * can only be finally set when setupOnce() is called.\n   *\n   * @private\n   */\n\n  constructor() {\n    let {\n      flushMinDelay = DEFAULT_FLUSH_MIN_DELAY,\n      flushMaxDelay = DEFAULT_FLUSH_MAX_DELAY,\n      minReplayDuration = MIN_REPLAY_DURATION,\n      maxReplayDuration = MAX_REPLAY_DURATION,\n      stickySession = true,\n      useCompression = true,\n      workerUrl,\n      _experiments = {},\n      sessionSampleRate,\n      errorSampleRate,\n      maskAllText = true,\n      maskAllInputs = true,\n      blockAllMedia = true,\n      mutationBreadcrumbLimit = 750,\n      mutationLimit = 10000,\n      slowClickTimeout = 7000,\n      slowClickIgnoreSelectors = [],\n      networkDetailAllowUrls = [],\n      networkDetailDenyUrls = [],\n      networkCaptureBodies = true,\n      networkRequestHeaders = [],\n      networkResponseHeaders = [],\n      mask = [],\n      maskAttributes = ['title', 'placeholder'],\n      unmask = [],\n      block = [],\n      unblock = [],\n      ignore = [],\n      maskFn,\n      beforeAddRecordingEvent,\n      beforeErrorSampling,\n      // eslint-disable-next-line deprecation/deprecation\n      blockClass,\n      // eslint-disable-next-line deprecation/deprecation\n      blockSelector,\n      // eslint-disable-next-line deprecation/deprecation\n      maskInputOptions,\n      // eslint-disable-next-line deprecation/deprecation\n      maskTextClass,\n      // eslint-disable-next-line deprecation/deprecation\n      maskTextSelector,\n      // eslint-disable-next-line deprecation/deprecation\n      ignoreClass\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // eslint-disable-next-line deprecation/deprecation\n    this.name = Replay$1.id;\n    const privacyOptions = getPrivacyOptions({\n      mask,\n      unmask,\n      block,\n      unblock,\n      ignore,\n      blockClass,\n      blockSelector,\n      maskTextClass,\n      maskTextSelector,\n      ignoreClass\n    });\n    this._recordingOptions = {\n      maskAllInputs,\n      maskAllText,\n      maskInputOptions: {\n        ...(maskInputOptions || {}),\n        password: true\n      },\n      maskTextFn: maskFn,\n      maskInputFn: maskFn,\n      maskAttributeFn: (key, value, el) => maskAttribute({\n        maskAttributes,\n        maskAllText,\n        privacyOptions,\n        key,\n        value,\n        el\n      }),\n      ...privacyOptions,\n      // Our defaults\n      slimDOMOptions: 'all',\n      inlineStylesheet: true,\n      // Disable inline images as it will increase segment/replay size\n      inlineImages: false,\n      // collect fonts, but be aware that `sentry.io` needs to be an allowed\n      // origin for playback\n      collectFonts: true,\n      errorHandler: err => {\n        try {\n          err.__rrweb__ = true;\n        } catch (error) {\n          // ignore errors here\n          // this can happen if the error is frozen or does not allow mutation for other reasons\n        }\n      }\n    };\n    this._initialOptions = {\n      flushMinDelay,\n      flushMaxDelay,\n      minReplayDuration: Math.min(minReplayDuration, MIN_REPLAY_DURATION_LIMIT),\n      maxReplayDuration: Math.min(maxReplayDuration, MAX_REPLAY_DURATION),\n      stickySession,\n      sessionSampleRate,\n      errorSampleRate,\n      useCompression,\n      workerUrl,\n      blockAllMedia,\n      maskAllInputs,\n      maskAllText,\n      mutationBreadcrumbLimit,\n      mutationLimit,\n      slowClickTimeout,\n      slowClickIgnoreSelectors,\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders: _getMergedNetworkHeaders(networkRequestHeaders),\n      networkResponseHeaders: _getMergedNetworkHeaders(networkResponseHeaders),\n      beforeAddRecordingEvent,\n      beforeErrorSampling,\n      _experiments\n    };\n    if (typeof sessionSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(`[Replay] You are passing \\`sessionSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysSessionSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysSessionSampleRate: ${sessionSampleRate} })`);\n      this._initialOptions.sessionSampleRate = sessionSampleRate;\n    }\n    if (typeof errorSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(`[Replay] You are passing \\`errorSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysOnErrorSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysOnErrorSampleRate: ${errorSampleRate} })`);\n      this._initialOptions.errorSampleRate = errorSampleRate;\n    }\n    if (this._initialOptions.blockAllMedia) {\n      // `blockAllMedia` is a more user friendly option to configure blocking\n      // embedded media elements\n      this._recordingOptions.blockSelector = !this._recordingOptions.blockSelector ? MEDIA_SELECTORS : `${this._recordingOptions.blockSelector},${MEDIA_SELECTORS}`;\n    }\n    if (this._isInitialized && isBrowser()) {\n      throw new Error('Multiple Sentry Session Replay instances are not supported');\n    }\n    this._isInitialized = true;\n  }\n\n  /** If replay has already been initialized */\n  get _isInitialized() {\n    return _initialized;\n  }\n\n  /** Update _isInitialized */\n  set _isInitialized(value) {\n    _initialized = value;\n  }\n\n  /**\n   * Setup and initialize replay container\n   */\n  setupOnce() {\n    if (!isBrowser()) {\n      return;\n    }\n    this._setup();\n\n    // Once upon a time, we tried to create a transaction in `setupOnce` and it would\n    // potentially create a transaction before some native SDK integrations have run\n    // and applied their own global event processor. An example is:\n    // https://github.com/getsentry/sentry-javascript/blob/b47ceafbdac7f8b99093ce6023726ad4687edc48/packages/browser/src/integrations/useragent.ts\n    //\n    // So we call `this._initialize()` in next event loop as a workaround to wait for other\n    // global event processors to finish. This is no longer needed, but keeping it\n    // here to avoid any future issues.\n    setTimeout(() => this._initialize());\n  }\n\n  /**\n   * Start a replay regardless of sampling rate. Calling this will always\n   * create a new session. Will throw an error if replay is already in progress.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * PerformanceObserver, Recording, Sentry SDK, etc)\n   */\n  start() {\n    if (!this._replay) {\n      return;\n    }\n    this._replay.start();\n  }\n\n  /**\n   * Start replay buffering. Buffers until `flush()` is called or, if\n   * `replaysOnErrorSampleRate` > 0, until an error occurs.\n   */\n  startBuffering() {\n    if (!this._replay) {\n      return;\n    }\n    this._replay.startBuffering();\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n  stop() {\n    if (!this._replay) {\n      return Promise.resolve();\n    }\n    return this._replay.stop({\n      forceFlush: this._replay.recordingMode === 'session'\n    });\n  }\n\n  /**\n   * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n   * Unless `continueRecording` is false, the replay will continue to record and\n   * behave as a \"session\"-based replay.\n   *\n   * Otherwise, queue up a flush.\n   */\n  flush(options) {\n    if (!this._replay || !this._replay.isEnabled()) {\n      return Promise.resolve();\n    }\n    return this._replay.sendBufferedReplayOrFlush(options);\n  }\n\n  /**\n   * Get the current session ID.\n   */\n  getReplayId() {\n    if (!this._replay || !this._replay.isEnabled()) {\n      return;\n    }\n    return this._replay.getSessionId();\n  }\n\n  /**\n   * Initializes replay.\n   */\n  _initialize() {\n    if (!this._replay) {\n      return;\n    }\n\n    // We have to run this in _initialize, because this runs in setTimeout\n    // So when this runs all integrations have been added\n    // Before this, we cannot access integrations on the client,\n    // so we need to mutate the options here\n    this._maybeLoadFromReplayCanvasIntegration();\n    this._replay.initializeSampling();\n  }\n\n  /** Setup the integration. */\n  _setup() {\n    // Client is not available in constructor, so we need to wait until setupOnce\n    const finalOptions = loadReplayOptionsFromClient(this._initialOptions);\n    this._replay = new ReplayContainer({\n      options: finalOptions,\n      recordingOptions: this._recordingOptions\n    });\n  }\n\n  /** Get canvas options from ReplayCanvas integration, if it is also added. */\n  _maybeLoadFromReplayCanvasIntegration() {\n    // To save bundle size, we skip checking for stuff here\n    // and instead just try-catch everything - as generally this should all be defined\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n    try {\n      const client = getClient();\n      const canvasIntegration = client.getIntegrationByName('ReplayCanvas');\n      if (!canvasIntegration) {\n        return;\n      }\n      this._replay['_canvas'] = canvasIntegration.getOptions();\n    } catch (e) {\n      // ignore errors here\n    }\n    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n  }\n}\nReplay$1.__initStatic();\n\n/** Parse Replay-related options from SDK options */\nfunction loadReplayOptionsFromClient(initialOptions) {\n  const client = getClient();\n  const opt = client && client.getOptions();\n  const finalOptions = {\n    sessionSampleRate: 0,\n    errorSampleRate: 0,\n    ...dropUndefinedKeys(initialOptions)\n  };\n  if (!opt) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('SDK client is not available.');\n    });\n    return finalOptions;\n  }\n  if (initialOptions.sessionSampleRate == null &&\n  // TODO remove once deprecated rates are removed\n  initialOptions.errorSampleRate == null &&\n  // TODO remove once deprecated rates are removed\n  opt.replaysSessionSampleRate == null && opt.replaysOnErrorSampleRate == null) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('Replay is disabled because neither `replaysSessionSampleRate` nor `replaysOnErrorSampleRate` are set.');\n    });\n  }\n  if (typeof opt.replaysSessionSampleRate === 'number') {\n    finalOptions.sessionSampleRate = opt.replaysSessionSampleRate;\n  }\n  if (typeof opt.replaysOnErrorSampleRate === 'number') {\n    finalOptions.errorSampleRate = opt.replaysOnErrorSampleRate;\n  }\n  return finalOptions;\n}\nfunction _getMergedNetworkHeaders(headers) {\n  return [...DEFAULT_NETWORK_HEADERS, ...headers.map(header => header.toLowerCase())];\n}\n\n/**\n * This is a small utility to get a type-safe instance of the Replay integration.\n */\n// eslint-disable-next-line deprecation/deprecation\nfunction getReplay$1() {\n  const client = getClient();\n  return client && client.getIntegrationByName && client.getIntegrationByName('Replay');\n}\n\n// eslint-disable-next-line deprecation/deprecation\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\nconst getReplay = getReplay$1;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\nconst replayIntegration = replayIntegration$1;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\n// eslint-disable-next-line deprecation/deprecation\nclass Replay extends Replay$1 {}\nexport { Replay$1 as InternalReplay, Replay, getReplay, getReplay$1 as internalGetReplay, replayIntegration$1 as internalReplayIntegration, replayIntegration };","map":{"version":3,"names":["WINDOW","GLOBAL_OBJ","REPLAY_SESSION_KEY","REPLAY_EVENT_NAME","UNABLE_TO_SEND_REPLAY","SESSION_IDLE_PAUSE_DURATION","SESSION_IDLE_EXPIRE_DURATION","DEFAULT_FLUSH_MIN_DELAY","DEFAULT_FLUSH_MAX_DELAY","BUFFER_CHECKOUT_TIME","RETRY_BASE_INTERVAL","RETRY_MAX_COUNT","NETWORK_BODY_MAX_SIZE","CONSOLE_ARG_MAX_SIZE","SLOW_CLICK_THRESHOLD","SLOW_CLICK_SCROLL_TIMEOUT","REPLAY_MAX_EVENT_BUFFER_SIZE","MIN_REPLAY_DURATION","MIN_REPLAY_DURATION_LIMIT","MAX_REPLAY_DURATION","_nullishCoalesce$1","_nullishCoalesce","lhs","rhsFn","_optionalChain$5","_optionalChain","ops","lastAccessLHS","undefined","value","i","length","op","fn","_len","arguments","args","Array","_key","call","NodeType$1","NodeType","isElement$1","isElement","n","nodeType","ELEMENT_NODE","isShadowRoot","host","_","Boolean","_2","shadowRoot","isNativeShadowDom","Object","prototype","toString","fixBrowserCompatibilityIssuesInCSS","cssText","includes","replace","escapeImportStatement","rule","split","statement","JSON","stringify","href","layerName","push","supportsText","media","mediaText","join","stringifyStylesheet","s","rules","cssRules","from","stringifyRule","error","importStringified","isCSSImportRule","styleSheet","isCSSStyleRule","selectorText","fixSafariColons","cssStringified","regex","Mirror","constructor","idNodeMap","Map","nodeMetaMap","WeakMap","getId","id","_3","getMeta","_4","_5","getNode","get","getIds","keys","removeNodeFromMap","delete","childNodes","forEach","childNode","has","hasNode","node","add","meta","set","oldNode","reset","createMirror","shouldMaskInput","_ref","maskInputOptions","tagName","type","toLowerCase","maskInputValue","_ref2","isMasked","element","maskInputFn","text","repeat","str","toUpperCase","ORIGINAL_ATTRIBUTE_NAME","is2DCanvasBlank","canvas","ctx","getContext","chunkSize","x","width","y","height","getImageData","originalGetImageData","pixelBuffer","Uint32Array","Math","min","data","buffer","some","pixel","getInputType","hasAttribute","getInputValue","el","getAttribute","_id","tagNameRegex","RegExp","IGNORED_NODE","genId","getValidTagName","HTMLFormElement","processedTagName","test","extractOrigin","url","origin","indexOf","slice","canvasService","canvasCtx","URL_IN_CSS_REF","URL_PROTOCOL_MATCH","URL_WWW_MATCH","DATA_URI","absoluteToStylesheet","quote1","path1","quote2","path2","path3","filePath","maybeQuote","stack","parts","pop","part","SRCSET_NOT_SPACES","SRCSET_COMMAS_OR_SPACES","getAbsoluteSrcsetString","doc","attributeValue","trim","pos","collectCharacters","regEx","chars","match","exec","substring","output","absoluteToDoc","descriptorsStr","inParens","c","charAt","a","createElement","isSVGElement","ownerSVGElement","getHref","document","transformAttribute","name","maskAttributeFn","ignoreAttribute","_value","_isBlockedElement","blockClass","blockSelector","unblockSelector","matches","classList","contains","eIndex","className","e","elementClassMatchesRegex","distanceToMatch","matchPredicate","limit","Infinity","distance","parentNode","createMatchPredicate","selector","e2","needMaskingText","maskTextClass","maskTextSelector","unmaskTextClass","unmaskTextSelector","maskAllText","parentElement","autocomplete","disallowedAutocompleteValues","maskDistance","unmaskDistance","onceIframeLoaded","iframeEl","listener","iframeLoadTimeout","win","contentWindow","fired","readyState","timer","setTimeout","addEventListener","clearTimeout","blankUrl","location","src","onceStylesheetLoaded","link","styleSheetLoadTimeout","styleSheetLoaded","sheet","serializeNode","options","mirror","inlineStylesheet","maskTextFn","dataURLOptions","inlineImages","recordCanvas","keepIframeSrcFn","newlyAddedElement","rootId","getRootId","DOCUMENT_NODE","compatMode","Document","DOCUMENT_TYPE_NODE","DocumentType","publicId","systemId","serializeElementNode","TEXT_NODE","serializeTextNode","CDATA_SECTION_NODE","CDATA","textContent","COMMENT_NODE","Comment","docId","parentTagName","isStyle","isScript","isTextarea","nextSibling","previousSibling","_6","_7","_8","err","console","warn","forceMask","textarea","isInputMasked","Text","needBlock","attributes","len","attr","stylesheet","styleSheets","find","rel","_cssText","innerText","checked","selected","__context","rr_dataURL","toDataURL","quality","canvasDataURL","blankCanvas","blankCanvasDataURL","image","oldValue","crossOrigin","recordInlineImage","removeEventListener","naturalWidth","naturalHeight","drawImage","currentSrc","removeAttribute","complete","rr_mediaState","paused","rr_mediaCurrentTime","currentTime","scrollLeft","rr_scrollLeft","scrollTop","rr_scrollTop","getBoundingClientRect","class","rr_width","rr_height","contentDocument","rr_src","isCustomElement","customElements","Element","isSVG","isCustom","lowerIfExists","maybeAttr","slimDOMExcluded","sn","slimDOMOptions","comment","script","as","endsWith","headFavicon","headMetaDescKeywords","headMetaSocial","property","headMetaRobots","headMetaHttpEquiv","headMetaAuthorship","headMetaVerification","serializeNodeWithId","skipChild","onSerialize","onIframeLoad","onStylesheetLoad","stylesheetLoadTimeout","preserveWhiteSpace","_serializedNode","serializedNode","assign","recordChild","isShadowHost","headWhitespace","bypassOptions","childN","serializedChildNode","isShadow","iframeDoc","serializedIframeNode","serializedLinkNode","snapshot","maskAllInputs","slimDOM","color","date","email","month","number","range","search","tel","time","week","select","_optionalChain$4","_len2","_key2","on","target","capture","passive","DEPARTED_MIRROR_ACCESS_WARNING","_mirror","map","window","Proxy","Reflect","prop","receiver","throttle$1","throttle","func","wait","timeout","previous","_len3","_key3","now","Date","leading","remaining","context","clearTimeout$1","apply","trailing","setTimeout$1","hookSetter","key","d","isRevoked","original","getOwnPropertyDescriptor","defineProperty","patch","source","replacement","wrapped","defineProperties","__rrweb_original__","enumerable","nowTimestamp","getTime","getWindowScroll","left","scrollingElement","pageXOffset","documentElement","body","top","pageYOffset","_9","_10","_11","_12","_13","_14","getWindowHeight","innerHeight","clientHeight","getWindowWidth","innerWidth","clientWidth","closestElementOfNode","isBlocked","checkAncestors","blockedPredicate","isUnblocked","blockDistance","unblockDistance","isSerialized","isIgnored","isAncestorRemoved","legacy_isTouchEvent","event","changedTouches","polyfill","_this","NodeList","DOMTokenList","Node","_len4","_key4","TypeError","isSerializedIframe","nodeName","isSerializedStylesheet","hasShadowRoot","_18","StyleSheetMirror","styleIDMap","idStyleMap","newId","getStyle","generateId","getShadowHost","shadowHost","_19","getRootNode","_20","_21","DOCUMENT_FRAGMENT_NODE","getRootShadowHost","rootShadowHost","shadowHostInDom","ownerDocument","inDom","cachedImplementations","getImplementation","cached","impl","sandbox","hidden","head","appendChild","removeChild","bind","onRequestAnimationFrame","EventType","EventType2","IncrementalSource","IncrementalSource2","MouseInteractions","MouseInteractions2","PointerTypes","PointerTypes2","_optionalChain$3","_len5","_key5","isNodeInLinkedList","DoubleLinkedList","tail","position","Error","current","index","next","addNode","__ln","removeNode","moveKey","parentId","MutationBuffer","frozen","locked","texts","attributeMap","removes","mapRemoves","movedMap","addedSet","Set","movedSet","droppedSet","processMutations","mutations","processMutation","emit","adds","addedIds","addList","getNextId","ns","nextId","pushAdd","currentN","iframeManager","addIframe","stylesheetManager","trackLinkElement","shadowDomManager","addShadowRoot","iframe","childSn","attachIframe","observeAttachShadow","attachLinkElement","shift","isParentRemoved","isAncestorInSet","candidate","tailNode","_node","unhandledNode","payload","filter","attribute","style","diffAsStr","styleDiff","unchangedAsStr","_unchangedStyles","mutationCb","m","attributeName","item","setAttribute","unattachedDoc","implementation","createHTMLDocument","old","pname","newValue","getPropertyValue","newPriority","getPropertyPriority","addedNodes","genAdds","removedNodes","nodeId","deepDelete","processedNodeManager","inOtherBuffer","targetId","init","freeze","canvasManager","unfreeze","isFrozen","lock","unlock","addsSet","_isParentRemoved","r","size","_isAncestorInSet","errorHandler","registerErrorHandler","handler","unregisterErrorHandler","callbackWrapper","cb","rrwebWrapped","_optionalChain$2","_len6","_key6","mutationBuffers","getEventTarget","path","composedPath","initMutationObserver","rootEl","mutationBuffer","mutationObserverCtor","MutationObserver","__rrMutationObserver","angularZoneSymbol","Zone","__symbol__","observer","onMutation","observe","attributeOldValue","characterData","characterDataOldValue","childList","subtree","initMoveObserver","_ref3","mousemoveCb","sampling","mousemove","threshold","callbackThreshold","mousemoveCallback","positions","timeBaseline","wrappedCb","totalOffset","p","timeOffset","updatePosition","evt","clientX","clientY","DragEvent","Drag","MouseEvent","MouseMove","TouchMove","handlers","h","initMouseInteractionObserver","_ref4","mouseInteractionCb","mouseInteraction","disableMap","currentPointerType","getHandler","eventKey","pointerType","thisEventKey","Mouse","Touch","Pen","MouseDown","MouseUp","startsWith","Click","Number","isNaN","eventName","PointerEvent","TouchStart","TouchEnd","initScrollObserver","_ref5","scrollCb","defaultView","scrollLeftTop","scroll","initViewportResizeObserver","_ref6","_ref7","viewportResizeCb","lastH","lastW","updateDimension","INPUT_TAGS","lastInputValueMap","initInputObserver","_ref8","inputCb","ignoreClass","ignoreSelector","userTriggeredOnInput","eventHandler","userTriggered","isTrusted","isChecked","cbWithDedup","querySelectorAll","v","lastInputValue","events","input","currentWindow","propertyDescriptor","HTMLInputElement","hookProperties","HTMLSelectElement","HTMLTextAreaElement","HTMLOptionElement","getNestedCSSRulePositions","recurse","childRule","hasNestedCSSRule","parentRule","CSSGroupingRule","CSSMediaRule","CSSSupportsRule","CSSConditionRule","unshift","parentStyleSheet","getIdAndStyleId","styleMirror","styleId","ownerNode","initStyleSheetObserver","_ref9","_ref0","styleSheetRuleCb","CSSStyleSheet","insertRule","thisArg","argumentsList","deleteRule","replaceSync","supportedNestedCSSRuleTypes","canMonkeyPatchNestedCSSRule","unmodifiedFunctions","entries","_ref1","typeKey","_ref10","initAdoptedStyleSheetObserver","_ref11","hostId","patchTarget","ShadowRoot","originalPropertyDescriptor","configurable","sheets","result","_15","_16","adoptStyleSheets","initStyleDeclarationObserver","_ref12","_ref13","styleDeclarationCb","ignoreCSSAttributes","setProperty","CSSStyleDeclaration","priority","_17","removeProperty","remove","initMediaInteractionObserver","_ref14","mediaInteractionCb","volume","muted","playbackRate","initFontObserver","_ref15","fontCb","fontMap","originalFontFace","FontFace","family","descriptors","fontFace","fontSource","Uint8Array","restoreHandler","fonts","initSelectionObserver","param","selectionCb","collapsed","updateSelection","selection","getSelection","isCollapsed","ranges","count","rangeCount","getRangeAt","startContainer","startOffset","endContainer","endOffset","blocked","start","end","initCustomElementObserver","_ref16","customElementCb","define","initObservers","o","_hooks","mutationObserver","mousemoveHandler","mouseInteractionHandler","scrollHandler","viewportResizeHandler","inputHandler","mediaInteractionHandler","styleSheetObserver","adoptedStyleSheetObserver","styleDeclarationObserver","fontObserver","collectFonts","selectionObserver","customElementObserver","pluginHandlers","plugin","plugins","callback","b","disconnect","CrossOriginIframeMirror","generateIdFn","iframeIdToRemoteIdMap","iframeRemoteIdToIdMap","remoteId","idToRemoteMap","remoteToIdMap","idToRemoteIdMap","getIdToRemoteIdMap","remoteIdToIdMap","getRemoteIdToIdMap","getRemoteId","getRemoteIds","ids","_optionalChain$1","_len7","_key7","IframeManagerNoop","crossOriginIframeMirror","crossOriginIframeRootIdMap","addLoadListener","IframeManager","iframes","crossOriginIframeMap","wrappedEmit","recordCrossOriginIframes","crossOriginIframeStyleMirror","handleMessage","loadListener","isAttachIframe","adoptedStyleSheets","message","crossOriginMessageEvent","iframeSourceWindow","transformedEvent","transformCrossOriginEvent","isCheckout","FullSnapshot","replaceIdOnNode","patchRootIdOnNode","timestamp","IncrementalSnapshot","Mutation","Meta","Load","DomContentLoaded","Plugin","Custom","replaceIds","ViewportResize","MediaInteraction","MouseInteraction","Scroll","CanvasMutation","Input","StyleSheetRule","StyleDeclaration","replaceStyleIds","Font","Selection","AdoptedStyleSheet","styles","iframeMirror","obj","isArray","child","ShadowDomManagerNoop","ShadowDomManager","shadowDoms","WeakSet","restoreHandlers","patchAttachShadow","iframeElement","manager","option","CanvasManagerNoop","StylesheetManager","trackedLinkElements","adoptedStyleSheetCb","linkEl","trackStylesheetInLinkElement","adoptedStyleSheetData","styleIds","CSSRule","ProcessedNodeManager","nodeMap","loop","periodicallyClear","clear","thisBuffer","buffers","destroy","_takeFullSnapshot","record","checkoutEveryNms","checkoutEveryNth","_maskInputOptions","_slimDOMOptions","maxCanvasSize","packFn","mousemoveWait","recordAfter","getCanvasManager","inEmittingFrame","parent","passEmitsToParent","radio","checkbox","lastFullSnapshotEvent","incrementalSnapshotCount","eventProcessor","buf","postMessage","exceedCount","exceedTime","takeFullSnapshot","wrappedMutationEmit","wrappedScrollEmit","wrappedCanvasMutationEmit","wrappedAdoptedStyleSheetEmit","__RRWEB_EXCLUDE_IFRAME__","getMirror","nodeMirror","_getCanvasManager","__RRWEB_EXCLUDE_SHADOW_DOM__","initialOffset","canvasMutationCb","CustomElement","getCanvasManagerFn","ReplayEventTypeIncrementalSnapshot","ReplayEventTypeCustom","timestampToMs","isMs","timestampToS","addBreadcrumbEvent","replay","breadcrumb","category","triggerUserActivity","checkAndHandleExpiredSession","addUpdate","throttledAddEvent","tag","normalize","INTERACTIVE_SELECTOR","getClosestInteractive","closestInteractive","closest","getClickTargetNode","getTargetNode","isEventWithTarget","onWindowOpen","monkeyPatchWindowOpen","splice","fill","originalWindowOpen","_len8","_key8","handleClick","clickDetector","clickBreadcrumb","ClickDetector","slowClickConfig","_addBreadcrumbEvent","_lastMutation","_lastScroll","_clicks","_timeout","_threshold","_scollTimeout","scrollTimeout","_replay","_ignoreSelector","addListeners","cleanupWindowOpen","nowInSeconds","_teardown","removeListeners","_checkClickTimeout","ignoreElement","isClickBreadcrumb","newClick","clickCount","click","abs","_scheduleCheckClicks","registerMutation","registerScroll","registerClick","_handleMultiClick","_getClicks","_checkClicks","timedOutClicks","mutationAfter","scrollAfter","_generateBreadcrumbs","hadScroll","hadMutation","isSlowClick","timeAfterClickMs","endReason","route","getCurrentRoute","metric","SLOW_CLICK_TAGS","updateClickDetectorForRecordingEvent","isIncrementalEvent","isIncrementalMouseInteraction","HTMLElement","createBreadcrumb","ATTRIBUTES_TO_RECORD","getAttributesToRecord","normalizedKey","handleDomListener","handlerData","isEnabled","handleDom","isClick","altKey","metaKey","ctrlKey","shiftKey","getBaseDomBreadcrumb","getDomTarget","htmlTreeAsString","maxStringLength","handleKeyboardEvent","updateUserActivity","getKeyboardBreadcrumb","isInputElement","hasModifierKey","isCharacterKey","baseBreadcrumb","isContentEditable","ENTRY_TYPES","resource","createResourceEntry","paint","createPaintEntry","navigation","createNavigationEntry","createPerformanceEntries","createPerformanceEntry","entry","entryType","getAbsoluteTime","browserPerformanceTimeOrigin","performance","timeOrigin","duration","startTime","decodedBodySize","domComplete","encodedBodySize","domContentLoadedEventStart","domContentLoadedEventEnd","domInteractive","loadEventStart","loadEventEnd","redirectCount","transferSize","initiatorType","responseEnd","responseStatus","statusCode","getLargestContentfulPaint","lastEntry","setupPerformanceObserver","addPerformanceEntry","performanceEntries","onEntries","_ref17","clearCallbacks","addPerformanceInstrumentationHandler","addLcpInstrumentationHandler","_ref18","replayPerformanceEntries","clearCallback","DEBUG_BUILD","__SENTRY_DEBUG__","Blob","URL","createObjectURL","logInfo","shouldAddBreadcrumb","logger","info","addLogBreadcrumb","logInfoNextTick","addBreadcrumb","level","EventBufferSizeExceededError","EventBufferArray","_totalSize","hasCheckout","hasEvents","addEvent","eventSize","finish","Promise","resolve","eventsRet","getEarliestTimestamp","sort","WorkerHandler","worker","_worker","ensureReady","_ensureReadyPromise","reject","_ref19","success","once","terminate","method","arg","_getAndIncrementId","_ref20","response","EventBufferCompressionWorker","_earliestTimestamp","_sendEventToWorker","_finishRequest","then","EventBufferProxy","_fallback","_compression","_used","_ensureWorkerIsLoadedPromise","_ensureWorkerIsLoaded","ensureWorkerIsLoaded","_switchToCompressionWorker","addEventPromises","all","createEventBuffer","_ref21","useCompression","workerUrl","customWorkerUrl","Worker","_loadWorker","_getWorkerUrl","__SENTRY_EXCLUDE_REPLAY_WORKER__","hasSessionStorage","sessionStorage","clearSession","deleteSession","session","removeItem","isSampled","sampleRate","random","makeSession","uuid4","started","lastActivity","segmentId","sampled","previousSessionId","saveSession","setItem","getSessionSampleType","sessionSampleRate","allowBuffering","createSession","_ref22","stickySession","fetchSession","traceInternals","sessionStringFromStorage","getItem","sessionObj","parse","isExpired","initialTime","expiry","targetTime","isSessionExpired","_ref23","maxReplayDuration","sessionIdleExpire","shouldRefreshSession","_ref24","loadOrCreateSession","_ref25","sessionOptions","existingSession","isCustomEvent","addEventSync","shouldAddEvent","_addEvent","eventBuffer","recordingMode","replayOptions","getOptions","eventAfterPossibleCallback","maybeApplyCallback","beforeAddRecordingEvent","reason","stop","client","getClient","recordDroppedEvent","isPaused","timestampInMs","timeouts","sessionIdlePause","initialTimestamp","_experiments","isErrorEvent","isTransactionEvent","isReplayEvent","isFeedbackEvent","handleAfterSendEvent","enforceStatusCode","isBaseTransportSend","sendResponse","handleTransactionEvent","handleErrorEvent","replayContext","contexts","trace","trace_id","traceIds","event_id","errorIds","tags","replayId","beforeErrorSampling","sendBufferedReplayOrFlush","transport","getTransport","send","__sentry__baseTransport__","handleBeforeSendEvent","handleHydrationError","exceptionValue","exception","values","isRrwebError","hint","originalException","__rrweb__","addFeedbackBreadcrumb","feedbackId","shouldSampleForBufferEvent","errorSampleRate","handleGlobalEventListener","includeAfterSendEventHandling","afterSendHandler","breadcrumbs","isSessionActive","flush","feedback","replay_id","getSessionId","captureExceptions","log","isErrorEventSampled","shouldTagReplayId","createPerformanceSpans","_ref26","description","startTimestamp","endTimestamp","handleHistory","to","handleHistorySpanListener","urls","shouldFilterRequest","isSentryRequestUrl","addNetworkBreadcrumb","handleFetch","fetchData","status","handleFetchSpanListener","handleXhr","xhr","sentryXhrData","SENTRY_XHR_DATA_KEY","status_code","handleXhrSpanListener","getBodySize","textEncoder","encode","URLSearchParams","FormData","formDataStr","_serializeFormData","ArrayBuffer","byteLength","parseContentLengthHeader","header","parseInt","getBodyString","mergeWarning","warning","headers","_meta","warnings","newMeta","existingWarnings","makeNetworkReplayBreadcrumb","request","dropUndefinedKeys","buildSkippedNetworkRequestOrResponse","bodySize","buildNetworkRequestOrResponse","normalizedBody","normalizeNetworkBody","getAllowedHeaders","allowedHeaders","reduce","filteredHeaders","formData","exceedsSizeLimit","isProbablyJson","_strIsProbablyJson","truncatedBody","jsonBody","e3","first","last","urlMatches","fullUrl","getFullUrl","stringMatchesSomePattern","baseURI","fixedUrl","captureFetchBreadcrumbToReplay","_prepareFetchData","enrichFetchBreadcrumb","_getFetchRequestArgBody","reqSize","resSize","request_body_size","response_body_size","requestBodySize","responseBodySize","captureDetails","networkDetailAllowUrls","networkDetailDenyUrls","_getRequestInfo","_getResponseInfo","_ref27","networkCaptureBodies","networkRequestHeaders","getRequestHeaders","requestBody","bodyStr","_ref28","networkResponseHeaders","getAllHeaders","bodyText","_parseFetchResponseBody","getResponseData","_ref29","res","_tryCloneResponse","_tryGetResponseText","fetchArgs","allHeaders","getHeadersFromOptions","Headers","clone","_getResponseText","txt","finally","captureXhrBreadcrumbToReplay","_prepareXhrData","enrichXhrBreadcrumb","getResponseHeader","_getBodySize","responseType","xhrInfo","request_headers","getResponseHeaders","requestWarning","responseBody","responseWarning","_getXhrResponseBody","getAllResponseHeaders","acc","line","errors","responseText","_parseXhrResponse","outerHTML","handleNetworkBreadcrumbs","TextEncoder","beforeAddNetworkBreadcrumb","addFetchInstrumentationHandler","addXhrInstrumentationHandler","_isXhrBreadcrumb","_isXhrHint","_isFetchBreadcrumb","_isFetchHint","_LAST_BREADCRUMB","isBreadcrumbWithCategory","handleScopeListener","scope","handleScope","newBreadcrumb","getLastBreadcrumb","normalizeConsoleBreadcrumb","isTruncated","normalizedArgs","normalizedArg","stringified","addGlobalListeners","getCurrentScope","addScopeListener","addClickKeypressInstrumentationHandler","addHistoryInstrumentationHandler","hasHooks","addEventProcessor","dsc","transaction","lastTransaction","feedbackEvent","includeReplay","addMemoryEntry","createMemoryEntry","memory","memoryEntry","jsHeapSizeLimit","totalJSHeapSize","usedJSHeapSize","debounce","callbackReturnValue","timerId","maxTimerId","maxWait","max","invokeFunc","cancelTimers","debounced","cancel","getHandleRecordingEmit","hadFirstEvent","_isCheckout","setInitialState","addSettingsEvent","earliestEvent","createOptionsEvent","shouldRecordCanvas","isRecordingCanvas","useCompressionOption","blockAllMedia","networkDetailHasUrls","networkRequestHasHeaders","networkResponseHasHeaders","createReplayEnvelope","replayEvent","recordingData","dsn","tunnel","createEnvelope","createEventEnvelopeHeaders","getSdkMetadataForEnvelopeHeader","prepareRecordingData","_ref30","payloadWithSequence","replayHeaders","enc","sequence","prepareReplayEvent","_ref31","integrations","_integrations","eventHint","preparedEvent","prepareEvent","getIsolationScope","platform","metadata","getSdkMetadata","version","sdk","sendReplayRequest","_ref32","segment_id","eventContext","preparedRecordingData","getDsn","baseEvent","replay_start_timestamp","error_ids","trace_ids","replay_type","sdkProcessingMetadata","envelope","cause","TransportStatusCodeError","rateLimits","updateRateLimits","isRateLimited","RateLimitError","sendReplay","replayData","retryConfig","interval","setContext","_retryCount","captureException","THROTTLED","SKIPPED","maxCount","durationSeconds","counter","_cleanup","_getTotalCount","isThrottled","floor","wasThrottled","ReplayContainer","_ref33","recordingOptions","__init","__init2","__init3","__init4","__init5","__init6","_lastActivity","_isEnabled","_isPaused","_hasInitializedCoreListeners","_context","initialUrl","_recordingOptions","_options","_debouncedFlush","_flush","flushMinDelay","flushMaxDelay","_throttledAddEvent","slowClickTimeout","slowClickIgnoreSelectors","_canvas","initializeSampling","_initializeSessionForSampling","_handleException","_initializeRecording","_updateUserActivity","startBuffering","startRecording","canvasOptions","_stopRecording","_onMutationHandler","stopRecording","forceFlush","_removeListeners","force","pause","resume","_checkSession","continueRecording","flushImmediate","activityTime","hasStoppedRecording","_updateSessionActivity","_maybeSaveSession","cbResult","conditionalFlush","cancelFlush","urlPath","pathname","hash","_clearContext","getTransaction","spanToJSON","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","_addListeners","currentSession","_refreshSession","_handleVisibilityChange","_handleWindowBlur","_handleWindowFocus","_handleKeyboardEvent","_performanceCleanupCallback","visibilityState","_doChangeToForegroundTasks","_doChangeToBackgroundTasks","expired","_createCustomBreadcrumb","_addPerformanceEntries","concat","_updateInitialTimestampFromEventBuffer","_popEventContext","_runFlush","_this2","tooShort","minReplayDuration","tooLong","_flushLock","mutationLimit","mutationBreadcrumbLimit","overMutationLimit","getOption","selectors","defaultSelectors","deprecatedClassOption","deprecatedSelectorOption","deprecatedSelectors","allSelectors","consoleSandbox","getPrivacyOptions","_ref34","mask","unmask","block","unblock","ignore","defaultBlockedElements","maskSelector","unmaskSelector","maskAttribute","_ref35","maskAttributes","privacyOptions","MEDIA_SELECTORS","DEFAULT_NETWORK_HEADERS","_initialized","replayIntegration$1","Replay$1","__initStatic","maskFn","password","_initialOptions","_getMergedNetworkHeaders","_isInitialized","isBrowser","setupOnce","_setup","_initialize","getReplayId","_maybeLoadFromReplayCanvasIntegration","finalOptions","loadReplayOptionsFromClient","canvasIntegration","getIntegrationByName","initialOptions","opt","replaysSessionSampleRate","replaysOnErrorSampleRate","getReplay$1","getReplay","replayIntegration","Replay"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/constants.ts","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb-snapshot/es/rrweb-snapshot.js","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/utils.js","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb/es/rrweb/packages/types/dist/rrweb-types.js","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/mutation.js","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/error-handler.js","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observer.js","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/cross-origin-iframe-mirror.js","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/iframe-manager.js","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/shadow-dom-manager.js","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/canvas-manager.js","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/stylesheet-manager.js","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/processed-node-manager.js","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/index.js","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/types/rrweb.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/timestamp.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/util/addBreadcrumbEvent.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/util/domUtils.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/util/onWindowOpen.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/handleClick.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/createBreadcrumb.ts","/Users/jeffreydebolt/Documents/fifo/node_modules/@sentry-internal/rrweb-snapshot/es/rrweb-snapshot.js","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/util/getAttributesToRecord.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/handleDom.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/handleKeyboardEvent.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/createPerformanceEntries.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/performanceObserver.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/debug-build.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/replay-worker/build/npm/esm/worker.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/replay-worker/build/npm/esm/index.js","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/log.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/eventBuffer/error.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/eventBuffer/EventBufferArray.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/eventBuffer/WorkerHandler.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/eventBuffer/EventBufferCompressionWorker.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/eventBuffer/EventBufferProxy.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/eventBuffer/index.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/hasSessionStorage.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/session/clearSession.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/isSampled.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/session/Session.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/session/saveSession.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/session/createSession.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/session/fetchSession.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/isExpired.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/isSessionExpired.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/session/shouldRefreshSession.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/session/loadOrCreateSession.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/addEvent.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/eventUtils.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/handleAfterSendEvent.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/handleBeforeSendEvent.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/isRrwebError.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/util/addFeedbackBreadcrumb.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/util/shouldSampleForBufferEvent.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/handleGlobalEvent.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/createPerformanceSpans.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/handleHistory.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/shouldFilterRequest.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/util/addNetworkBreadcrumb.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/handleFetch.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/handleXhr.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/util/networkUtils.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/util/fetchUtils.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/util/xhrUtils.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/handleNetworkBreadcrumbs.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/coreHandlers/handleScope.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/addGlobalListeners.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/addMemoryEntry.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/debounce.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/handleRecordingEmit.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/createReplayEnvelope.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/prepareRecordingData.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/prepareReplayEvent.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/sendReplayRequest.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/sendReplay.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/throttle.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/replay.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/getPrivacyOptions.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/maskAttribute.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/integration.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/util/getReplay.ts","/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/index.ts"],"sourcesContent":["import { GLOBAL_OBJ } from '@sentry/utils';\n\n// exporting a separate copy of `WINDOW` rather than exporting the one from `@sentry/browser`\n// prevents the browser package from being bundled in the CDN bundle, and avoids a\n// circular dependency between the browser and replay packages should `@sentry/browser` import\n// from `@sentry/replay` in the future\nexport const WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n\nexport const REPLAY_SESSION_KEY = 'sentryReplaySession';\nexport const REPLAY_EVENT_NAME = 'replay_event';\nexport const RECORDING_EVENT_NAME = 'replay_recording';\nexport const UNABLE_TO_SEND_REPLAY = 'Unable to send Replay';\n\n// The idle limit for a session after which recording is paused.\nexport const SESSION_IDLE_PAUSE_DURATION = 300_000; // 5 minutes in ms\n\n// The idle limit for a session after which the session expires.\nexport const SESSION_IDLE_EXPIRE_DURATION = 900_000; // 15 minutes in ms\n\n/** Default flush delays */\nexport const DEFAULT_FLUSH_MIN_DELAY = 5_000;\n// XXX: Temp fix for our debounce logic where `maxWait` would never occur if it\n// was the same as `wait`\nexport const DEFAULT_FLUSH_MAX_DELAY = 5_500;\n\n/* How long to wait for error checkouts */\nexport const BUFFER_CHECKOUT_TIME = 60_000;\n\nexport const RETRY_BASE_INTERVAL = 5000;\nexport const RETRY_MAX_COUNT = 3;\n\n/* The max (uncompressed) size in bytes of a network body. Any body larger than this will be truncated. */\nexport const NETWORK_BODY_MAX_SIZE = 150_000;\n\n/* The max size of a single console arg that is captured. Any arg larger than this will be truncated. */\nexport const CONSOLE_ARG_MAX_SIZE = 5_000;\n\n/* Min. time to wait before we consider something a slow click. */\nexport const SLOW_CLICK_THRESHOLD = 3_000;\n/* For scroll actions after a click, we only look for a very short time period to detect programmatic scrolling. */\nexport const SLOW_CLICK_SCROLL_TIMEOUT = 300;\n\n/** When encountering a total segment size exceeding this size, stop the replay (as we cannot properly ingest it). */\nexport const REPLAY_MAX_EVENT_BUFFER_SIZE = 20_000_000; // ~20MB\n\n/** Replays must be min. 5s long before we send them. */\nexport const MIN_REPLAY_DURATION = 4_999;\n/* The max. allowed value that the minReplayDuration can be set to. */\nexport const MIN_REPLAY_DURATION_LIMIT = 15_000;\n\n/** The max. length of a replay. */\nexport const MAX_REPLAY_DURATION = 3_600_000; // 60 minutes in ms;\n\n/** Default attributes to be ignored when `maskAllText` is enabled */\nexport const DEFAULT_IGNORED_ATTRIBUTES = ['title', 'placeholder'];\n","var NodeType;\r\n(function (NodeType) {\r\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\r\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\r\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\r\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\r\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\r\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\r\n})(NodeType || (NodeType = {}));\n\nfunction isElement(n) {\r\n    return n.nodeType === n.ELEMENT_NODE;\r\n}\r\nfunction isShadowRoot(n) {\r\n    const host = n?.host;\r\n    return Boolean(host?.shadowRoot === n);\r\n}\r\nfunction isNativeShadowDom(shadowRoot) {\r\n    return Object.prototype.toString.call(shadowRoot) === '[object ShadowRoot]';\r\n}\r\nfunction fixBrowserCompatibilityIssuesInCSS(cssText) {\r\n    if (cssText.includes(' background-clip: text;') &&\r\n        !cssText.includes(' -webkit-background-clip: text;')) {\r\n        cssText = cssText.replace(' background-clip: text;', ' -webkit-background-clip: text; background-clip: text;');\r\n    }\r\n    return cssText;\r\n}\r\nfunction escapeImportStatement(rule) {\r\n    const { cssText } = rule;\r\n    if (cssText.split('\"').length < 3)\r\n        return cssText;\r\n    const statement = ['@import', `url(${JSON.stringify(rule.href)})`];\r\n    if (rule.layerName === '') {\r\n        statement.push(`layer`);\r\n    }\r\n    else if (rule.layerName) {\r\n        statement.push(`layer(${rule.layerName})`);\r\n    }\r\n    if (rule.supportsText) {\r\n        statement.push(`supports(${rule.supportsText})`);\r\n    }\r\n    if (rule.media.length) {\r\n        statement.push(rule.media.mediaText);\r\n    }\r\n    return statement.join(' ') + ';';\r\n}\r\nfunction stringifyStylesheet(s) {\r\n    try {\r\n        const rules = s.rules || s.cssRules;\r\n        return rules\r\n            ? fixBrowserCompatibilityIssuesInCSS(Array.from(rules, stringifyRule).join(''))\r\n            : null;\r\n    }\r\n    catch (error) {\r\n        return null;\r\n    }\r\n}\r\nfunction stringifyRule(rule) {\r\n    let importStringified;\r\n    if (isCSSImportRule(rule)) {\r\n        try {\r\n            importStringified =\r\n                stringifyStylesheet(rule.styleSheet) ||\r\n                    escapeImportStatement(rule);\r\n        }\r\n        catch (error) {\r\n        }\r\n    }\r\n    else if (isCSSStyleRule(rule) && rule.selectorText.includes(':')) {\r\n        return fixSafariColons(rule.cssText);\r\n    }\r\n    return importStringified || rule.cssText;\r\n}\r\nfunction fixSafariColons(cssStringified) {\r\n    const regex = /(\\[(?:[\\w-]+)[^\\\\])(:(?:[\\w-]+)\\])/gm;\r\n    return cssStringified.replace(regex, '$1\\\\$2');\r\n}\r\nfunction isCSSImportRule(rule) {\r\n    return 'styleSheet' in rule;\r\n}\r\nfunction isCSSStyleRule(rule) {\r\n    return 'selectorText' in rule;\r\n}\r\nclass Mirror {\r\n    constructor() {\r\n        this.idNodeMap = new Map();\r\n        this.nodeMetaMap = new WeakMap();\r\n    }\r\n    getId(n) {\r\n        if (!n)\r\n            return -1;\r\n        const id = this.getMeta(n)?.id;\r\n        return id ?? -1;\r\n    }\r\n    getNode(id) {\r\n        return this.idNodeMap.get(id) || null;\r\n    }\r\n    getIds() {\r\n        return Array.from(this.idNodeMap.keys());\r\n    }\r\n    getMeta(n) {\r\n        return this.nodeMetaMap.get(n) || null;\r\n    }\r\n    removeNodeFromMap(n) {\r\n        const id = this.getId(n);\r\n        this.idNodeMap.delete(id);\r\n        if (n.childNodes) {\r\n            n.childNodes.forEach((childNode) => this.removeNodeFromMap(childNode));\r\n        }\r\n    }\r\n    has(id) {\r\n        return this.idNodeMap.has(id);\r\n    }\r\n    hasNode(node) {\r\n        return this.nodeMetaMap.has(node);\r\n    }\r\n    add(n, meta) {\r\n        const id = meta.id;\r\n        this.idNodeMap.set(id, n);\r\n        this.nodeMetaMap.set(n, meta);\r\n    }\r\n    replace(id, n) {\r\n        const oldNode = this.getNode(id);\r\n        if (oldNode) {\r\n            const meta = this.nodeMetaMap.get(oldNode);\r\n            if (meta)\r\n                this.nodeMetaMap.set(n, meta);\r\n        }\r\n        this.idNodeMap.set(id, n);\r\n    }\r\n    reset() {\r\n        this.idNodeMap = new Map();\r\n        this.nodeMetaMap = new WeakMap();\r\n    }\r\n}\r\nfunction createMirror() {\r\n    return new Mirror();\r\n}\r\nfunction shouldMaskInput({ maskInputOptions, tagName, type, }) {\r\n    if (tagName === 'OPTION') {\r\n        tagName = 'SELECT';\r\n    }\r\n    return Boolean(maskInputOptions[tagName.toLowerCase()] ||\r\n        (type && maskInputOptions[type]) ||\r\n        type === 'password' ||\r\n        (tagName === 'INPUT' && !type && maskInputOptions['text']));\r\n}\r\nfunction maskInputValue({ isMasked, element, value, maskInputFn, }) {\r\n    let text = value || '';\r\n    if (!isMasked) {\r\n        return text;\r\n    }\r\n    if (maskInputFn) {\r\n        text = maskInputFn(text, element);\r\n    }\r\n    return '*'.repeat(text.length);\r\n}\r\nfunction toLowerCase(str) {\r\n    return str.toLowerCase();\r\n}\r\nfunction toUpperCase(str) {\r\n    return str.toUpperCase();\r\n}\r\nconst ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\r\nfunction is2DCanvasBlank(canvas) {\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx)\r\n        return true;\r\n    const chunkSize = 50;\r\n    for (let x = 0; x < canvas.width; x += chunkSize) {\r\n        for (let y = 0; y < canvas.height; y += chunkSize) {\r\n            const getImageData = ctx.getImageData;\r\n            const originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData\r\n                ? getImageData[ORIGINAL_ATTRIBUTE_NAME]\r\n                : getImageData;\r\n            const pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);\r\n            if (pixelBuffer.some((pixel) => pixel !== 0))\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isNodeMetaEqual(a, b) {\r\n    if (!a || !b || a.type !== b.type)\r\n        return false;\r\n    if (a.type === NodeType.Document)\r\n        return a.compatMode === b.compatMode;\r\n    else if (a.type === NodeType.DocumentType)\r\n        return (a.name === b.name &&\r\n            a.publicId === b.publicId &&\r\n            a.systemId === b.systemId);\r\n    else if (a.type === NodeType.Comment ||\r\n        a.type === NodeType.Text ||\r\n        a.type === NodeType.CDATA)\r\n        return a.textContent === b.textContent;\r\n    else if (a.type === NodeType.Element)\r\n        return (a.tagName === b.tagName &&\r\n            JSON.stringify(a.attributes) ===\r\n                JSON.stringify(b.attributes) &&\r\n            a.isSVG === b.isSVG &&\r\n            a.needBlock === b.needBlock);\r\n    return false;\r\n}\r\nfunction getInputType(element) {\r\n    const type = element.type;\r\n    return element.hasAttribute('data-rr-is-password')\r\n        ? 'password'\r\n        : type\r\n            ?\r\n                toLowerCase(type)\r\n            : null;\r\n}\r\nfunction getInputValue(el, tagName, type) {\r\n    if (tagName === 'INPUT' && (type === 'radio' || type === 'checkbox')) {\r\n        return el.getAttribute('value') || '';\r\n    }\r\n    return el.value;\r\n}\n\nlet _id = 1;\r\nconst tagNameRegex = new RegExp('[^a-z0-9-_:]');\r\nconst IGNORED_NODE = -2;\r\nfunction genId() {\r\n    return _id++;\r\n}\r\nfunction getValidTagName(element) {\r\n    if (element instanceof HTMLFormElement) {\r\n        return 'form';\r\n    }\r\n    const processedTagName = toLowerCase(element.tagName);\r\n    if (tagNameRegex.test(processedTagName)) {\r\n        return 'div';\r\n    }\r\n    return processedTagName;\r\n}\r\nfunction extractOrigin(url) {\r\n    let origin = '';\r\n    if (url.indexOf('//') > -1) {\r\n        origin = url.split('/').slice(0, 3).join('/');\r\n    }\r\n    else {\r\n        origin = url.split('/')[0];\r\n    }\r\n    origin = origin.split('?')[0];\r\n    return origin;\r\n}\r\nlet canvasService;\r\nlet canvasCtx;\r\nconst URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")(.*?)\"|([^)]*))\\)/gm;\r\nconst URL_PROTOCOL_MATCH = /^(?:[a-z+]+:)?\\/\\//i;\r\nconst URL_WWW_MATCH = /^www\\..*/i;\r\nconst DATA_URI = /^(data:)([^,]*),(.*)/i;\r\nfunction absoluteToStylesheet(cssText, href) {\r\n    return (cssText || '').replace(URL_IN_CSS_REF, (origin, quote1, path1, quote2, path2, path3) => {\r\n        const filePath = path1 || path2 || path3;\r\n        const maybeQuote = quote1 || quote2 || '';\r\n        if (!filePath) {\r\n            return origin;\r\n        }\r\n        if (URL_PROTOCOL_MATCH.test(filePath) || URL_WWW_MATCH.test(filePath)) {\r\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\r\n        }\r\n        if (DATA_URI.test(filePath)) {\r\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\r\n        }\r\n        if (filePath[0] === '/') {\r\n            return `url(${maybeQuote}${extractOrigin(href) + filePath}${maybeQuote})`;\r\n        }\r\n        const stack = href.split('/');\r\n        const parts = filePath.split('/');\r\n        stack.pop();\r\n        for (const part of parts) {\r\n            if (part === '.') {\r\n                continue;\r\n            }\r\n            else if (part === '..') {\r\n                stack.pop();\r\n            }\r\n            else {\r\n                stack.push(part);\r\n            }\r\n        }\r\n        return `url(${maybeQuote}${stack.join('/')}${maybeQuote})`;\r\n    });\r\n}\r\nconst SRCSET_NOT_SPACES = /^[^ \\t\\n\\r\\u000c]+/;\r\nconst SRCSET_COMMAS_OR_SPACES = /^[, \\t\\n\\r\\u000c]+/;\r\nfunction getAbsoluteSrcsetString(doc, attributeValue) {\r\n    if (attributeValue.trim() === '') {\r\n        return attributeValue;\r\n    }\r\n    let pos = 0;\r\n    function collectCharacters(regEx) {\r\n        let chars;\r\n        const match = regEx.exec(attributeValue.substring(pos));\r\n        if (match) {\r\n            chars = match[0];\r\n            pos += chars.length;\r\n            return chars;\r\n        }\r\n        return '';\r\n    }\r\n    const output = [];\r\n    while (true) {\r\n        collectCharacters(SRCSET_COMMAS_OR_SPACES);\r\n        if (pos >= attributeValue.length) {\r\n            break;\r\n        }\r\n        let url = collectCharacters(SRCSET_NOT_SPACES);\r\n        if (url.slice(-1) === ',') {\r\n            url = absoluteToDoc(doc, url.substring(0, url.length - 1));\r\n            output.push(url);\r\n        }\r\n        else {\r\n            let descriptorsStr = '';\r\n            url = absoluteToDoc(doc, url);\r\n            let inParens = false;\r\n            while (true) {\r\n                const c = attributeValue.charAt(pos);\r\n                if (c === '') {\r\n                    output.push((url + descriptorsStr).trim());\r\n                    break;\r\n                }\r\n                else if (!inParens) {\r\n                    if (c === ',') {\r\n                        pos += 1;\r\n                        output.push((url + descriptorsStr).trim());\r\n                        break;\r\n                    }\r\n                    else if (c === '(') {\r\n                        inParens = true;\r\n                    }\r\n                }\r\n                else {\r\n                    if (c === ')') {\r\n                        inParens = false;\r\n                    }\r\n                }\r\n                descriptorsStr += c;\r\n                pos += 1;\r\n            }\r\n        }\r\n    }\r\n    return output.join(', ');\r\n}\r\nfunction absoluteToDoc(doc, attributeValue) {\r\n    if (!attributeValue || attributeValue.trim() === '') {\r\n        return attributeValue;\r\n    }\r\n    const a = doc.createElement('a');\r\n    a.href = attributeValue;\r\n    return a.href;\r\n}\r\nfunction isSVGElement(el) {\r\n    return Boolean(el.tagName === 'svg' || el.ownerSVGElement);\r\n}\r\nfunction getHref() {\r\n    const a = document.createElement('a');\r\n    a.href = '';\r\n    return a.href;\r\n}\r\nfunction transformAttribute(doc, tagName, name, value, element, maskAttributeFn) {\r\n    if (!value) {\r\n        return value;\r\n    }\r\n    if (name === 'src' ||\r\n        (name === 'href' && !(tagName === 'use' && value[0] === '#'))) {\r\n        return absoluteToDoc(doc, value);\r\n    }\r\n    else if (name === 'xlink:href' && value[0] !== '#') {\r\n        return absoluteToDoc(doc, value);\r\n    }\r\n    else if (name === 'background' &&\r\n        (tagName === 'table' || tagName === 'td' || tagName === 'th')) {\r\n        return absoluteToDoc(doc, value);\r\n    }\r\n    else if (name === 'srcset') {\r\n        return getAbsoluteSrcsetString(doc, value);\r\n    }\r\n    else if (name === 'style') {\r\n        return absoluteToStylesheet(value, getHref());\r\n    }\r\n    else if (tagName === 'object' && name === 'data') {\r\n        return absoluteToDoc(doc, value);\r\n    }\r\n    if (typeof maskAttributeFn === 'function') {\r\n        return maskAttributeFn(name, value, element);\r\n    }\r\n    return value;\r\n}\r\nfunction ignoreAttribute(tagName, name, _value) {\r\n    return (tagName === 'video' || tagName === 'audio') && name === 'autoplay';\r\n}\r\nfunction _isBlockedElement(element, blockClass, blockSelector, unblockSelector) {\r\n    try {\r\n        if (unblockSelector && element.matches(unblockSelector)) {\r\n            return false;\r\n        }\r\n        if (typeof blockClass === 'string') {\r\n            if (element.classList.contains(blockClass)) {\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            for (let eIndex = element.classList.length; eIndex--;) {\r\n                const className = element.classList[eIndex];\r\n                if (blockClass.test(className)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        if (blockSelector) {\r\n            return element.matches(blockSelector);\r\n        }\r\n    }\r\n    catch (e) {\r\n    }\r\n    return false;\r\n}\r\nfunction elementClassMatchesRegex(el, regex) {\r\n    for (let eIndex = el.classList.length; eIndex--;) {\r\n        const className = el.classList[eIndex];\r\n        if (regex.test(className)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction distanceToMatch(node, matchPredicate, limit = Infinity, distance = 0) {\r\n    if (!node)\r\n        return -1;\r\n    if (node.nodeType !== node.ELEMENT_NODE)\r\n        return -1;\r\n    if (distance > limit)\r\n        return -1;\r\n    if (matchPredicate(node))\r\n        return distance;\r\n    return distanceToMatch(node.parentNode, matchPredicate, limit, distance + 1);\r\n}\r\nfunction createMatchPredicate(className, selector) {\r\n    return (node) => {\r\n        const el = node;\r\n        if (el === null)\r\n            return false;\r\n        try {\r\n            if (className) {\r\n                if (typeof className === 'string') {\r\n                    if (el.matches(`.${className}`))\r\n                        return true;\r\n                }\r\n                else if (elementClassMatchesRegex(el, className)) {\r\n                    return true;\r\n                }\r\n            }\r\n            if (selector && el.matches(selector))\r\n                return true;\r\n            return false;\r\n        }\r\n        catch {\r\n            return false;\r\n        }\r\n    };\r\n}\r\nfunction needMaskingText(node, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText) {\r\n    try {\r\n        const el = node.nodeType === node.ELEMENT_NODE\r\n            ? node\r\n            : node.parentElement;\r\n        if (el === null)\r\n            return false;\r\n        if (el.tagName === 'INPUT') {\r\n            const autocomplete = el.getAttribute('autocomplete');\r\n            const disallowedAutocompleteValues = [\r\n                'current-password',\r\n                'new-password',\r\n                'cc-number',\r\n                'cc-exp',\r\n                'cc-exp-month',\r\n                'cc-exp-year',\r\n                'cc-csc',\r\n            ];\r\n            if (disallowedAutocompleteValues.includes(autocomplete)) {\r\n                return true;\r\n            }\r\n        }\r\n        let maskDistance = -1;\r\n        let unmaskDistance = -1;\r\n        if (maskAllText) {\r\n            unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector));\r\n            if (unmaskDistance < 0) {\r\n                return true;\r\n            }\r\n            maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector), unmaskDistance >= 0 ? unmaskDistance : Infinity);\r\n        }\r\n        else {\r\n            maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector));\r\n            if (maskDistance < 0) {\r\n                return false;\r\n            }\r\n            unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector), maskDistance >= 0 ? maskDistance : Infinity);\r\n        }\r\n        return maskDistance >= 0\r\n            ? unmaskDistance >= 0\r\n                ? maskDistance <= unmaskDistance\r\n                : true\r\n            : unmaskDistance >= 0\r\n                ? false\r\n                : !!maskAllText;\r\n    }\r\n    catch (e) {\r\n    }\r\n    return !!maskAllText;\r\n}\r\nfunction onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {\r\n    const win = iframeEl.contentWindow;\r\n    if (!win) {\r\n        return;\r\n    }\r\n    let fired = false;\r\n    let readyState;\r\n    try {\r\n        readyState = win.document.readyState;\r\n    }\r\n    catch (error) {\r\n        return;\r\n    }\r\n    if (readyState !== 'complete') {\r\n        const timer = setTimeout(() => {\r\n            if (!fired) {\r\n                listener();\r\n                fired = true;\r\n            }\r\n        }, iframeLoadTimeout);\r\n        iframeEl.addEventListener('load', () => {\r\n            clearTimeout(timer);\r\n            fired = true;\r\n            listener();\r\n        });\r\n        return;\r\n    }\r\n    const blankUrl = 'about:blank';\r\n    if (win.location.href !== blankUrl ||\r\n        iframeEl.src === blankUrl ||\r\n        iframeEl.src === '') {\r\n        setTimeout(listener, 0);\r\n        return iframeEl.addEventListener('load', listener);\r\n    }\r\n    iframeEl.addEventListener('load', listener);\r\n}\r\nfunction onceStylesheetLoaded(link, listener, styleSheetLoadTimeout) {\r\n    let fired = false;\r\n    let styleSheetLoaded;\r\n    try {\r\n        styleSheetLoaded = link.sheet;\r\n    }\r\n    catch (error) {\r\n        return;\r\n    }\r\n    if (styleSheetLoaded)\r\n        return;\r\n    const timer = setTimeout(() => {\r\n        if (!fired) {\r\n            listener();\r\n            fired = true;\r\n        }\r\n    }, styleSheetLoadTimeout);\r\n    link.addEventListener('load', () => {\r\n        clearTimeout(timer);\r\n        fired = true;\r\n        listener();\r\n    });\r\n}\r\nfunction serializeNode(n, options) {\r\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, maskAllText, maskAttributeFn, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, inlineStylesheet, maskInputOptions = {}, maskTextFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, newlyAddedElement = false, } = options;\r\n    const rootId = getRootId(doc, mirror);\r\n    switch (n.nodeType) {\r\n        case n.DOCUMENT_NODE:\r\n            if (n.compatMode !== 'CSS1Compat') {\r\n                return {\r\n                    type: NodeType.Document,\r\n                    childNodes: [],\r\n                    compatMode: n.compatMode,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    type: NodeType.Document,\r\n                    childNodes: [],\r\n                };\r\n            }\r\n        case n.DOCUMENT_TYPE_NODE:\r\n            return {\r\n                type: NodeType.DocumentType,\r\n                name: n.name,\r\n                publicId: n.publicId,\r\n                systemId: n.systemId,\r\n                rootId,\r\n            };\r\n        case n.ELEMENT_NODE:\r\n            return serializeElementNode(n, {\r\n                doc,\r\n                blockClass,\r\n                blockSelector,\r\n                unblockSelector,\r\n                inlineStylesheet,\r\n                maskAttributeFn,\r\n                maskInputOptions,\r\n                maskInputFn,\r\n                dataURLOptions,\r\n                inlineImages,\r\n                recordCanvas,\r\n                keepIframeSrcFn,\r\n                newlyAddedElement,\r\n                rootId,\r\n                maskAllText,\r\n                maskTextClass,\r\n                unmaskTextClass,\r\n                maskTextSelector,\r\n                unmaskTextSelector,\r\n            });\r\n        case n.TEXT_NODE:\r\n            return serializeTextNode(n, {\r\n                maskAllText,\r\n                maskTextClass,\r\n                unmaskTextClass,\r\n                maskTextSelector,\r\n                unmaskTextSelector,\r\n                maskTextFn,\r\n                maskInputOptions,\r\n                maskInputFn,\r\n                rootId,\r\n            });\r\n        case n.CDATA_SECTION_NODE:\r\n            return {\r\n                type: NodeType.CDATA,\r\n                textContent: '',\r\n                rootId,\r\n            };\r\n        case n.COMMENT_NODE:\r\n            return {\r\n                type: NodeType.Comment,\r\n                textContent: n.textContent || '',\r\n                rootId,\r\n            };\r\n        default:\r\n            return false;\r\n    }\r\n}\r\nfunction getRootId(doc, mirror) {\r\n    if (!mirror.hasNode(doc))\r\n        return undefined;\r\n    const docId = mirror.getId(doc);\r\n    return docId === 1 ? undefined : docId;\r\n}\r\nfunction serializeTextNode(n, options) {\r\n    const { maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, maskTextFn, maskInputOptions, maskInputFn, rootId, } = options;\r\n    const parentTagName = n.parentNode && n.parentNode.tagName;\r\n    let textContent = n.textContent;\r\n    const isStyle = parentTagName === 'STYLE' ? true : undefined;\r\n    const isScript = parentTagName === 'SCRIPT' ? true : undefined;\r\n    const isTextarea = parentTagName === 'TEXTAREA' ? true : undefined;\r\n    if (isStyle && textContent) {\r\n        try {\r\n            if (n.nextSibling || n.previousSibling) {\r\n            }\r\n            else if (n.parentNode.sheet?.cssRules) {\r\n                textContent = stringifyStylesheet(n.parentNode.sheet);\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.warn(`Cannot get CSS styles from text's parentNode. Error: ${err}`, n);\r\n        }\r\n        textContent = absoluteToStylesheet(textContent, getHref());\r\n    }\r\n    if (isScript) {\r\n        textContent = 'SCRIPT_PLACEHOLDER';\r\n    }\r\n    const forceMask = needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText);\r\n    if (!isStyle && !isScript && !isTextarea && textContent && forceMask) {\r\n        textContent = maskTextFn\r\n            ? maskTextFn(textContent, n.parentElement)\r\n            : textContent.replace(/[\\S]/g, '*');\r\n    }\r\n    if (isTextarea && textContent && (maskInputOptions.textarea || forceMask)) {\r\n        textContent = maskInputFn\r\n            ? maskInputFn(textContent, n.parentNode)\r\n            : textContent.replace(/[\\S]/g, '*');\r\n    }\r\n    if (parentTagName === 'OPTION' && textContent) {\r\n        const isInputMasked = shouldMaskInput({\r\n            type: null,\r\n            tagName: parentTagName,\r\n            maskInputOptions,\r\n        });\r\n        textContent = maskInputValue({\r\n            isMasked: needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, isInputMasked),\r\n            element: n,\r\n            value: textContent,\r\n            maskInputFn,\r\n        });\r\n    }\r\n    return {\r\n        type: NodeType.Text,\r\n        textContent: textContent || '',\r\n        isStyle,\r\n        rootId,\r\n    };\r\n}\r\nfunction serializeElementNode(n, options) {\r\n    const { doc, blockClass, blockSelector, unblockSelector, inlineStylesheet, maskInputOptions = {}, maskAttributeFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, newlyAddedElement = false, rootId, maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, } = options;\r\n    const needBlock = _isBlockedElement(n, blockClass, blockSelector, unblockSelector);\r\n    const tagName = getValidTagName(n);\r\n    let attributes = {};\r\n    const len = n.attributes.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const attr = n.attributes[i];\r\n        if (attr.name && !ignoreAttribute(tagName, attr.name, attr.value)) {\r\n            attributes[attr.name] = transformAttribute(doc, tagName, toLowerCase(attr.name), attr.value, n, maskAttributeFn);\r\n        }\r\n    }\r\n    if (tagName === 'link' && inlineStylesheet) {\r\n        const stylesheet = Array.from(doc.styleSheets).find((s) => {\r\n            return s.href === n.href;\r\n        });\r\n        let cssText = null;\r\n        if (stylesheet) {\r\n            cssText = stringifyStylesheet(stylesheet);\r\n        }\r\n        if (cssText) {\r\n            delete attributes.rel;\r\n            delete attributes.href;\r\n            attributes._cssText = absoluteToStylesheet(cssText, stylesheet.href);\r\n        }\r\n    }\r\n    if (tagName === 'style' &&\r\n        n.sheet &&\r\n        !(n.innerText || n.textContent || '').trim().length) {\r\n        const cssText = stringifyStylesheet(n.sheet);\r\n        if (cssText) {\r\n            attributes._cssText = absoluteToStylesheet(cssText, getHref());\r\n        }\r\n    }\r\n    if (tagName === 'input' ||\r\n        tagName === 'textarea' ||\r\n        tagName === 'select' ||\r\n        tagName === 'option') {\r\n        const el = n;\r\n        const type = getInputType(el);\r\n        const value = getInputValue(el, toUpperCase(tagName), type);\r\n        const checked = el.checked;\r\n        if (type !== 'submit' && type !== 'button' && value) {\r\n            const forceMask = needMaskingText(el, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, shouldMaskInput({\r\n                type,\r\n                tagName: toUpperCase(tagName),\r\n                maskInputOptions,\r\n            }));\r\n            attributes.value = maskInputValue({\r\n                isMasked: forceMask,\r\n                element: el,\r\n                value,\r\n                maskInputFn,\r\n            });\r\n        }\r\n        if (checked) {\r\n            attributes.checked = checked;\r\n        }\r\n    }\r\n    if (tagName === 'option') {\r\n        if (n.selected && !maskInputOptions['select']) {\r\n            attributes.selected = true;\r\n        }\r\n        else {\r\n            delete attributes.selected;\r\n        }\r\n    }\r\n    if (tagName === 'canvas' && recordCanvas) {\r\n        if (n.__context === '2d') {\r\n            if (!is2DCanvasBlank(n)) {\r\n                attributes.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\r\n            }\r\n        }\r\n        else if (!('__context' in n)) {\r\n            const canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\r\n            const blankCanvas = document.createElement('canvas');\r\n            blankCanvas.width = n.width;\r\n            blankCanvas.height = n.height;\r\n            const blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);\r\n            if (canvasDataURL !== blankCanvasDataURL) {\r\n                attributes.rr_dataURL = canvasDataURL;\r\n            }\r\n        }\r\n    }\r\n    if (tagName === 'img' && inlineImages) {\r\n        if (!canvasService) {\r\n            canvasService = doc.createElement('canvas');\r\n            canvasCtx = canvasService.getContext('2d');\r\n        }\r\n        const image = n;\r\n        const oldValue = image.crossOrigin;\r\n        image.crossOrigin = 'anonymous';\r\n        const recordInlineImage = () => {\r\n            image.removeEventListener('load', recordInlineImage);\r\n            try {\r\n                canvasService.width = image.naturalWidth;\r\n                canvasService.height = image.naturalHeight;\r\n                canvasCtx.drawImage(image, 0, 0);\r\n                attributes.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);\r\n            }\r\n            catch (err) {\r\n                console.warn(`Cannot inline img src=${image.currentSrc}! Error: ${err}`);\r\n            }\r\n            oldValue\r\n                ? (attributes.crossOrigin = oldValue)\r\n                : image.removeAttribute('crossorigin');\r\n        };\r\n        if (image.complete && image.naturalWidth !== 0)\r\n            recordInlineImage();\r\n        else\r\n            image.addEventListener('load', recordInlineImage);\r\n    }\r\n    if (tagName === 'audio' || tagName === 'video') {\r\n        attributes.rr_mediaState = n.paused\r\n            ? 'paused'\r\n            : 'played';\r\n        attributes.rr_mediaCurrentTime = n.currentTime;\r\n    }\r\n    if (!newlyAddedElement) {\r\n        if (n.scrollLeft) {\r\n            attributes.rr_scrollLeft = n.scrollLeft;\r\n        }\r\n        if (n.scrollTop) {\r\n            attributes.rr_scrollTop = n.scrollTop;\r\n        }\r\n    }\r\n    if (needBlock) {\r\n        const { width, height } = n.getBoundingClientRect();\r\n        attributes = {\r\n            class: attributes.class,\r\n            rr_width: `${width}px`,\r\n            rr_height: `${height}px`,\r\n        };\r\n    }\r\n    if (tagName === 'iframe' && !keepIframeSrcFn(attributes.src)) {\r\n        if (!n.contentDocument) {\r\n            attributes.rr_src = attributes.src;\r\n        }\r\n        delete attributes.src;\r\n    }\r\n    let isCustomElement;\r\n    try {\r\n        if (customElements.get(tagName))\r\n            isCustomElement = true;\r\n    }\r\n    catch (e) {\r\n    }\r\n    return {\r\n        type: NodeType.Element,\r\n        tagName,\r\n        attributes,\r\n        childNodes: [],\r\n        isSVG: isSVGElement(n) || undefined,\r\n        needBlock,\r\n        rootId,\r\n        isCustom: isCustomElement,\r\n    };\r\n}\r\nfunction lowerIfExists(maybeAttr) {\r\n    if (maybeAttr === undefined || maybeAttr === null) {\r\n        return '';\r\n    }\r\n    else {\r\n        return maybeAttr.toLowerCase();\r\n    }\r\n}\r\nfunction slimDOMExcluded(sn, slimDOMOptions) {\r\n    if (slimDOMOptions.comment && sn.type === NodeType.Comment) {\r\n        return true;\r\n    }\r\n    else if (sn.type === NodeType.Element) {\r\n        if (slimDOMOptions.script &&\r\n            (sn.tagName === 'script' ||\r\n                (sn.tagName === 'link' &&\r\n                    (sn.attributes.rel === 'preload' ||\r\n                        sn.attributes.rel === 'modulepreload') &&\r\n                    sn.attributes.as === 'script') ||\r\n                (sn.tagName === 'link' &&\r\n                    sn.attributes.rel === 'prefetch' &&\r\n                    typeof sn.attributes.href === 'string' &&\r\n                    sn.attributes.href.endsWith('.js')))) {\r\n            return true;\r\n        }\r\n        else if (slimDOMOptions.headFavicon &&\r\n            ((sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon') ||\r\n                (sn.tagName === 'meta' &&\r\n                    (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) ||\r\n                        lowerIfExists(sn.attributes.name) === 'application-name' ||\r\n                        lowerIfExists(sn.attributes.rel) === 'icon' ||\r\n                        lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' ||\r\n                        lowerIfExists(sn.attributes.rel) === 'shortcut icon')))) {\r\n            return true;\r\n        }\r\n        else if (sn.tagName === 'meta') {\r\n            if (slimDOMOptions.headMetaDescKeywords &&\r\n                lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {\r\n                return true;\r\n            }\r\n            else if (slimDOMOptions.headMetaSocial &&\r\n                (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) ||\r\n                    lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) ||\r\n                    lowerIfExists(sn.attributes.name) === 'pinterest')) {\r\n                return true;\r\n            }\r\n            else if (slimDOMOptions.headMetaRobots &&\r\n                (lowerIfExists(sn.attributes.name) === 'robots' ||\r\n                    lowerIfExists(sn.attributes.name) === 'googlebot' ||\r\n                    lowerIfExists(sn.attributes.name) === 'bingbot')) {\r\n                return true;\r\n            }\r\n            else if (slimDOMOptions.headMetaHttpEquiv &&\r\n                sn.attributes['http-equiv'] !== undefined) {\r\n                return true;\r\n            }\r\n            else if (slimDOMOptions.headMetaAuthorship &&\r\n                (lowerIfExists(sn.attributes.name) === 'author' ||\r\n                    lowerIfExists(sn.attributes.name) === 'generator' ||\r\n                    lowerIfExists(sn.attributes.name) === 'framework' ||\r\n                    lowerIfExists(sn.attributes.name) === 'publisher' ||\r\n                    lowerIfExists(sn.attributes.name) === 'progid' ||\r\n                    lowerIfExists(sn.attributes.property).match(/^article:/) ||\r\n                    lowerIfExists(sn.attributes.property).match(/^product:/))) {\r\n                return true;\r\n            }\r\n            else if (slimDOMOptions.headMetaVerification &&\r\n                (lowerIfExists(sn.attributes.name) === 'google-site-verification' ||\r\n                    lowerIfExists(sn.attributes.name) === 'yandex-verification' ||\r\n                    lowerIfExists(sn.attributes.name) === 'csrf-token' ||\r\n                    lowerIfExists(sn.attributes.name) === 'p:domain_verify' ||\r\n                    lowerIfExists(sn.attributes.name) === 'verify-v1' ||\r\n                    lowerIfExists(sn.attributes.name) === 'verification' ||\r\n                    lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction serializeNodeWithId(n, options) {\r\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, skipChild = false, inlineStylesheet = true, maskInputOptions = {}, maskAttributeFn, maskTextFn, maskInputFn, slimDOMOptions, dataURLOptions = {}, inlineImages = false, recordCanvas = false, onSerialize, onIframeLoad, iframeLoadTimeout = 5000, onStylesheetLoad, stylesheetLoadTimeout = 5000, keepIframeSrcFn = () => false, newlyAddedElement = false, } = options;\r\n    let { preserveWhiteSpace = true } = options;\r\n    const _serializedNode = serializeNode(n, {\r\n        doc,\r\n        mirror,\r\n        blockClass,\r\n        blockSelector,\r\n        maskAllText,\r\n        unblockSelector,\r\n        maskTextClass,\r\n        unmaskTextClass,\r\n        maskTextSelector,\r\n        unmaskTextSelector,\r\n        inlineStylesheet,\r\n        maskInputOptions,\r\n        maskAttributeFn,\r\n        maskTextFn,\r\n        maskInputFn,\r\n        dataURLOptions,\r\n        inlineImages,\r\n        recordCanvas,\r\n        keepIframeSrcFn,\r\n        newlyAddedElement,\r\n    });\r\n    if (!_serializedNode) {\r\n        console.warn(n, 'not serialized');\r\n        return null;\r\n    }\r\n    let id;\r\n    if (mirror.hasNode(n)) {\r\n        id = mirror.getId(n);\r\n    }\r\n    else if (slimDOMExcluded(_serializedNode, slimDOMOptions) ||\r\n        (!preserveWhiteSpace &&\r\n            _serializedNode.type === NodeType.Text &&\r\n            !_serializedNode.isStyle &&\r\n            !_serializedNode.textContent.replace(/^\\s+|\\s+$/gm, '').length)) {\r\n        id = IGNORED_NODE;\r\n    }\r\n    else {\r\n        id = genId();\r\n    }\r\n    const serializedNode = Object.assign(_serializedNode, { id });\r\n    mirror.add(n, serializedNode);\r\n    if (id === IGNORED_NODE) {\r\n        return null;\r\n    }\r\n    if (onSerialize) {\r\n        onSerialize(n);\r\n    }\r\n    let recordChild = !skipChild;\r\n    if (serializedNode.type === NodeType.Element) {\r\n        recordChild = recordChild && !serializedNode.needBlock;\r\n        delete serializedNode.needBlock;\r\n        const shadowRoot = n.shadowRoot;\r\n        if (shadowRoot && isNativeShadowDom(shadowRoot))\r\n            serializedNode.isShadowHost = true;\r\n    }\r\n    if ((serializedNode.type === NodeType.Document ||\r\n        serializedNode.type === NodeType.Element) &&\r\n        recordChild) {\r\n        if (slimDOMOptions.headWhitespace &&\r\n            serializedNode.type === NodeType.Element &&\r\n            serializedNode.tagName === 'head') {\r\n            preserveWhiteSpace = false;\r\n        }\r\n        const bypassOptions = {\r\n            doc,\r\n            mirror,\r\n            blockClass,\r\n            blockSelector,\r\n            maskAllText,\r\n            unblockSelector,\r\n            maskTextClass,\r\n            unmaskTextClass,\r\n            maskTextSelector,\r\n            unmaskTextSelector,\r\n            skipChild,\r\n            inlineStylesheet,\r\n            maskInputOptions,\r\n            maskAttributeFn,\r\n            maskTextFn,\r\n            maskInputFn,\r\n            slimDOMOptions,\r\n            dataURLOptions,\r\n            inlineImages,\r\n            recordCanvas,\r\n            preserveWhiteSpace,\r\n            onSerialize,\r\n            onIframeLoad,\r\n            iframeLoadTimeout,\r\n            onStylesheetLoad,\r\n            stylesheetLoadTimeout,\r\n            keepIframeSrcFn,\r\n        };\r\n        for (const childN of Array.from(n.childNodes)) {\r\n            const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\r\n            if (serializedChildNode) {\r\n                serializedNode.childNodes.push(serializedChildNode);\r\n            }\r\n        }\r\n        if (isElement(n) && n.shadowRoot) {\r\n            for (const childN of Array.from(n.shadowRoot.childNodes)) {\r\n                const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\r\n                if (serializedChildNode) {\r\n                    isNativeShadowDom(n.shadowRoot) &&\r\n                        (serializedChildNode.isShadow = true);\r\n                    serializedNode.childNodes.push(serializedChildNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (n.parentNode &&\r\n        isShadowRoot(n.parentNode) &&\r\n        isNativeShadowDom(n.parentNode)) {\r\n        serializedNode.isShadow = true;\r\n    }\r\n    if (serializedNode.type === NodeType.Element &&\r\n        serializedNode.tagName === 'iframe') {\r\n        onceIframeLoaded(n, () => {\r\n            const iframeDoc = n.contentDocument;\r\n            if (iframeDoc && onIframeLoad) {\r\n                const serializedIframeNode = serializeNodeWithId(iframeDoc, {\r\n                    doc: iframeDoc,\r\n                    mirror,\r\n                    blockClass,\r\n                    blockSelector,\r\n                    unblockSelector,\r\n                    maskAllText,\r\n                    maskTextClass,\r\n                    unmaskTextClass,\r\n                    maskTextSelector,\r\n                    unmaskTextSelector,\r\n                    skipChild: false,\r\n                    inlineStylesheet,\r\n                    maskInputOptions,\r\n                    maskAttributeFn,\r\n                    maskTextFn,\r\n                    maskInputFn,\r\n                    slimDOMOptions,\r\n                    dataURLOptions,\r\n                    inlineImages,\r\n                    recordCanvas,\r\n                    preserveWhiteSpace,\r\n                    onSerialize,\r\n                    onIframeLoad,\r\n                    iframeLoadTimeout,\r\n                    onStylesheetLoad,\r\n                    stylesheetLoadTimeout,\r\n                    keepIframeSrcFn,\r\n                });\r\n                if (serializedIframeNode) {\r\n                    onIframeLoad(n, serializedIframeNode);\r\n                }\r\n            }\r\n        }, iframeLoadTimeout);\r\n    }\r\n    if (serializedNode.type === NodeType.Element &&\r\n        serializedNode.tagName === 'link' &&\r\n        serializedNode.attributes.rel === 'stylesheet') {\r\n        onceStylesheetLoaded(n, () => {\r\n            if (onStylesheetLoad) {\r\n                const serializedLinkNode = serializeNodeWithId(n, {\r\n                    doc,\r\n                    mirror,\r\n                    blockClass,\r\n                    blockSelector,\r\n                    unblockSelector,\r\n                    maskAllText,\r\n                    maskTextClass,\r\n                    unmaskTextClass,\r\n                    maskTextSelector,\r\n                    unmaskTextSelector,\r\n                    skipChild: false,\r\n                    inlineStylesheet,\r\n                    maskInputOptions,\r\n                    maskAttributeFn,\r\n                    maskTextFn,\r\n                    maskInputFn,\r\n                    slimDOMOptions,\r\n                    dataURLOptions,\r\n                    inlineImages,\r\n                    recordCanvas,\r\n                    preserveWhiteSpace,\r\n                    onSerialize,\r\n                    onIframeLoad,\r\n                    iframeLoadTimeout,\r\n                    onStylesheetLoad,\r\n                    stylesheetLoadTimeout,\r\n                    keepIframeSrcFn,\r\n                });\r\n                if (serializedLinkNode) {\r\n                    onStylesheetLoad(n, serializedLinkNode);\r\n                }\r\n            }\r\n        }, stylesheetLoadTimeout);\r\n    }\r\n    return serializedNode;\r\n}\r\nfunction snapshot(n, options) {\r\n    const { mirror = new Mirror(), blockClass = 'rr-block', blockSelector = null, unblockSelector = null, maskAllText = false, maskTextClass = 'rr-mask', unmaskTextClass = null, maskTextSelector = null, unmaskTextSelector = null, inlineStylesheet = true, inlineImages = false, recordCanvas = false, maskAllInputs = false, maskAttributeFn, maskTextFn, maskInputFn, slimDOM = false, dataURLOptions, preserveWhiteSpace, onSerialize, onIframeLoad, iframeLoadTimeout, onStylesheetLoad, stylesheetLoadTimeout, keepIframeSrcFn = () => false, } = options || {};\r\n    const maskInputOptions = maskAllInputs === true\r\n        ? {\r\n            color: true,\r\n            date: true,\r\n            'datetime-local': true,\r\n            email: true,\r\n            month: true,\r\n            number: true,\r\n            range: true,\r\n            search: true,\r\n            tel: true,\r\n            text: true,\r\n            time: true,\r\n            url: true,\r\n            week: true,\r\n            textarea: true,\r\n            select: true,\r\n        }\r\n        : maskAllInputs === false\r\n            ? {}\r\n            : maskAllInputs;\r\n    const slimDOMOptions = slimDOM === true || slimDOM === 'all'\r\n        ?\r\n            {\r\n                script: true,\r\n                comment: true,\r\n                headFavicon: true,\r\n                headWhitespace: true,\r\n                headMetaDescKeywords: slimDOM === 'all',\r\n                headMetaSocial: true,\r\n                headMetaRobots: true,\r\n                headMetaHttpEquiv: true,\r\n                headMetaAuthorship: true,\r\n                headMetaVerification: true,\r\n            }\r\n        : slimDOM === false\r\n            ? {}\r\n            : slimDOM;\r\n    return serializeNodeWithId(n, {\r\n        doc: n,\r\n        mirror,\r\n        blockClass,\r\n        blockSelector,\r\n        unblockSelector,\r\n        maskAllText,\r\n        maskTextClass,\r\n        unmaskTextClass,\r\n        maskTextSelector,\r\n        unmaskTextSelector,\r\n        skipChild: false,\r\n        inlineStylesheet,\r\n        maskInputOptions,\r\n        maskAttributeFn,\r\n        maskTextFn,\r\n        maskInputFn,\r\n        slimDOMOptions,\r\n        dataURLOptions,\r\n        inlineImages,\r\n        recordCanvas,\r\n        preserveWhiteSpace,\r\n        onSerialize,\r\n        onIframeLoad,\r\n        iframeLoadTimeout,\r\n        onStylesheetLoad,\r\n        stylesheetLoadTimeout,\r\n        keepIframeSrcFn,\r\n        newlyAddedElement: false,\r\n    });\r\n}\r\n\nconst commentre = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\r\nfunction parse(css, options = {}) {\r\n    let lineno = 1;\r\n    let column = 1;\r\n    function updatePosition(str) {\r\n        const lines = str.match(/\\n/g);\r\n        if (lines) {\r\n            lineno += lines.length;\r\n        }\r\n        const i = str.lastIndexOf('\\n');\r\n        column = i === -1 ? column + str.length : str.length - i;\r\n    }\r\n    function position() {\r\n        const start = { line: lineno, column };\r\n        return (node) => {\r\n            node.position = new Position(start);\r\n            whitespace();\r\n            return node;\r\n        };\r\n    }\r\n    class Position {\r\n        constructor(start) {\r\n            this.start = start;\r\n            this.end = { line: lineno, column };\r\n            this.source = options.source;\r\n        }\r\n    }\r\n    Position.prototype.content = css;\r\n    const errorsList = [];\r\n    function error(msg) {\r\n        const err = new Error(`${options.source || ''}:${lineno}:${column}: ${msg}`);\r\n        err.reason = msg;\r\n        err.filename = options.source;\r\n        err.line = lineno;\r\n        err.column = column;\r\n        err.source = css;\r\n        if (options.silent) {\r\n            errorsList.push(err);\r\n        }\r\n        else {\r\n            throw err;\r\n        }\r\n    }\r\n    function stylesheet() {\r\n        const rulesList = rules();\r\n        return {\r\n            type: 'stylesheet',\r\n            stylesheet: {\r\n                source: options.source,\r\n                rules: rulesList,\r\n                parsingErrors: errorsList,\r\n            },\r\n        };\r\n    }\r\n    function open() {\r\n        return match(/^{\\s*/);\r\n    }\r\n    function close() {\r\n        return match(/^}/);\r\n    }\r\n    function rules() {\r\n        let node;\r\n        const rules = [];\r\n        whitespace();\r\n        comments(rules);\r\n        while (css.length && css.charAt(0) !== '}' && (node = atrule() || rule())) {\r\n            if (node) {\r\n                rules.push(node);\r\n                comments(rules);\r\n            }\r\n        }\r\n        return rules;\r\n    }\r\n    function match(re) {\r\n        const m = re.exec(css);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const str = m[0];\r\n        updatePosition(str);\r\n        css = css.slice(str.length);\r\n        return m;\r\n    }\r\n    function whitespace() {\r\n        match(/^\\s*/);\r\n    }\r\n    function comments(rules = []) {\r\n        let c;\r\n        while ((c = comment())) {\r\n            if (c) {\r\n                rules.push(c);\r\n            }\r\n            c = comment();\r\n        }\r\n        return rules;\r\n    }\r\n    function comment() {\r\n        const pos = position();\r\n        if ('/' !== css.charAt(0) || '*' !== css.charAt(1)) {\r\n            return;\r\n        }\r\n        let i = 2;\r\n        while ('' !== css.charAt(i) &&\r\n            ('*' !== css.charAt(i) || '/' !== css.charAt(i + 1))) {\r\n            ++i;\r\n        }\r\n        i += 2;\r\n        if ('' === css.charAt(i - 1)) {\r\n            return error('End of comment missing');\r\n        }\r\n        const str = css.slice(2, i - 2);\r\n        column += 2;\r\n        updatePosition(str);\r\n        css = css.slice(i);\r\n        column += 2;\r\n        return pos({\r\n            type: 'comment',\r\n            comment: str,\r\n        });\r\n    }\r\n    function selector() {\r\n        whitespace();\r\n        while (css[0] == '}') {\r\n            error('extra closing bracket');\r\n            css = css.slice(1);\r\n            whitespace();\r\n        }\r\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const cleanedInput = m[0]\r\n            .trim()\r\n            .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\r\n            .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, (m) => {\r\n            return m.replace(/,/g, '\\u200C');\r\n        });\r\n        return customSplit(cleanedInput).map((s) => s.replace(/\\u200C/g, ',').trim());\r\n    }\r\n    function customSplit(input) {\r\n        const result = [];\r\n        let currentSegment = '';\r\n        let depthParentheses = 0;\r\n        let depthBrackets = 0;\r\n        let currentStringChar = null;\r\n        for (const char of input) {\r\n            const hasStringEscape = currentSegment.endsWith('\\\\');\r\n            if (currentStringChar) {\r\n                if (currentStringChar === char && !hasStringEscape) {\r\n                    currentStringChar = null;\r\n                }\r\n            }\r\n            else if (char === '(') {\r\n                depthParentheses++;\r\n            }\r\n            else if (char === ')') {\r\n                depthParentheses--;\r\n            }\r\n            else if (char === '[') {\r\n                depthBrackets++;\r\n            }\r\n            else if (char === ']') {\r\n                depthBrackets--;\r\n            }\r\n            else if ('\\'\"'.includes(char)) {\r\n                currentStringChar = char;\r\n            }\r\n            if (char === ',' && depthParentheses === 0 && depthBrackets === 0) {\r\n                result.push(currentSegment);\r\n                currentSegment = '';\r\n            }\r\n            else {\r\n                currentSegment += char;\r\n            }\r\n        }\r\n        if (currentSegment) {\r\n            result.push(currentSegment);\r\n        }\r\n        return result;\r\n    }\r\n    function declaration() {\r\n        const pos = position();\r\n        const propMatch = match(/^(\\*?[-#\\/\\*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\r\n        if (!propMatch) {\r\n            return;\r\n        }\r\n        const prop = trim(propMatch[0]);\r\n        if (!match(/^:\\s*/)) {\r\n            return error(`property missing ':'`);\r\n        }\r\n        const val = match(/^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+)/);\r\n        const ret = pos({\r\n            type: 'declaration',\r\n            property: prop.replace(commentre, ''),\r\n            value: val ? trim(val[0]).replace(commentre, '') : '',\r\n        });\r\n        match(/^[;\\s]*/);\r\n        return ret;\r\n    }\r\n    function declarations() {\r\n        const decls = [];\r\n        if (!open()) {\r\n            return error(`missing '{'`);\r\n        }\r\n        comments(decls);\r\n        let decl;\r\n        while ((decl = declaration())) {\r\n            if (decl !== false) {\r\n                decls.push(decl);\r\n                comments(decls);\r\n            }\r\n            decl = declaration();\r\n        }\r\n        if (!close()) {\r\n            return error(`missing '}'`);\r\n        }\r\n        return decls;\r\n    }\r\n    function keyframe() {\r\n        let m;\r\n        const vals = [];\r\n        const pos = position();\r\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\r\n            vals.push(m[1]);\r\n            match(/^,\\s*/);\r\n        }\r\n        if (!vals.length) {\r\n            return;\r\n        }\r\n        return pos({\r\n            type: 'keyframe',\r\n            values: vals,\r\n            declarations: declarations(),\r\n        });\r\n    }\r\n    function atkeyframes() {\r\n        const pos = position();\r\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const vendor = m[1];\r\n        m = match(/^([-\\w]+)\\s*/);\r\n        if (!m) {\r\n            return error('@keyframes missing name');\r\n        }\r\n        const name = m[1];\r\n        if (!open()) {\r\n            return error(`@keyframes missing '{'`);\r\n        }\r\n        let frame;\r\n        let frames = comments();\r\n        while ((frame = keyframe())) {\r\n            frames.push(frame);\r\n            frames = frames.concat(comments());\r\n        }\r\n        if (!close()) {\r\n            return error(`@keyframes missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'keyframes',\r\n            name,\r\n            vendor,\r\n            keyframes: frames,\r\n        });\r\n    }\r\n    function atsupports() {\r\n        const pos = position();\r\n        const m = match(/^@supports *([^{]+)/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const supports = trim(m[1]);\r\n        if (!open()) {\r\n            return error(`@supports missing '{'`);\r\n        }\r\n        const style = comments().concat(rules());\r\n        if (!close()) {\r\n            return error(`@supports missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'supports',\r\n            supports,\r\n            rules: style,\r\n        });\r\n    }\r\n    function athost() {\r\n        const pos = position();\r\n        const m = match(/^@host\\s*/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        if (!open()) {\r\n            return error(`@host missing '{'`);\r\n        }\r\n        const style = comments().concat(rules());\r\n        if (!close()) {\r\n            return error(`@host missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'host',\r\n            rules: style,\r\n        });\r\n    }\r\n    function atmedia() {\r\n        const pos = position();\r\n        const m = match(/^@media *([^{]+)/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const media = trim(m[1]);\r\n        if (!open()) {\r\n            return error(`@media missing '{'`);\r\n        }\r\n        const style = comments().concat(rules());\r\n        if (!close()) {\r\n            return error(`@media missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'media',\r\n            media,\r\n            rules: style,\r\n        });\r\n    }\r\n    function atcustommedia() {\r\n        const pos = position();\r\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        return pos({\r\n            type: 'custom-media',\r\n            name: trim(m[1]),\r\n            media: trim(m[2]),\r\n        });\r\n    }\r\n    function atpage() {\r\n        const pos = position();\r\n        const m = match(/^@page */);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const sel = selector() || [];\r\n        if (!open()) {\r\n            return error(`@page missing '{'`);\r\n        }\r\n        let decls = comments();\r\n        let decl;\r\n        while ((decl = declaration())) {\r\n            decls.push(decl);\r\n            decls = decls.concat(comments());\r\n        }\r\n        if (!close()) {\r\n            return error(`@page missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'page',\r\n            selectors: sel,\r\n            declarations: decls,\r\n        });\r\n    }\r\n    function atdocument() {\r\n        const pos = position();\r\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const vendor = trim(m[1]);\r\n        const doc = trim(m[2]);\r\n        if (!open()) {\r\n            return error(`@document missing '{'`);\r\n        }\r\n        const style = comments().concat(rules());\r\n        if (!close()) {\r\n            return error(`@document missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'document',\r\n            document: doc,\r\n            vendor,\r\n            rules: style,\r\n        });\r\n    }\r\n    function atfontface() {\r\n        const pos = position();\r\n        const m = match(/^@font-face\\s*/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        if (!open()) {\r\n            return error(`@font-face missing '{'`);\r\n        }\r\n        let decls = comments();\r\n        let decl;\r\n        while ((decl = declaration())) {\r\n            decls.push(decl);\r\n            decls = decls.concat(comments());\r\n        }\r\n        if (!close()) {\r\n            return error(`@font-face missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'font-face',\r\n            declarations: decls,\r\n        });\r\n    }\r\n    const atimport = _compileAtrule('import');\r\n    const atcharset = _compileAtrule('charset');\r\n    const atnamespace = _compileAtrule('namespace');\r\n    function _compileAtrule(name) {\r\n        const re = new RegExp('^@' + name + '\\\\s*([^;]+);');\r\n        return () => {\r\n            const pos = position();\r\n            const m = match(re);\r\n            if (!m) {\r\n                return;\r\n            }\r\n            const ret = { type: name };\r\n            ret[name] = m[1].trim();\r\n            return pos(ret);\r\n        };\r\n    }\r\n    function atrule() {\r\n        if (css[0] !== '@') {\r\n            return;\r\n        }\r\n        return (atkeyframes() ||\r\n            atmedia() ||\r\n            atcustommedia() ||\r\n            atsupports() ||\r\n            atimport() ||\r\n            atcharset() ||\r\n            atnamespace() ||\r\n            atdocument() ||\r\n            atpage() ||\r\n            athost() ||\r\n            atfontface());\r\n    }\r\n    function rule() {\r\n        const pos = position();\r\n        const sel = selector();\r\n        if (!sel) {\r\n            return error('selector missing');\r\n        }\r\n        comments();\r\n        return pos({\r\n            type: 'rule',\r\n            selectors: sel,\r\n            declarations: declarations(),\r\n        });\r\n    }\r\n    return addParent(stylesheet());\r\n}\r\nfunction trim(str) {\r\n    return str ? str.replace(/^\\s+|\\s+$/g, '') : '';\r\n}\r\nfunction addParent(obj, parent) {\r\n    const isNode = obj && typeof obj.type === 'string';\r\n    const childParent = isNode ? obj : parent;\r\n    for (const k of Object.keys(obj)) {\r\n        const value = obj[k];\r\n        if (Array.isArray(value)) {\r\n            value.forEach((v) => {\r\n                addParent(v, childParent);\r\n            });\r\n        }\r\n        else if (value && typeof value === 'object') {\r\n            addParent(value, childParent);\r\n        }\r\n    }\r\n    if (isNode) {\r\n        Object.defineProperty(obj, 'parent', {\r\n            configurable: true,\r\n            writable: true,\r\n            enumerable: false,\r\n            value: parent || null,\r\n        });\r\n    }\r\n    return obj;\r\n}\n\nconst tagMap = {\r\n    script: 'noscript',\r\n    altglyph: 'altGlyph',\r\n    altglyphdef: 'altGlyphDef',\r\n    altglyphitem: 'altGlyphItem',\r\n    animatecolor: 'animateColor',\r\n    animatemotion: 'animateMotion',\r\n    animatetransform: 'animateTransform',\r\n    clippath: 'clipPath',\r\n    feblend: 'feBlend',\r\n    fecolormatrix: 'feColorMatrix',\r\n    fecomponenttransfer: 'feComponentTransfer',\r\n    fecomposite: 'feComposite',\r\n    feconvolvematrix: 'feConvolveMatrix',\r\n    fediffuselighting: 'feDiffuseLighting',\r\n    fedisplacementmap: 'feDisplacementMap',\r\n    fedistantlight: 'feDistantLight',\r\n    fedropshadow: 'feDropShadow',\r\n    feflood: 'feFlood',\r\n    fefunca: 'feFuncA',\r\n    fefuncb: 'feFuncB',\r\n    fefuncg: 'feFuncG',\r\n    fefuncr: 'feFuncR',\r\n    fegaussianblur: 'feGaussianBlur',\r\n    feimage: 'feImage',\r\n    femerge: 'feMerge',\r\n    femergenode: 'feMergeNode',\r\n    femorphology: 'feMorphology',\r\n    feoffset: 'feOffset',\r\n    fepointlight: 'fePointLight',\r\n    fespecularlighting: 'feSpecularLighting',\r\n    fespotlight: 'feSpotLight',\r\n    fetile: 'feTile',\r\n    feturbulence: 'feTurbulence',\r\n    foreignobject: 'foreignObject',\r\n    glyphref: 'glyphRef',\r\n    lineargradient: 'linearGradient',\r\n    radialgradient: 'radialGradient',\r\n};\r\nfunction getTagName(n) {\r\n    let tagName = tagMap[n.tagName] ? tagMap[n.tagName] : n.tagName;\r\n    if (tagName === 'link' && n.attributes._cssText) {\r\n        tagName = 'style';\r\n    }\r\n    return tagName;\r\n}\r\nfunction escapeRegExp(str) {\r\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\nconst HOVER_SELECTOR = /([^\\\\]):hover/;\r\nconst HOVER_SELECTOR_GLOBAL = new RegExp(HOVER_SELECTOR.source, 'g');\r\nfunction addHoverClass(cssText, cache) {\r\n    const cachedStyle = cache?.stylesWithHoverClass.get(cssText);\r\n    if (cachedStyle)\r\n        return cachedStyle;\r\n    if (cssText.length >= 1000000) {\r\n        return cssText;\r\n    }\r\n    const ast = parse(cssText, {\r\n        silent: true,\r\n    });\r\n    if (!ast.stylesheet) {\r\n        return cssText;\r\n    }\r\n    const selectors = [];\r\n    ast.stylesheet.rules.forEach((rule) => {\r\n        if ('selectors' in rule) {\r\n            (rule.selectors || []).forEach((selector) => {\r\n                if (HOVER_SELECTOR.test(selector)) {\r\n                    selectors.push(selector);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    if (selectors.length === 0) {\r\n        return cssText;\r\n    }\r\n    const selectorMatcher = new RegExp(selectors\r\n        .filter((selector, index) => selectors.indexOf(selector) === index)\r\n        .sort((a, b) => b.length - a.length)\r\n        .map((selector) => {\r\n        return escapeRegExp(selector);\r\n    })\r\n        .join('|'), 'g');\r\n    const result = cssText.replace(selectorMatcher, (selector) => {\r\n        const newSelector = selector.replace(HOVER_SELECTOR_GLOBAL, '$1.\\\\:hover');\r\n        return `${selector}, ${newSelector}`;\r\n    });\r\n    cache?.stylesWithHoverClass.set(cssText, result);\r\n    return result;\r\n}\r\nfunction createCache() {\r\n    const stylesWithHoverClass = new Map();\r\n    return {\r\n        stylesWithHoverClass,\r\n    };\r\n}\r\nfunction buildNode(n, options) {\r\n    const { doc, hackCss, cache } = options;\r\n    switch (n.type) {\r\n        case NodeType.Document:\r\n            return doc.implementation.createDocument(null, '', null);\r\n        case NodeType.DocumentType:\r\n            return doc.implementation.createDocumentType(n.name || 'html', n.publicId, n.systemId);\r\n        case NodeType.Element: {\r\n            const tagName = getTagName(n);\r\n            let node;\r\n            if (n.isSVG) {\r\n                node = doc.createElementNS('http://www.w3.org/2000/svg', tagName);\r\n            }\r\n            else {\r\n                if (n.isCustom &&\r\n                    doc.defaultView?.customElements &&\r\n                    !doc.defaultView.customElements.get(n.tagName))\r\n                    doc.defaultView.customElements.define(n.tagName, class extends doc.defaultView.HTMLElement {\r\n                    });\r\n                node = doc.createElement(tagName);\r\n            }\r\n            const specialAttributes = {};\r\n            for (const name in n.attributes) {\r\n                if (!Object.prototype.hasOwnProperty.call(n.attributes, name)) {\r\n                    continue;\r\n                }\r\n                let value = n.attributes[name];\r\n                if (tagName === 'option' &&\r\n                    name === 'selected' &&\r\n                    value === false) {\r\n                    continue;\r\n                }\r\n                if (value === null) {\r\n                    continue;\r\n                }\r\n                if (value === true)\r\n                    value = '';\r\n                if (name.startsWith('rr_')) {\r\n                    specialAttributes[name] = value;\r\n                    continue;\r\n                }\r\n                const isTextarea = tagName === 'textarea' && name === 'value';\r\n                const isRemoteOrDynamicCss = tagName === 'style' && name === '_cssText';\r\n                if (isRemoteOrDynamicCss && hackCss && typeof value === 'string') {\r\n                    value = addHoverClass(value, cache);\r\n                }\r\n                if ((isTextarea || isRemoteOrDynamicCss) && typeof value === 'string') {\r\n                    const child = doc.createTextNode(value);\r\n                    for (const c of Array.from(node.childNodes)) {\r\n                        if (c.nodeType === node.TEXT_NODE) {\r\n                            node.removeChild(c);\r\n                        }\r\n                    }\r\n                    node.appendChild(child);\r\n                    continue;\r\n                }\r\n                try {\r\n                    if (n.isSVG && name === 'xlink:href') {\r\n                        node.setAttributeNS('http://www.w3.org/1999/xlink', name, value.toString());\r\n                    }\r\n                    else if (name === 'onload' ||\r\n                        name === 'onclick' ||\r\n                        name.substring(0, 7) === 'onmouse') {\r\n                        node.setAttribute('_' + name, value.toString());\r\n                    }\r\n                    else if (tagName === 'meta' &&\r\n                        n.attributes['http-equiv'] === 'Content-Security-Policy' &&\r\n                        name === 'content') {\r\n                        node.setAttribute('csp-content', value.toString());\r\n                        continue;\r\n                    }\r\n                    else if (tagName === 'link' &&\r\n                        (n.attributes.rel === 'preload' ||\r\n                            n.attributes.rel === 'modulepreload') &&\r\n                        n.attributes.as === 'script') {\r\n                    }\r\n                    else if (tagName === 'link' &&\r\n                        n.attributes.rel === 'prefetch' &&\r\n                        typeof n.attributes.href === 'string' &&\r\n                        n.attributes.href.endsWith('.js')) {\r\n                    }\r\n                    else if (tagName === 'img' &&\r\n                        n.attributes.srcset &&\r\n                        n.attributes.rr_dataURL) {\r\n                        node.setAttribute('rrweb-original-srcset', n.attributes.srcset);\r\n                    }\r\n                    else {\r\n                        node.setAttribute(name, value.toString());\r\n                    }\r\n                }\r\n                catch (error) {\r\n                }\r\n            }\r\n            for (const name in specialAttributes) {\r\n                const value = specialAttributes[name];\r\n                if (tagName === 'canvas' && name === 'rr_dataURL') {\r\n                    const image = document.createElement('img');\r\n                    image.onload = () => {\r\n                        const ctx = node.getContext('2d');\r\n                        if (ctx) {\r\n                            ctx.drawImage(image, 0, 0, image.width, image.height);\r\n                        }\r\n                    };\r\n                    image.src = value.toString();\r\n                    if (node.RRNodeType)\r\n                        node.rr_dataURL = value.toString();\r\n                }\r\n                else if (tagName === 'img' && name === 'rr_dataURL') {\r\n                    const image = node;\r\n                    if (!image.currentSrc.startsWith('data:')) {\r\n                        image.setAttribute('rrweb-original-src', n.attributes.src);\r\n                        image.src = value.toString();\r\n                    }\r\n                }\r\n                if (name === 'rr_width') {\r\n                    node.style.setProperty('width', value.toString());\r\n                }\r\n                else if (name === 'rr_height') {\r\n                    node.style.setProperty('height', value.toString());\r\n                }\r\n                else if (name === 'rr_mediaCurrentTime' &&\r\n                    typeof value === 'number') {\r\n                    node.currentTime = value;\r\n                }\r\n                else if (name === 'rr_mediaState') {\r\n                    switch (value) {\r\n                        case 'played':\r\n                            node\r\n                                .play()\r\n                                .catch((e) => console.warn('media playback error', e));\r\n                            break;\r\n                        case 'paused':\r\n                            node.pause();\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            if (n.isShadowHost) {\r\n                if (!node.shadowRoot) {\r\n                    node.attachShadow({ mode: 'open' });\r\n                }\r\n                else {\r\n                    while (node.shadowRoot.firstChild) {\r\n                        node.shadowRoot.removeChild(node.shadowRoot.firstChild);\r\n                    }\r\n                }\r\n            }\r\n            return node;\r\n        }\r\n        case NodeType.Text:\r\n            return doc.createTextNode(n.isStyle && hackCss\r\n                ? addHoverClass(n.textContent, cache)\r\n                : n.textContent);\r\n        case NodeType.CDATA:\r\n            return doc.createCDATASection(n.textContent);\r\n        case NodeType.Comment:\r\n            return doc.createComment(n.textContent);\r\n        default:\r\n            return null;\r\n    }\r\n}\r\nfunction buildNodeWithSN(n, options) {\r\n    const { doc, mirror, skipChild = false, hackCss = true, afterAppend, cache, } = options;\r\n    if (mirror.has(n.id)) {\r\n        const nodeInMirror = mirror.getNode(n.id);\r\n        const meta = mirror.getMeta(nodeInMirror);\r\n        if (isNodeMetaEqual(meta, n))\r\n            return mirror.getNode(n.id);\r\n    }\r\n    let node = buildNode(n, { doc, hackCss, cache });\r\n    if (!node) {\r\n        return null;\r\n    }\r\n    if (n.rootId && mirror.getNode(n.rootId) !== doc) {\r\n        mirror.replace(n.rootId, doc);\r\n    }\r\n    if (n.type === NodeType.Document) {\r\n        doc.close();\r\n        doc.open();\r\n        if (n.compatMode === 'BackCompat' &&\r\n            n.childNodes &&\r\n            n.childNodes[0].type !== NodeType.DocumentType) {\r\n            if (n.childNodes[0].type === NodeType.Element &&\r\n                'xmlns' in n.childNodes[0].attributes &&\r\n                n.childNodes[0].attributes.xmlns === 'http://www.w3.org/1999/xhtml') {\r\n                doc.write('<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"\">');\r\n            }\r\n            else {\r\n                doc.write('<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"\">');\r\n            }\r\n        }\r\n        node = doc;\r\n    }\r\n    mirror.add(node, n);\r\n    if ((n.type === NodeType.Document || n.type === NodeType.Element) &&\r\n        !skipChild) {\r\n        for (const childN of n.childNodes) {\r\n            const childNode = buildNodeWithSN(childN, {\r\n                doc,\r\n                mirror,\r\n                skipChild: false,\r\n                hackCss,\r\n                afterAppend,\r\n                cache,\r\n            });\r\n            if (!childNode) {\r\n                console.warn('Failed to rebuild', childN);\r\n                continue;\r\n            }\r\n            if (childN.isShadow && isElement(node) && node.shadowRoot) {\r\n                node.shadowRoot.appendChild(childNode);\r\n            }\r\n            else if (n.type === NodeType.Document &&\r\n                childN.type == NodeType.Element) {\r\n                const htmlElement = childNode;\r\n                let body = null;\r\n                htmlElement.childNodes.forEach((child) => {\r\n                    if (child.nodeName === 'BODY')\r\n                        body = child;\r\n                });\r\n                if (body) {\r\n                    htmlElement.removeChild(body);\r\n                    node.appendChild(childNode);\r\n                    htmlElement.appendChild(body);\r\n                }\r\n                else {\r\n                    node.appendChild(childNode);\r\n                }\r\n            }\r\n            else {\r\n                node.appendChild(childNode);\r\n            }\r\n            if (afterAppend) {\r\n                afterAppend(childNode, childN.id);\r\n            }\r\n        }\r\n    }\r\n    return node;\r\n}\r\nfunction visit(mirror, onVisit) {\r\n    function walk(node) {\r\n        onVisit(node);\r\n    }\r\n    for (const id of mirror.getIds()) {\r\n        if (mirror.has(id)) {\r\n            walk(mirror.getNode(id));\r\n        }\r\n    }\r\n}\r\nfunction handleScroll(node, mirror) {\r\n    const n = mirror.getMeta(node);\r\n    if (n?.type !== NodeType.Element) {\r\n        return;\r\n    }\r\n    const el = node;\r\n    for (const name in n.attributes) {\r\n        if (!(Object.prototype.hasOwnProperty.call(n.attributes, name) &&\r\n            name.startsWith('rr_'))) {\r\n            continue;\r\n        }\r\n        const value = n.attributes[name];\r\n        if (name === 'rr_scrollLeft') {\r\n            el.scrollLeft = value;\r\n        }\r\n        if (name === 'rr_scrollTop') {\r\n            el.scrollTop = value;\r\n        }\r\n    }\r\n}\r\nfunction rebuild(n, options) {\r\n    const { doc, onVisit, hackCss = true, afterAppend, cache, mirror = new Mirror(), } = options;\r\n    const node = buildNodeWithSN(n, {\r\n        doc,\r\n        mirror,\r\n        skipChild: false,\r\n        hackCss,\r\n        afterAppend,\r\n        cache,\r\n    });\r\n    visit(mirror, (visitedNode) => {\r\n        if (onVisit) {\r\n            onVisit(visitedNode);\r\n        }\r\n        handleScroll(visitedNode, mirror);\r\n    });\r\n    return node;\r\n}\n\nexport { IGNORED_NODE, Mirror, NodeType, addHoverClass, buildNodeWithSN, createCache, createMatchPredicate, createMirror, distanceToMatch, escapeImportStatement, fixSafariColons, genId, getInputType, getInputValue, ignoreAttribute, is2DCanvasBlank, isCSSImportRule, isCSSStyleRule, isElement, isNativeShadowDom, isNodeMetaEqual, isShadowRoot, maskInputValue, needMaskingText, rebuild, serializeNodeWithId, shouldMaskInput, snapshot, stringifyRule, stringifyStylesheet, toLowerCase, toUpperCase, transformAttribute };\n","import { distanceToMatch, IGNORED_NODE, isShadowRoot, createMatchPredicate } from '../../rrweb-snapshot/es/rrweb-snapshot.js';\n\nfunction on(type, fn, target = document) {\r\n    const options = { capture: true, passive: true };\r\n    target.addEventListener(type, fn, options);\r\n    return () => target.removeEventListener(type, fn, options);\r\n}\r\nconst DEPARTED_MIRROR_ACCESS_WARNING = 'Please stop import mirror directly. Instead of that,' +\r\n    '\\r\\n' +\r\n    'now you can use replayer.getMirror() to access the mirror instance of a replayer,' +\r\n    '\\r\\n' +\r\n    'or you can use record.mirror to access the mirror instance during recording.';\r\nlet _mirror = {\r\n    map: {},\r\n    getId() {\r\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\r\n        return -1;\r\n    },\r\n    getNode() {\r\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\r\n        return null;\r\n    },\r\n    removeNodeFromMap() {\r\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\r\n    },\r\n    has() {\r\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\r\n        return false;\r\n    },\r\n    reset() {\r\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\r\n    },\r\n};\r\nif (typeof window !== 'undefined' && window.Proxy && window.Reflect) {\r\n    _mirror = new Proxy(_mirror, {\r\n        get(target, prop, receiver) {\r\n            if (prop === 'map') {\r\n                console.error(DEPARTED_MIRROR_ACCESS_WARNING);\r\n            }\r\n            return Reflect.get(target, prop, receiver);\r\n        },\r\n    });\r\n}\r\nfunction throttle(func, wait, options = {}) {\r\n    let timeout = null;\r\n    let previous = 0;\r\n    return function (...args) {\r\n        const now = Date.now();\r\n        if (!previous && options.leading === false) {\r\n            previous = now;\r\n        }\r\n        const remaining = wait - (now - previous);\r\n        const context = this;\r\n        if (remaining <= 0 || remaining > wait) {\r\n            if (timeout) {\r\n                clearTimeout(timeout);\r\n                timeout = null;\r\n            }\r\n            previous = now;\r\n            func.apply(context, args);\r\n        }\r\n        else if (!timeout && options.trailing !== false) {\r\n            timeout = setTimeout(() => {\r\n                previous = options.leading === false ? 0 : Date.now();\r\n                timeout = null;\r\n                func.apply(context, args);\r\n            }, remaining);\r\n        }\r\n    };\r\n}\r\nfunction hookSetter(target, key, d, isRevoked, win = window) {\r\n    const original = win.Object.getOwnPropertyDescriptor(target, key);\r\n    win.Object.defineProperty(target, key, isRevoked\r\n        ? d\r\n        : {\r\n            set(value) {\r\n                setTimeout(() => {\r\n                    d.set.call(this, value);\r\n                }, 0);\r\n                if (original && original.set) {\r\n                    original.set.call(this, value);\r\n                }\r\n            },\r\n        });\r\n    return () => hookSetter(target, key, original || {}, true);\r\n}\r\nfunction patch(source, name, replacement) {\r\n    try {\r\n        if (!(name in source)) {\r\n            return () => {\r\n            };\r\n        }\r\n        const original = source[name];\r\n        const wrapped = replacement(original);\r\n        if (typeof wrapped === 'function') {\r\n            wrapped.prototype = wrapped.prototype || {};\r\n            Object.defineProperties(wrapped, {\r\n                __rrweb_original__: {\r\n                    enumerable: false,\r\n                    value: original,\r\n                },\r\n            });\r\n        }\r\n        source[name] = wrapped;\r\n        return () => {\r\n            source[name] = original;\r\n        };\r\n    }\r\n    catch {\r\n        return () => {\r\n        };\r\n    }\r\n}\r\nlet nowTimestamp = Date.now;\r\nif (!(/[1-9][0-9]{12}/.test(Date.now().toString()))) {\r\n    nowTimestamp = () => new Date().getTime();\r\n}\r\nfunction getWindowScroll(win) {\r\n    const doc = win.document;\r\n    return {\r\n        left: doc.scrollingElement\r\n            ? doc.scrollingElement.scrollLeft\r\n            : win.pageXOffset !== undefined\r\n                ? win.pageXOffset\r\n                : doc?.documentElement.scrollLeft ||\r\n                    doc?.body?.parentElement?.scrollLeft ||\r\n                    doc?.body?.scrollLeft ||\r\n                    0,\r\n        top: doc.scrollingElement\r\n            ? doc.scrollingElement.scrollTop\r\n            : win.pageYOffset !== undefined\r\n                ? win.pageYOffset\r\n                : doc?.documentElement.scrollTop ||\r\n                    doc?.body?.parentElement?.scrollTop ||\r\n                    doc?.body?.scrollTop ||\r\n                    0,\r\n    };\r\n}\r\nfunction getWindowHeight() {\r\n    return (window.innerHeight ||\r\n        (document.documentElement && document.documentElement.clientHeight) ||\r\n        (document.body && document.body.clientHeight));\r\n}\r\nfunction getWindowWidth() {\r\n    return (window.innerWidth ||\r\n        (document.documentElement && document.documentElement.clientWidth) ||\r\n        (document.body && document.body.clientWidth));\r\n}\r\nfunction closestElementOfNode(node) {\r\n    if (!node) {\r\n        return null;\r\n    }\r\n    const el = node.nodeType === node.ELEMENT_NODE\r\n        ? node\r\n        : node.parentElement;\r\n    return el;\r\n}\r\nfunction isBlocked(node, blockClass, blockSelector, unblockSelector, checkAncestors) {\r\n    if (!node) {\r\n        return false;\r\n    }\r\n    const el = closestElementOfNode(node);\r\n    if (!el) {\r\n        return false;\r\n    }\r\n    const blockedPredicate = createMatchPredicate(blockClass, blockSelector);\r\n    if (!checkAncestors) {\r\n        const isUnblocked = unblockSelector && el.matches(unblockSelector);\r\n        return blockedPredicate(el) && !isUnblocked;\r\n    }\r\n    const blockDistance = distanceToMatch(el, blockedPredicate);\r\n    let unblockDistance = -1;\r\n    if (blockDistance < 0) {\r\n        return false;\r\n    }\r\n    if (unblockSelector) {\r\n        unblockDistance = distanceToMatch(el, createMatchPredicate(null, unblockSelector));\r\n    }\r\n    if (blockDistance > -1 && unblockDistance < 0) {\r\n        return true;\r\n    }\r\n    return blockDistance < unblockDistance;\r\n}\r\nfunction isSerialized(n, mirror) {\r\n    return mirror.getId(n) !== -1;\r\n}\r\nfunction isIgnored(n, mirror) {\r\n    return mirror.getId(n) === IGNORED_NODE;\r\n}\r\nfunction isAncestorRemoved(target, mirror) {\r\n    if (isShadowRoot(target)) {\r\n        return false;\r\n    }\r\n    const id = mirror.getId(target);\r\n    if (!mirror.has(id)) {\r\n        return true;\r\n    }\r\n    if (target.parentNode &&\r\n        target.parentNode.nodeType === target.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    if (!target.parentNode) {\r\n        return true;\r\n    }\r\n    return isAncestorRemoved(target.parentNode, mirror);\r\n}\r\nfunction legacy_isTouchEvent(event) {\r\n    return Boolean(event.changedTouches);\r\n}\r\nfunction polyfill(win = window) {\r\n    if ('NodeList' in win && !win.NodeList.prototype.forEach) {\r\n        win.NodeList.prototype.forEach = Array.prototype\r\n            .forEach;\r\n    }\r\n    if ('DOMTokenList' in win && !win.DOMTokenList.prototype.forEach) {\r\n        win.DOMTokenList.prototype.forEach = Array.prototype\r\n            .forEach;\r\n    }\r\n    if (!Node.prototype.contains) {\r\n        Node.prototype.contains = (...args) => {\r\n            let node = args[0];\r\n            if (!(0 in args)) {\r\n                throw new TypeError('1 argument is required');\r\n            }\r\n            do {\r\n                if (this === node) {\r\n                    return true;\r\n                }\r\n            } while ((node = node && node.parentNode));\r\n            return false;\r\n        };\r\n    }\r\n}\r\nfunction queueToResolveTrees(queue) {\r\n    const queueNodeMap = {};\r\n    const putIntoMap = (m, parent) => {\r\n        const nodeInTree = {\r\n            value: m,\r\n            parent,\r\n            children: [],\r\n        };\r\n        queueNodeMap[m.node.id] = nodeInTree;\r\n        return nodeInTree;\r\n    };\r\n    const queueNodeTrees = [];\r\n    for (const mutation of queue) {\r\n        const { nextId, parentId } = mutation;\r\n        if (nextId && nextId in queueNodeMap) {\r\n            const nextInTree = queueNodeMap[nextId];\r\n            if (nextInTree.parent) {\r\n                const idx = nextInTree.parent.children.indexOf(nextInTree);\r\n                nextInTree.parent.children.splice(idx, 0, putIntoMap(mutation, nextInTree.parent));\r\n            }\r\n            else {\r\n                const idx = queueNodeTrees.indexOf(nextInTree);\r\n                queueNodeTrees.splice(idx, 0, putIntoMap(mutation, null));\r\n            }\r\n            continue;\r\n        }\r\n        if (parentId in queueNodeMap) {\r\n            const parentInTree = queueNodeMap[parentId];\r\n            parentInTree.children.push(putIntoMap(mutation, parentInTree));\r\n            continue;\r\n        }\r\n        queueNodeTrees.push(putIntoMap(mutation, null));\r\n    }\r\n    return queueNodeTrees;\r\n}\r\nfunction iterateResolveTree(tree, cb) {\r\n    cb(tree.value);\r\n    for (let i = tree.children.length - 1; i >= 0; i--) {\r\n        iterateResolveTree(tree.children[i], cb);\r\n    }\r\n}\r\nfunction isSerializedIframe(n, mirror) {\r\n    return Boolean(n.nodeName === 'IFRAME' && mirror.getMeta(n));\r\n}\r\nfunction isSerializedStylesheet(n, mirror) {\r\n    return Boolean(n.nodeName === 'LINK' &&\r\n        n.nodeType === n.ELEMENT_NODE &&\r\n        n.getAttribute &&\r\n        n.getAttribute('rel') === 'stylesheet' &&\r\n        mirror.getMeta(n));\r\n}\r\nfunction getBaseDimension(node, rootIframe) {\r\n    const frameElement = node.ownerDocument?.defaultView?.frameElement;\r\n    if (!frameElement || frameElement === rootIframe) {\r\n        return {\r\n            x: 0,\r\n            y: 0,\r\n            relativeScale: 1,\r\n            absoluteScale: 1,\r\n        };\r\n    }\r\n    const frameDimension = frameElement.getBoundingClientRect();\r\n    const frameBaseDimension = getBaseDimension(frameElement, rootIframe);\r\n    const relativeScale = frameDimension.height / frameElement.clientHeight;\r\n    return {\r\n        x: frameDimension.x * frameBaseDimension.relativeScale +\r\n            frameBaseDimension.x,\r\n        y: frameDimension.y * frameBaseDimension.relativeScale +\r\n            frameBaseDimension.y,\r\n        relativeScale,\r\n        absoluteScale: frameBaseDimension.absoluteScale * relativeScale,\r\n    };\r\n}\r\nfunction hasShadowRoot(n) {\r\n    return Boolean(n?.shadowRoot);\r\n}\r\nfunction getNestedRule(rules, position) {\r\n    const rule = rules[position[0]];\r\n    if (position.length === 1) {\r\n        return rule;\r\n    }\r\n    else {\r\n        return getNestedRule(rule.cssRules[position[1]].cssRules, position.slice(2));\r\n    }\r\n}\r\nfunction getPositionsAndIndex(nestedIndex) {\r\n    const positions = [...nestedIndex];\r\n    const index = positions.pop();\r\n    return { positions, index };\r\n}\r\nfunction uniqueTextMutations(mutations) {\r\n    const idSet = new Set();\r\n    const uniqueMutations = [];\r\n    for (let i = mutations.length; i--;) {\r\n        const mutation = mutations[i];\r\n        if (!idSet.has(mutation.id)) {\r\n            uniqueMutations.push(mutation);\r\n            idSet.add(mutation.id);\r\n        }\r\n    }\r\n    return uniqueMutations;\r\n}\r\nclass StyleSheetMirror {\r\n    constructor() {\r\n        this.id = 1;\r\n        this.styleIDMap = new WeakMap();\r\n        this.idStyleMap = new Map();\r\n    }\r\n    getId(stylesheet) {\r\n        return this.styleIDMap.get(stylesheet) ?? -1;\r\n    }\r\n    has(stylesheet) {\r\n        return this.styleIDMap.has(stylesheet);\r\n    }\r\n    add(stylesheet, id) {\r\n        if (this.has(stylesheet))\r\n            return this.getId(stylesheet);\r\n        let newId;\r\n        if (id === undefined) {\r\n            newId = this.id++;\r\n        }\r\n        else\r\n            newId = id;\r\n        this.styleIDMap.set(stylesheet, newId);\r\n        this.idStyleMap.set(newId, stylesheet);\r\n        return newId;\r\n    }\r\n    getStyle(id) {\r\n        return this.idStyleMap.get(id) || null;\r\n    }\r\n    reset() {\r\n        this.styleIDMap = new WeakMap();\r\n        this.idStyleMap = new Map();\r\n        this.id = 1;\r\n    }\r\n    generateId() {\r\n        return this.id++;\r\n    }\r\n}\r\nfunction getShadowHost(n) {\r\n    let shadowHost = null;\r\n    if (n.getRootNode?.()?.nodeType === Node.DOCUMENT_FRAGMENT_NODE &&\r\n        n.getRootNode().host)\r\n        shadowHost = n.getRootNode().host;\r\n    return shadowHost;\r\n}\r\nfunction getRootShadowHost(n) {\r\n    let rootShadowHost = n;\r\n    let shadowHost;\r\n    while ((shadowHost = getShadowHost(rootShadowHost)))\r\n        rootShadowHost = shadowHost;\r\n    return rootShadowHost;\r\n}\r\nfunction shadowHostInDom(n) {\r\n    const doc = n.ownerDocument;\r\n    if (!doc)\r\n        return false;\r\n    const shadowHost = getRootShadowHost(n);\r\n    return doc.contains(shadowHost);\r\n}\r\nfunction inDom(n) {\r\n    const doc = n.ownerDocument;\r\n    if (!doc)\r\n        return false;\r\n    return doc.contains(n) || shadowHostInDom(n);\r\n}\r\nconst cachedImplementations = {};\r\nfunction getImplementation(name) {\r\n    const cached = cachedImplementations[name];\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const document = window.document;\r\n    let impl = window[name];\r\n    if (document && typeof document.createElement === 'function') {\r\n        try {\r\n            const sandbox = document.createElement('iframe');\r\n            sandbox.hidden = true;\r\n            document.head.appendChild(sandbox);\r\n            const contentWindow = sandbox.contentWindow;\r\n            if (contentWindow && contentWindow[name]) {\r\n                impl =\r\n                    contentWindow[name];\r\n            }\r\n            document.head.removeChild(sandbox);\r\n        }\r\n        catch (e) {\r\n        }\r\n    }\r\n    return (cachedImplementations[name] = impl.bind(window));\r\n}\r\nfunction onRequestAnimationFrame(...rest) {\r\n    return getImplementation('requestAnimationFrame')(...rest);\r\n}\r\nfunction setTimeout(...rest) {\r\n    return getImplementation('setTimeout')(...rest);\r\n}\r\nfunction clearTimeout(...rest) {\r\n    return getImplementation('clearTimeout')(...rest);\r\n}\n\nexport { StyleSheetMirror, _mirror, clearTimeout, closestElementOfNode, getBaseDimension, getNestedRule, getPositionsAndIndex, getRootShadowHost, getShadowHost, getWindowHeight, getWindowScroll, getWindowWidth, hasShadowRoot, hookSetter, inDom, isAncestorRemoved, isBlocked, isIgnored, isSerialized, isSerializedIframe, isSerializedStylesheet, iterateResolveTree, legacy_isTouchEvent, nowTimestamp, on, onRequestAnimationFrame, patch, polyfill, queueToResolveTrees, setTimeout, shadowHostInDom, throttle, uniqueTextMutations };\n","var EventType = /* @__PURE__ */ ((EventType2) => {\n  EventType2[EventType2[\"DomContentLoaded\"] = 0] = \"DomContentLoaded\";\n  EventType2[EventType2[\"Load\"] = 1] = \"Load\";\n  EventType2[EventType2[\"FullSnapshot\"] = 2] = \"FullSnapshot\";\n  EventType2[EventType2[\"IncrementalSnapshot\"] = 3] = \"IncrementalSnapshot\";\n  EventType2[EventType2[\"Meta\"] = 4] = \"Meta\";\n  EventType2[EventType2[\"Custom\"] = 5] = \"Custom\";\n  EventType2[EventType2[\"Plugin\"] = 6] = \"Plugin\";\n  return EventType2;\n})(EventType || {});\nvar IncrementalSource = /* @__PURE__ */ ((IncrementalSource2) => {\n  IncrementalSource2[IncrementalSource2[\"Mutation\"] = 0] = \"Mutation\";\n  IncrementalSource2[IncrementalSource2[\"MouseMove\"] = 1] = \"MouseMove\";\n  IncrementalSource2[IncrementalSource2[\"MouseInteraction\"] = 2] = \"MouseInteraction\";\n  IncrementalSource2[IncrementalSource2[\"Scroll\"] = 3] = \"Scroll\";\n  IncrementalSource2[IncrementalSource2[\"ViewportResize\"] = 4] = \"ViewportResize\";\n  IncrementalSource2[IncrementalSource2[\"Input\"] = 5] = \"Input\";\n  IncrementalSource2[IncrementalSource2[\"TouchMove\"] = 6] = \"TouchMove\";\n  IncrementalSource2[IncrementalSource2[\"MediaInteraction\"] = 7] = \"MediaInteraction\";\n  IncrementalSource2[IncrementalSource2[\"StyleSheetRule\"] = 8] = \"StyleSheetRule\";\n  IncrementalSource2[IncrementalSource2[\"CanvasMutation\"] = 9] = \"CanvasMutation\";\n  IncrementalSource2[IncrementalSource2[\"Font\"] = 10] = \"Font\";\n  IncrementalSource2[IncrementalSource2[\"Log\"] = 11] = \"Log\";\n  IncrementalSource2[IncrementalSource2[\"Drag\"] = 12] = \"Drag\";\n  IncrementalSource2[IncrementalSource2[\"StyleDeclaration\"] = 13] = \"StyleDeclaration\";\n  IncrementalSource2[IncrementalSource2[\"Selection\"] = 14] = \"Selection\";\n  IncrementalSource2[IncrementalSource2[\"AdoptedStyleSheet\"] = 15] = \"AdoptedStyleSheet\";\n  IncrementalSource2[IncrementalSource2[\"CustomElement\"] = 16] = \"CustomElement\";\n  return IncrementalSource2;\n})(IncrementalSource || {});\nvar MouseInteractions = /* @__PURE__ */ ((MouseInteractions2) => {\n  MouseInteractions2[MouseInteractions2[\"MouseUp\"] = 0] = \"MouseUp\";\n  MouseInteractions2[MouseInteractions2[\"MouseDown\"] = 1] = \"MouseDown\";\n  MouseInteractions2[MouseInteractions2[\"Click\"] = 2] = \"Click\";\n  MouseInteractions2[MouseInteractions2[\"ContextMenu\"] = 3] = \"ContextMenu\";\n  MouseInteractions2[MouseInteractions2[\"DblClick\"] = 4] = \"DblClick\";\n  MouseInteractions2[MouseInteractions2[\"Focus\"] = 5] = \"Focus\";\n  MouseInteractions2[MouseInteractions2[\"Blur\"] = 6] = \"Blur\";\n  MouseInteractions2[MouseInteractions2[\"TouchStart\"] = 7] = \"TouchStart\";\n  MouseInteractions2[MouseInteractions2[\"TouchMove_Departed\"] = 8] = \"TouchMove_Departed\";\n  MouseInteractions2[MouseInteractions2[\"TouchEnd\"] = 9] = \"TouchEnd\";\n  MouseInteractions2[MouseInteractions2[\"TouchCancel\"] = 10] = \"TouchCancel\";\n  return MouseInteractions2;\n})(MouseInteractions || {});\nvar PointerTypes = /* @__PURE__ */ ((PointerTypes2) => {\n  PointerTypes2[PointerTypes2[\"Mouse\"] = 0] = \"Mouse\";\n  PointerTypes2[PointerTypes2[\"Pen\"] = 1] = \"Pen\";\n  PointerTypes2[PointerTypes2[\"Touch\"] = 2] = \"Touch\";\n  return PointerTypes2;\n})(PointerTypes || {});\nvar CanvasContext = /* @__PURE__ */ ((CanvasContext2) => {\n  CanvasContext2[CanvasContext2[\"2D\"] = 0] = \"2D\";\n  CanvasContext2[CanvasContext2[\"WebGL\"] = 1] = \"WebGL\";\n  CanvasContext2[CanvasContext2[\"WebGL2\"] = 2] = \"WebGL2\";\n  return CanvasContext2;\n})(CanvasContext || {});\nvar ReplayerEvents = /* @__PURE__ */ ((ReplayerEvents2) => {\n  ReplayerEvents2[\"Start\"] = \"start\";\n  ReplayerEvents2[\"Pause\"] = \"pause\";\n  ReplayerEvents2[\"Resume\"] = \"resume\";\n  ReplayerEvents2[\"Resize\"] = \"resize\";\n  ReplayerEvents2[\"Finish\"] = \"finish\";\n  ReplayerEvents2[\"FullsnapshotRebuilded\"] = \"fullsnapshot-rebuilded\";\n  ReplayerEvents2[\"LoadStylesheetStart\"] = \"load-stylesheet-start\";\n  ReplayerEvents2[\"LoadStylesheetEnd\"] = \"load-stylesheet-end\";\n  ReplayerEvents2[\"SkipStart\"] = \"skip-start\";\n  ReplayerEvents2[\"SkipEnd\"] = \"skip-end\";\n  ReplayerEvents2[\"MouseInteraction\"] = \"mouse-interaction\";\n  ReplayerEvents2[\"EventCast\"] = \"event-cast\";\n  ReplayerEvents2[\"CustomEvent\"] = \"custom-event\";\n  ReplayerEvents2[\"Flush\"] = \"flush\";\n  ReplayerEvents2[\"StateChange\"] = \"state-change\";\n  ReplayerEvents2[\"PlayBack\"] = \"play-back\";\n  ReplayerEvents2[\"Destroy\"] = \"destroy\";\n  return ReplayerEvents2;\n})(ReplayerEvents || {});\n\nexport { CanvasContext, EventType, IncrementalSource, MouseInteractions, PointerTypes, ReplayerEvents };\n","import { isShadowRoot, isNativeShadowDom, getInputType, getInputValue, shouldMaskInput, needMaskingText, maskInputValue, ignoreAttribute, transformAttribute, toLowerCase, IGNORED_NODE, serializeNodeWithId } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\nimport { isIgnored, isBlocked, isSerialized, isAncestorRemoved, closestElementOfNode, hasShadowRoot, inDom, getShadowHost, isSerializedIframe, isSerializedStylesheet } from '../utils.js';\n\nfunction isNodeInLinkedList(n) {\r\n    return '__ln' in n;\r\n}\r\nclass DoubleLinkedList {\r\n    constructor() {\r\n        this.length = 0;\r\n        this.head = null;\r\n        this.tail = null;\r\n    }\r\n    get(position) {\r\n        if (position >= this.length) {\r\n            throw new Error('Position outside of list range');\r\n        }\r\n        let current = this.head;\r\n        for (let index = 0; index < position; index++) {\r\n            current = current?.next || null;\r\n        }\r\n        return current;\r\n    }\r\n    addNode(n) {\r\n        const node = {\r\n            value: n,\r\n            previous: null,\r\n            next: null,\r\n        };\r\n        n.__ln = node;\r\n        if (n.previousSibling && isNodeInLinkedList(n.previousSibling)) {\r\n            const current = n.previousSibling.__ln.next;\r\n            node.next = current;\r\n            node.previous = n.previousSibling.__ln;\r\n            n.previousSibling.__ln.next = node;\r\n            if (current) {\r\n                current.previous = node;\r\n            }\r\n        }\r\n        else if (n.nextSibling &&\r\n            isNodeInLinkedList(n.nextSibling) &&\r\n            n.nextSibling.__ln.previous) {\r\n            const current = n.nextSibling.__ln.previous;\r\n            node.previous = current;\r\n            node.next = n.nextSibling.__ln;\r\n            n.nextSibling.__ln.previous = node;\r\n            if (current) {\r\n                current.next = node;\r\n            }\r\n        }\r\n        else {\r\n            if (this.head) {\r\n                this.head.previous = node;\r\n            }\r\n            node.next = this.head;\r\n            this.head = node;\r\n        }\r\n        if (node.next === null) {\r\n            this.tail = node;\r\n        }\r\n        this.length++;\r\n    }\r\n    removeNode(n) {\r\n        const current = n.__ln;\r\n        if (!this.head) {\r\n            return;\r\n        }\r\n        if (!current.previous) {\r\n            this.head = current.next;\r\n            if (this.head) {\r\n                this.head.previous = null;\r\n            }\r\n            else {\r\n                this.tail = null;\r\n            }\r\n        }\r\n        else {\r\n            current.previous.next = current.next;\r\n            if (current.next) {\r\n                current.next.previous = current.previous;\r\n            }\r\n            else {\r\n                this.tail = current.previous;\r\n            }\r\n        }\r\n        if (n.__ln) {\r\n            delete n.__ln;\r\n        }\r\n        this.length--;\r\n    }\r\n}\r\nconst moveKey = (id, parentId) => `${id}@${parentId}`;\r\nclass MutationBuffer {\r\n    constructor() {\r\n        this.frozen = false;\r\n        this.locked = false;\r\n        this.texts = [];\r\n        this.attributes = [];\r\n        this.attributeMap = new WeakMap();\r\n        this.removes = [];\r\n        this.mapRemoves = [];\r\n        this.movedMap = {};\r\n        this.addedSet = new Set();\r\n        this.movedSet = new Set();\r\n        this.droppedSet = new Set();\r\n        this.processMutations = (mutations) => {\r\n            mutations.forEach(this.processMutation);\r\n            this.emit();\r\n        };\r\n        this.emit = () => {\r\n            if (this.frozen || this.locked) {\r\n                return;\r\n            }\r\n            const adds = [];\r\n            const addedIds = new Set();\r\n            const addList = new DoubleLinkedList();\r\n            const getNextId = (n) => {\r\n                let ns = n;\r\n                let nextId = IGNORED_NODE;\r\n                while (nextId === IGNORED_NODE) {\r\n                    ns = ns && ns.nextSibling;\r\n                    nextId = ns && this.mirror.getId(ns);\r\n                }\r\n                return nextId;\r\n            };\r\n            const pushAdd = (n) => {\r\n                if (!n.parentNode || !inDom(n)) {\r\n                    return;\r\n                }\r\n                const parentId = isShadowRoot(n.parentNode)\r\n                    ? this.mirror.getId(getShadowHost(n))\r\n                    : this.mirror.getId(n.parentNode);\r\n                const nextId = getNextId(n);\r\n                if (parentId === -1 || nextId === -1) {\r\n                    return addList.addNode(n);\r\n                }\r\n                const sn = serializeNodeWithId(n, {\r\n                    doc: this.doc,\r\n                    mirror: this.mirror,\r\n                    blockClass: this.blockClass,\r\n                    blockSelector: this.blockSelector,\r\n                    maskAllText: this.maskAllText,\r\n                    unblockSelector: this.unblockSelector,\r\n                    maskTextClass: this.maskTextClass,\r\n                    unmaskTextClass: this.unmaskTextClass,\r\n                    maskTextSelector: this.maskTextSelector,\r\n                    unmaskTextSelector: this.unmaskTextSelector,\r\n                    skipChild: true,\r\n                    newlyAddedElement: true,\r\n                    inlineStylesheet: this.inlineStylesheet,\r\n                    maskInputOptions: this.maskInputOptions,\r\n                    maskAttributeFn: this.maskAttributeFn,\r\n                    maskTextFn: this.maskTextFn,\r\n                    maskInputFn: this.maskInputFn,\r\n                    slimDOMOptions: this.slimDOMOptions,\r\n                    dataURLOptions: this.dataURLOptions,\r\n                    recordCanvas: this.recordCanvas,\r\n                    inlineImages: this.inlineImages,\r\n                    onSerialize: (currentN) => {\r\n                        if (isSerializedIframe(currentN, this.mirror)) {\r\n                            this.iframeManager.addIframe(currentN);\r\n                        }\r\n                        if (isSerializedStylesheet(currentN, this.mirror)) {\r\n                            this.stylesheetManager.trackLinkElement(currentN);\r\n                        }\r\n                        if (hasShadowRoot(n)) {\r\n                            this.shadowDomManager.addShadowRoot(n.shadowRoot, this.doc);\r\n                        }\r\n                    },\r\n                    onIframeLoad: (iframe, childSn) => {\r\n                        this.iframeManager.attachIframe(iframe, childSn);\r\n                        this.shadowDomManager.observeAttachShadow(iframe);\r\n                    },\r\n                    onStylesheetLoad: (link, childSn) => {\r\n                        this.stylesheetManager.attachLinkElement(link, childSn);\r\n                    },\r\n                });\r\n                if (sn) {\r\n                    adds.push({\r\n                        parentId,\r\n                        nextId,\r\n                        node: sn,\r\n                    });\r\n                    addedIds.add(sn.id);\r\n                }\r\n            };\r\n            while (this.mapRemoves.length) {\r\n                this.mirror.removeNodeFromMap(this.mapRemoves.shift());\r\n            }\r\n            for (const n of this.movedSet) {\r\n                if (isParentRemoved(this.removes, n, this.mirror) &&\r\n                    !this.movedSet.has(n.parentNode)) {\r\n                    continue;\r\n                }\r\n                pushAdd(n);\r\n            }\r\n            for (const n of this.addedSet) {\r\n                if (!isAncestorInSet(this.droppedSet, n) &&\r\n                    !isParentRemoved(this.removes, n, this.mirror)) {\r\n                    pushAdd(n);\r\n                }\r\n                else if (isAncestorInSet(this.movedSet, n)) {\r\n                    pushAdd(n);\r\n                }\r\n                else {\r\n                    this.droppedSet.add(n);\r\n                }\r\n            }\r\n            let candidate = null;\r\n            while (addList.length) {\r\n                let node = null;\r\n                if (candidate) {\r\n                    const parentId = this.mirror.getId(candidate.value.parentNode);\r\n                    const nextId = getNextId(candidate.value);\r\n                    if (parentId !== -1 && nextId !== -1) {\r\n                        node = candidate;\r\n                    }\r\n                }\r\n                if (!node) {\r\n                    let tailNode = addList.tail;\r\n                    while (tailNode) {\r\n                        const _node = tailNode;\r\n                        tailNode = tailNode.previous;\r\n                        if (_node) {\r\n                            const parentId = this.mirror.getId(_node.value.parentNode);\r\n                            const nextId = getNextId(_node.value);\r\n                            if (nextId === -1)\r\n                                continue;\r\n                            else if (parentId !== -1) {\r\n                                node = _node;\r\n                                break;\r\n                            }\r\n                            else {\r\n                                const unhandledNode = _node.value;\r\n                                if (unhandledNode.parentNode &&\r\n                                    unhandledNode.parentNode.nodeType ===\r\n                                        Node.DOCUMENT_FRAGMENT_NODE) {\r\n                                    const shadowHost = unhandledNode.parentNode\r\n                                        .host;\r\n                                    const parentId = this.mirror.getId(shadowHost);\r\n                                    if (parentId !== -1) {\r\n                                        node = _node;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (!node) {\r\n                    while (addList.head) {\r\n                        addList.removeNode(addList.head.value);\r\n                    }\r\n                    break;\r\n                }\r\n                candidate = node.previous;\r\n                addList.removeNode(node.value);\r\n                pushAdd(node.value);\r\n            }\r\n            const payload = {\r\n                texts: this.texts\r\n                    .map((text) => ({\r\n                    id: this.mirror.getId(text.node),\r\n                    value: text.value,\r\n                }))\r\n                    .filter((text) => !addedIds.has(text.id))\r\n                    .filter((text) => this.mirror.has(text.id)),\r\n                attributes: this.attributes\r\n                    .map((attribute) => {\r\n                    const { attributes } = attribute;\r\n                    if (typeof attributes.style === 'string') {\r\n                        const diffAsStr = JSON.stringify(attribute.styleDiff);\r\n                        const unchangedAsStr = JSON.stringify(attribute._unchangedStyles);\r\n                        if (diffAsStr.length < attributes.style.length) {\r\n                            if ((diffAsStr + unchangedAsStr).split('var(').length ===\r\n                                attributes.style.split('var(').length) {\r\n                                attributes.style = attribute.styleDiff;\r\n                            }\r\n                        }\r\n                    }\r\n                    return {\r\n                        id: this.mirror.getId(attribute.node),\r\n                        attributes: attributes,\r\n                    };\r\n                })\r\n                    .filter((attribute) => !addedIds.has(attribute.id))\r\n                    .filter((attribute) => this.mirror.has(attribute.id)),\r\n                removes: this.removes,\r\n                adds,\r\n            };\r\n            if (!payload.texts.length &&\r\n                !payload.attributes.length &&\r\n                !payload.removes.length &&\r\n                !payload.adds.length) {\r\n                return;\r\n            }\r\n            this.texts = [];\r\n            this.attributes = [];\r\n            this.attributeMap = new WeakMap();\r\n            this.removes = [];\r\n            this.addedSet = new Set();\r\n            this.movedSet = new Set();\r\n            this.droppedSet = new Set();\r\n            this.movedMap = {};\r\n            this.mutationCb(payload);\r\n        };\r\n        this.processMutation = (m) => {\r\n            if (isIgnored(m.target, this.mirror)) {\r\n                return;\r\n            }\r\n            switch (m.type) {\r\n                case 'characterData': {\r\n                    const value = m.target.textContent;\r\n                    if (!isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) &&\r\n                        value !== m.oldValue) {\r\n                        this.texts.push({\r\n                            value: needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextClass, this.unmaskTextSelector, this.maskAllText) && value\r\n                                ? this.maskTextFn\r\n                                    ? this.maskTextFn(value, closestElementOfNode(m.target))\r\n                                    : value.replace(/[\\S]/g, '*')\r\n                                : value,\r\n                            node: m.target,\r\n                        });\r\n                    }\r\n                    break;\r\n                }\r\n                case 'attributes': {\r\n                    const target = m.target;\r\n                    let attributeName = m.attributeName;\r\n                    let value = m.target.getAttribute(attributeName);\r\n                    if (attributeName === 'value') {\r\n                        const type = getInputType(target);\r\n                        const tagName = target.tagName;\r\n                        value = getInputValue(target, tagName, type);\r\n                        const isInputMasked = shouldMaskInput({\r\n                            maskInputOptions: this.maskInputOptions,\r\n                            tagName,\r\n                            type,\r\n                        });\r\n                        const forceMask = needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextClass, this.unmaskTextSelector, isInputMasked);\r\n                        value = maskInputValue({\r\n                            isMasked: forceMask,\r\n                            element: target,\r\n                            value,\r\n                            maskInputFn: this.maskInputFn,\r\n                        });\r\n                    }\r\n                    if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) ||\r\n                        value === m.oldValue) {\r\n                        return;\r\n                    }\r\n                    let item = this.attributeMap.get(m.target);\r\n                    if (target.tagName === 'IFRAME' &&\r\n                        attributeName === 'src' &&\r\n                        !this.keepIframeSrcFn(value)) {\r\n                        if (!target.contentDocument) {\r\n                            attributeName = 'rr_src';\r\n                        }\r\n                        else {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (!item) {\r\n                        item = {\r\n                            node: m.target,\r\n                            attributes: {},\r\n                            styleDiff: {},\r\n                            _unchangedStyles: {},\r\n                        };\r\n                        this.attributes.push(item);\r\n                        this.attributeMap.set(m.target, item);\r\n                    }\r\n                    if (attributeName === 'type' &&\r\n                        target.tagName === 'INPUT' &&\r\n                        (m.oldValue || '').toLowerCase() === 'password') {\r\n                        target.setAttribute('data-rr-is-password', 'true');\r\n                    }\r\n                    if (!ignoreAttribute(target.tagName, attributeName)) {\r\n                        item.attributes[attributeName] = transformAttribute(this.doc, toLowerCase(target.tagName), toLowerCase(attributeName), value, target, this.maskAttributeFn);\r\n                        if (attributeName === 'style') {\r\n                            if (!this.unattachedDoc) {\r\n                                try {\r\n                                    this.unattachedDoc =\r\n                                        document.implementation.createHTMLDocument();\r\n                                }\r\n                                catch (e) {\r\n                                    this.unattachedDoc = this.doc;\r\n                                }\r\n                            }\r\n                            const old = this.unattachedDoc.createElement('span');\r\n                            if (m.oldValue) {\r\n                                old.setAttribute('style', m.oldValue);\r\n                            }\r\n                            for (const pname of Array.from(target.style)) {\r\n                                const newValue = target.style.getPropertyValue(pname);\r\n                                const newPriority = target.style.getPropertyPriority(pname);\r\n                                if (newValue !== old.style.getPropertyValue(pname) ||\r\n                                    newPriority !== old.style.getPropertyPriority(pname)) {\r\n                                    if (newPriority === '') {\r\n                                        item.styleDiff[pname] = newValue;\r\n                                    }\r\n                                    else {\r\n                                        item.styleDiff[pname] = [newValue, newPriority];\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    item._unchangedStyles[pname] = [newValue, newPriority];\r\n                                }\r\n                            }\r\n                            for (const pname of Array.from(old.style)) {\r\n                                if (target.style.getPropertyValue(pname) === '') {\r\n                                    item.styleDiff[pname] = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case 'childList': {\r\n                    if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, true)) {\r\n                        return;\r\n                    }\r\n                    m.addedNodes.forEach((n) => this.genAdds(n, m.target));\r\n                    m.removedNodes.forEach((n) => {\r\n                        const nodeId = this.mirror.getId(n);\r\n                        const parentId = isShadowRoot(m.target)\r\n                            ? this.mirror.getId(m.target.host)\r\n                            : this.mirror.getId(m.target);\r\n                        if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) ||\r\n                            isIgnored(n, this.mirror) ||\r\n                            !isSerialized(n, this.mirror)) {\r\n                            return;\r\n                        }\r\n                        if (this.addedSet.has(n)) {\r\n                            deepDelete(this.addedSet, n);\r\n                            this.droppedSet.add(n);\r\n                        }\r\n                        else if (this.addedSet.has(m.target) && nodeId === -1) ;\r\n                        else if (isAncestorRemoved(m.target, this.mirror)) ;\r\n                        else if (this.movedSet.has(n) &&\r\n                            this.movedMap[moveKey(nodeId, parentId)]) {\r\n                            deepDelete(this.movedSet, n);\r\n                        }\r\n                        else {\r\n                            this.removes.push({\r\n                                parentId,\r\n                                id: nodeId,\r\n                                isShadow: isShadowRoot(m.target) && isNativeShadowDom(m.target)\r\n                                    ? true\r\n                                    : undefined,\r\n                            });\r\n                        }\r\n                        this.mapRemoves.push(n);\r\n                    });\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n        this.genAdds = (n, target) => {\r\n            if (this.processedNodeManager.inOtherBuffer(n, this))\r\n                return;\r\n            if (this.addedSet.has(n) || this.movedSet.has(n))\r\n                return;\r\n            if (this.mirror.hasNode(n)) {\r\n                if (isIgnored(n, this.mirror)) {\r\n                    return;\r\n                }\r\n                this.movedSet.add(n);\r\n                let targetId = null;\r\n                if (target && this.mirror.hasNode(target)) {\r\n                    targetId = this.mirror.getId(target);\r\n                }\r\n                if (targetId && targetId !== -1) {\r\n                    this.movedMap[moveKey(this.mirror.getId(n), targetId)] = true;\r\n                }\r\n            }\r\n            else {\r\n                this.addedSet.add(n);\r\n                this.droppedSet.delete(n);\r\n            }\r\n            if (!isBlocked(n, this.blockClass, this.blockSelector, this.unblockSelector, false)) {\r\n                n.childNodes.forEach((childN) => this.genAdds(childN));\r\n                if (hasShadowRoot(n)) {\r\n                    n.shadowRoot.childNodes.forEach((childN) => {\r\n                        this.processedNodeManager.add(childN, this);\r\n                        this.genAdds(childN, n);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n    init(options) {\r\n        [\r\n            'mutationCb',\r\n            'blockClass',\r\n            'blockSelector',\r\n            'unblockSelector',\r\n            'maskAllText',\r\n            'maskTextClass',\r\n            'unmaskTextClass',\r\n            'maskTextSelector',\r\n            'unmaskTextSelector',\r\n            'inlineStylesheet',\r\n            'maskInputOptions',\r\n            'maskAttributeFn',\r\n            'maskTextFn',\r\n            'maskInputFn',\r\n            'keepIframeSrcFn',\r\n            'recordCanvas',\r\n            'inlineImages',\r\n            'slimDOMOptions',\r\n            'dataURLOptions',\r\n            'doc',\r\n            'mirror',\r\n            'iframeManager',\r\n            'stylesheetManager',\r\n            'shadowDomManager',\r\n            'canvasManager',\r\n            'processedNodeManager',\r\n        ].forEach((key) => {\r\n            this[key] = options[key];\r\n        });\r\n    }\r\n    freeze() {\r\n        this.frozen = true;\r\n        this.canvasManager.freeze();\r\n    }\r\n    unfreeze() {\r\n        this.frozen = false;\r\n        this.canvasManager.unfreeze();\r\n        this.emit();\r\n    }\r\n    isFrozen() {\r\n        return this.frozen;\r\n    }\r\n    lock() {\r\n        this.locked = true;\r\n        this.canvasManager.lock();\r\n    }\r\n    unlock() {\r\n        this.locked = false;\r\n        this.canvasManager.unlock();\r\n        this.emit();\r\n    }\r\n    reset() {\r\n        this.shadowDomManager.reset();\r\n        this.canvasManager.reset();\r\n    }\r\n}\r\nfunction deepDelete(addsSet, n) {\r\n    addsSet.delete(n);\r\n    n.childNodes.forEach((childN) => deepDelete(addsSet, childN));\r\n}\r\nfunction isParentRemoved(removes, n, mirror) {\r\n    if (removes.length === 0)\r\n        return false;\r\n    return _isParentRemoved(removes, n, mirror);\r\n}\r\nfunction _isParentRemoved(removes, n, mirror) {\r\n    const { parentNode } = n;\r\n    if (!parentNode) {\r\n        return false;\r\n    }\r\n    const parentId = mirror.getId(parentNode);\r\n    if (removes.some((r) => r.id === parentId)) {\r\n        return true;\r\n    }\r\n    return _isParentRemoved(removes, parentNode, mirror);\r\n}\r\nfunction isAncestorInSet(set, n) {\r\n    if (set.size === 0)\r\n        return false;\r\n    return _isAncestorInSet(set, n);\r\n}\r\nfunction _isAncestorInSet(set, n) {\r\n    const { parentNode } = n;\r\n    if (!parentNode) {\r\n        return false;\r\n    }\r\n    if (set.has(parentNode)) {\r\n        return true;\r\n    }\r\n    return _isAncestorInSet(set, parentNode);\r\n}\n\nexport { MutationBuffer as default };\n","let errorHandler;\r\nfunction registerErrorHandler(handler) {\r\n    errorHandler = handler;\r\n}\r\nfunction unregisterErrorHandler() {\r\n    errorHandler = undefined;\r\n}\r\nconst callbackWrapper = (cb) => {\r\n    if (!errorHandler) {\r\n        return cb;\r\n    }\r\n    const rrwebWrapped = ((...rest) => {\r\n        try {\r\n            return cb(...rest);\r\n        }\r\n        catch (error) {\r\n            if (errorHandler && errorHandler(error) === true) {\r\n                return () => {\r\n                };\r\n            }\r\n            throw error;\r\n        }\r\n    });\r\n    return rrwebWrapped;\r\n};\n\nexport { callbackWrapper, registerErrorHandler, unregisterErrorHandler };\n","import { toLowerCase, toUpperCase, getInputType, getInputValue, shouldMaskInput, needMaskingText, maskInputValue } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\nimport { on, throttle, isBlocked, getWindowScroll, hookSetter, patch, setTimeout, legacy_isTouchEvent, nowTimestamp, getWindowHeight, getWindowWidth } from '../utils.js';\nimport { MouseInteractions, IncrementalSource, PointerTypes } from '../../../types/dist/rrweb-types.js';\nimport MutationBuffer from './mutation.js';\nimport { callbackWrapper } from './error-handler.js';\n\nconst mutationBuffers = [];\r\nfunction getEventTarget(event) {\r\n    try {\r\n        if ('composedPath' in event) {\r\n            const path = event.composedPath();\r\n            if (path.length) {\r\n                return path[0];\r\n            }\r\n        }\r\n        else if ('path' in event && event.path.length) {\r\n            return event.path[0];\r\n        }\r\n    }\r\n    catch {\r\n    }\r\n    return event && event.target;\r\n}\r\nfunction initMutationObserver(options, rootEl) {\r\n    const mutationBuffer = new MutationBuffer();\r\n    mutationBuffers.push(mutationBuffer);\r\n    mutationBuffer.init(options);\r\n    let mutationObserverCtor = window.MutationObserver ||\r\n        window.__rrMutationObserver;\r\n    const angularZoneSymbol = window?.Zone?.__symbol__?.('MutationObserver');\r\n    if (angularZoneSymbol &&\r\n        window[angularZoneSymbol]) {\r\n        mutationObserverCtor = window[angularZoneSymbol];\r\n    }\r\n    const observer = new mutationObserverCtor(callbackWrapper((mutations) => {\r\n        if (options.onMutation && options.onMutation(mutations) === false) {\r\n            return;\r\n        }\r\n        mutationBuffer.processMutations.bind(mutationBuffer)(mutations);\r\n    }));\r\n    observer.observe(rootEl, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        characterData: true,\r\n        characterDataOldValue: true,\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\r\nfunction initMoveObserver({ mousemoveCb, sampling, doc, mirror, }) {\r\n    if (sampling.mousemove === false) {\r\n        return () => {\r\n        };\r\n    }\r\n    const threshold = typeof sampling.mousemove === 'number' ? sampling.mousemove : 50;\r\n    const callbackThreshold = typeof sampling.mousemoveCallback === 'number'\r\n        ? sampling.mousemoveCallback\r\n        : 500;\r\n    let positions = [];\r\n    let timeBaseline;\r\n    const wrappedCb = throttle(callbackWrapper((source) => {\r\n        const totalOffset = Date.now() - timeBaseline;\r\n        mousemoveCb(positions.map((p) => {\r\n            p.timeOffset -= totalOffset;\r\n            return p;\r\n        }), source);\r\n        positions = [];\r\n        timeBaseline = null;\r\n    }), callbackThreshold);\r\n    const updatePosition = callbackWrapper(throttle(callbackWrapper((evt) => {\r\n        const target = getEventTarget(evt);\r\n        const { clientX, clientY } = legacy_isTouchEvent(evt)\r\n            ? evt.changedTouches[0]\r\n            : evt;\r\n        if (!timeBaseline) {\r\n            timeBaseline = nowTimestamp();\r\n        }\r\n        positions.push({\r\n            x: clientX,\r\n            y: clientY,\r\n            id: mirror.getId(target),\r\n            timeOffset: nowTimestamp() - timeBaseline,\r\n        });\r\n        wrappedCb(typeof DragEvent !== 'undefined' && evt instanceof DragEvent\r\n            ? IncrementalSource.Drag\r\n            : evt instanceof MouseEvent\r\n                ? IncrementalSource.MouseMove\r\n                : IncrementalSource.TouchMove);\r\n    }), threshold, {\r\n        trailing: false,\r\n    }));\r\n    const handlers = [\r\n        on('mousemove', updatePosition, doc),\r\n        on('touchmove', updatePosition, doc),\r\n        on('drag', updatePosition, doc),\r\n    ];\r\n    return callbackWrapper(() => {\r\n        handlers.forEach((h) => h());\r\n    });\r\n}\r\nfunction initMouseInteractionObserver({ mouseInteractionCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {\r\n    if (sampling.mouseInteraction === false) {\r\n        return () => {\r\n        };\r\n    }\r\n    const disableMap = sampling.mouseInteraction === true ||\r\n        sampling.mouseInteraction === undefined\r\n        ? {}\r\n        : sampling.mouseInteraction;\r\n    const handlers = [];\r\n    let currentPointerType = null;\r\n    const getHandler = (eventKey) => {\r\n        return (event) => {\r\n            const target = getEventTarget(event);\r\n            if (isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\r\n                return;\r\n            }\r\n            let pointerType = null;\r\n            let thisEventKey = eventKey;\r\n            if ('pointerType' in event) {\r\n                switch (event.pointerType) {\r\n                    case 'mouse':\r\n                        pointerType = PointerTypes.Mouse;\r\n                        break;\r\n                    case 'touch':\r\n                        pointerType = PointerTypes.Touch;\r\n                        break;\r\n                    case 'pen':\r\n                        pointerType = PointerTypes.Pen;\r\n                        break;\r\n                }\r\n                if (pointerType === PointerTypes.Touch) {\r\n                    if (MouseInteractions[eventKey] === MouseInteractions.MouseDown) {\r\n                        thisEventKey = 'TouchStart';\r\n                    }\r\n                    else if (MouseInteractions[eventKey] === MouseInteractions.MouseUp) {\r\n                        thisEventKey = 'TouchEnd';\r\n                    }\r\n                }\r\n                else if (pointerType === PointerTypes.Pen) ;\r\n            }\r\n            else if (legacy_isTouchEvent(event)) {\r\n                pointerType = PointerTypes.Touch;\r\n            }\r\n            if (pointerType !== null) {\r\n                currentPointerType = pointerType;\r\n                if ((thisEventKey.startsWith('Touch') &&\r\n                    pointerType === PointerTypes.Touch) ||\r\n                    (thisEventKey.startsWith('Mouse') &&\r\n                        pointerType === PointerTypes.Mouse)) {\r\n                    pointerType = null;\r\n                }\r\n            }\r\n            else if (MouseInteractions[eventKey] === MouseInteractions.Click) {\r\n                pointerType = currentPointerType;\r\n                currentPointerType = null;\r\n            }\r\n            const e = legacy_isTouchEvent(event) ? event.changedTouches[0] : event;\r\n            if (!e) {\r\n                return;\r\n            }\r\n            const id = mirror.getId(target);\r\n            const { clientX, clientY } = e;\r\n            callbackWrapper(mouseInteractionCb)({\r\n                type: MouseInteractions[thisEventKey],\r\n                id,\r\n                x: clientX,\r\n                y: clientY,\r\n                ...(pointerType !== null && { pointerType }),\r\n            });\r\n        };\r\n    };\r\n    Object.keys(MouseInteractions)\r\n        .filter((key) => Number.isNaN(Number(key)) &&\r\n        !key.endsWith('_Departed') &&\r\n        disableMap[key] !== false)\r\n        .forEach((eventKey) => {\r\n        let eventName = toLowerCase(eventKey);\r\n        const handler = getHandler(eventKey);\r\n        if (window.PointerEvent) {\r\n            switch (MouseInteractions[eventKey]) {\r\n                case MouseInteractions.MouseDown:\r\n                case MouseInteractions.MouseUp:\r\n                    eventName = eventName.replace('mouse', 'pointer');\r\n                    break;\r\n                case MouseInteractions.TouchStart:\r\n                case MouseInteractions.TouchEnd:\r\n                    return;\r\n            }\r\n        }\r\n        handlers.push(on(eventName, handler, doc));\r\n    });\r\n    return callbackWrapper(() => {\r\n        handlers.forEach((h) => h());\r\n    });\r\n}\r\nfunction initScrollObserver({ scrollCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {\r\n    const updatePosition = callbackWrapper(throttle(callbackWrapper((evt) => {\r\n        const target = getEventTarget(evt);\r\n        if (!target ||\r\n            isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\r\n            return;\r\n        }\r\n        const id = mirror.getId(target);\r\n        if (target === doc && doc.defaultView) {\r\n            const scrollLeftTop = getWindowScroll(doc.defaultView);\r\n            scrollCb({\r\n                id,\r\n                x: scrollLeftTop.left,\r\n                y: scrollLeftTop.top,\r\n            });\r\n        }\r\n        else {\r\n            scrollCb({\r\n                id,\r\n                x: target.scrollLeft,\r\n                y: target.scrollTop,\r\n            });\r\n        }\r\n    }), sampling.scroll || 100));\r\n    return on('scroll', updatePosition, doc);\r\n}\r\nfunction initViewportResizeObserver({ viewportResizeCb }, { win }) {\r\n    let lastH = -1;\r\n    let lastW = -1;\r\n    const updateDimension = callbackWrapper(throttle(callbackWrapper(() => {\r\n        const height = getWindowHeight();\r\n        const width = getWindowWidth();\r\n        if (lastH !== height || lastW !== width) {\r\n            viewportResizeCb({\r\n                width: Number(width),\r\n                height: Number(height),\r\n            });\r\n            lastH = height;\r\n            lastW = width;\r\n        }\r\n    }), 200));\r\n    return on('resize', updateDimension, win);\r\n}\r\nconst INPUT_TAGS = ['INPUT', 'TEXTAREA', 'SELECT'];\r\nconst lastInputValueMap = new WeakMap();\r\nfunction initInputObserver({ inputCb, doc, mirror, blockClass, blockSelector, unblockSelector, ignoreClass, ignoreSelector, maskInputOptions, maskInputFn, sampling, userTriggeredOnInput, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, }) {\r\n    function eventHandler(event) {\r\n        let target = getEventTarget(event);\r\n        const userTriggered = event.isTrusted;\r\n        const tagName = target && toUpperCase(target.tagName);\r\n        if (tagName === 'OPTION')\r\n            target = target.parentElement;\r\n        if (!target ||\r\n            !tagName ||\r\n            INPUT_TAGS.indexOf(tagName) < 0 ||\r\n            isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\r\n            return;\r\n        }\r\n        const el = target;\r\n        if (el.classList.contains(ignoreClass) ||\r\n            (ignoreSelector && el.matches(ignoreSelector))) {\r\n            return;\r\n        }\r\n        const type = getInputType(target);\r\n        let text = getInputValue(el, tagName, type);\r\n        let isChecked = false;\r\n        const isInputMasked = shouldMaskInput({\r\n            maskInputOptions,\r\n            tagName,\r\n            type,\r\n        });\r\n        const forceMask = needMaskingText(target, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, isInputMasked);\r\n        if (type === 'radio' || type === 'checkbox') {\r\n            isChecked = target.checked;\r\n        }\r\n        text = maskInputValue({\r\n            isMasked: forceMask,\r\n            element: target,\r\n            value: text,\r\n            maskInputFn,\r\n        });\r\n        cbWithDedup(target, userTriggeredOnInput\r\n            ? { text, isChecked, userTriggered }\r\n            : { text, isChecked });\r\n        const name = target.name;\r\n        if (type === 'radio' && name && isChecked) {\r\n            doc\r\n                .querySelectorAll(`input[type=\"radio\"][name=\"${name}\"]`)\r\n                .forEach((el) => {\r\n                if (el !== target) {\r\n                    const text = maskInputValue({\r\n                        isMasked: forceMask,\r\n                        element: el,\r\n                        value: getInputValue(el, tagName, type),\r\n                        maskInputFn,\r\n                    });\r\n                    cbWithDedup(el, userTriggeredOnInput\r\n                        ? { text, isChecked: !isChecked, userTriggered: false }\r\n                        : { text, isChecked: !isChecked });\r\n                }\r\n            });\r\n        }\r\n    }\r\n    function cbWithDedup(target, v) {\r\n        const lastInputValue = lastInputValueMap.get(target);\r\n        if (!lastInputValue ||\r\n            lastInputValue.text !== v.text ||\r\n            lastInputValue.isChecked !== v.isChecked) {\r\n            lastInputValueMap.set(target, v);\r\n            const id = mirror.getId(target);\r\n            callbackWrapper(inputCb)({\r\n                ...v,\r\n                id,\r\n            });\r\n        }\r\n    }\r\n    const events = sampling.input === 'last' ? ['change'] : ['input', 'change'];\r\n    const handlers = events.map((eventName) => on(eventName, callbackWrapper(eventHandler), doc));\r\n    const currentWindow = doc.defaultView;\r\n    if (!currentWindow) {\r\n        return () => {\r\n            handlers.forEach((h) => h());\r\n        };\r\n    }\r\n    const propertyDescriptor = currentWindow.Object.getOwnPropertyDescriptor(currentWindow.HTMLInputElement.prototype, 'value');\r\n    const hookProperties = [\r\n        [currentWindow.HTMLInputElement.prototype, 'value'],\r\n        [currentWindow.HTMLInputElement.prototype, 'checked'],\r\n        [currentWindow.HTMLSelectElement.prototype, 'value'],\r\n        [currentWindow.HTMLTextAreaElement.prototype, 'value'],\r\n        [currentWindow.HTMLSelectElement.prototype, 'selectedIndex'],\r\n        [currentWindow.HTMLOptionElement.prototype, 'selected'],\r\n    ];\r\n    if (propertyDescriptor && propertyDescriptor.set) {\r\n        handlers.push(...hookProperties.map((p) => hookSetter(p[0], p[1], {\r\n            set() {\r\n                callbackWrapper(eventHandler)({\r\n                    target: this,\r\n                    isTrusted: false,\r\n                });\r\n            },\r\n        }, false, currentWindow)));\r\n    }\r\n    return callbackWrapper(() => {\r\n        handlers.forEach((h) => h());\r\n    });\r\n}\r\nfunction getNestedCSSRulePositions(rule) {\r\n    const positions = [];\r\n    function recurse(childRule, pos) {\r\n        if ((hasNestedCSSRule('CSSGroupingRule') &&\r\n            childRule.parentRule instanceof CSSGroupingRule) ||\r\n            (hasNestedCSSRule('CSSMediaRule') &&\r\n                childRule.parentRule instanceof CSSMediaRule) ||\r\n            (hasNestedCSSRule('CSSSupportsRule') &&\r\n                childRule.parentRule instanceof CSSSupportsRule) ||\r\n            (hasNestedCSSRule('CSSConditionRule') &&\r\n                childRule.parentRule instanceof CSSConditionRule)) {\r\n            const rules = Array.from(childRule.parentRule.cssRules);\r\n            const index = rules.indexOf(childRule);\r\n            pos.unshift(index);\r\n        }\r\n        else if (childRule.parentStyleSheet) {\r\n            const rules = Array.from(childRule.parentStyleSheet.cssRules);\r\n            const index = rules.indexOf(childRule);\r\n            pos.unshift(index);\r\n        }\r\n        return pos;\r\n    }\r\n    return recurse(rule, positions);\r\n}\r\nfunction getIdAndStyleId(sheet, mirror, styleMirror) {\r\n    let id, styleId;\r\n    if (!sheet)\r\n        return {};\r\n    if (sheet.ownerNode)\r\n        id = mirror.getId(sheet.ownerNode);\r\n    else\r\n        styleId = styleMirror.getId(sheet);\r\n    return {\r\n        styleId,\r\n        id,\r\n    };\r\n}\r\nfunction initStyleSheetObserver({ styleSheetRuleCb, mirror, stylesheetManager }, { win }) {\r\n    if (!win.CSSStyleSheet || !win.CSSStyleSheet.prototype) {\r\n        return () => {\r\n        };\r\n    }\r\n    const insertRule = win.CSSStyleSheet.prototype.insertRule;\r\n    win.CSSStyleSheet.prototype.insertRule = new Proxy(insertRule, {\r\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\r\n            const [rule, index] = argumentsList;\r\n            const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\r\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\r\n                styleSheetRuleCb({\r\n                    id,\r\n                    styleId,\r\n                    adds: [{ rule, index }],\r\n                });\r\n            }\r\n            return target.apply(thisArg, argumentsList);\r\n        }),\r\n    });\r\n    const deleteRule = win.CSSStyleSheet.prototype.deleteRule;\r\n    win.CSSStyleSheet.prototype.deleteRule = new Proxy(deleteRule, {\r\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\r\n            const [index] = argumentsList;\r\n            const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\r\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\r\n                styleSheetRuleCb({\r\n                    id,\r\n                    styleId,\r\n                    removes: [{ index }],\r\n                });\r\n            }\r\n            return target.apply(thisArg, argumentsList);\r\n        }),\r\n    });\r\n    let replace;\r\n    if (win.CSSStyleSheet.prototype.replace) {\r\n        replace = win.CSSStyleSheet.prototype.replace;\r\n        win.CSSStyleSheet.prototype.replace = new Proxy(replace, {\r\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\r\n                const [text] = argumentsList;\r\n                const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\r\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\r\n                    styleSheetRuleCb({\r\n                        id,\r\n                        styleId,\r\n                        replace: text,\r\n                    });\r\n                }\r\n                return target.apply(thisArg, argumentsList);\r\n            }),\r\n        });\r\n    }\r\n    let replaceSync;\r\n    if (win.CSSStyleSheet.prototype.replaceSync) {\r\n        replaceSync = win.CSSStyleSheet.prototype.replaceSync;\r\n        win.CSSStyleSheet.prototype.replaceSync = new Proxy(replaceSync, {\r\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\r\n                const [text] = argumentsList;\r\n                const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\r\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\r\n                    styleSheetRuleCb({\r\n                        id,\r\n                        styleId,\r\n                        replaceSync: text,\r\n                    });\r\n                }\r\n                return target.apply(thisArg, argumentsList);\r\n            }),\r\n        });\r\n    }\r\n    const supportedNestedCSSRuleTypes = {};\r\n    if (canMonkeyPatchNestedCSSRule('CSSGroupingRule')) {\r\n        supportedNestedCSSRuleTypes.CSSGroupingRule = win.CSSGroupingRule;\r\n    }\r\n    else {\r\n        if (canMonkeyPatchNestedCSSRule('CSSMediaRule')) {\r\n            supportedNestedCSSRuleTypes.CSSMediaRule = win.CSSMediaRule;\r\n        }\r\n        if (canMonkeyPatchNestedCSSRule('CSSConditionRule')) {\r\n            supportedNestedCSSRuleTypes.CSSConditionRule = win.CSSConditionRule;\r\n        }\r\n        if (canMonkeyPatchNestedCSSRule('CSSSupportsRule')) {\r\n            supportedNestedCSSRuleTypes.CSSSupportsRule = win.CSSSupportsRule;\r\n        }\r\n    }\r\n    const unmodifiedFunctions = {};\r\n    Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\r\n        unmodifiedFunctions[typeKey] = {\r\n            insertRule: type.prototype.insertRule,\r\n            deleteRule: type.prototype.deleteRule,\r\n        };\r\n        type.prototype.insertRule = new Proxy(unmodifiedFunctions[typeKey].insertRule, {\r\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\r\n                const [rule, index] = argumentsList;\r\n                const { id, styleId } = getIdAndStyleId(thisArg.parentStyleSheet, mirror, stylesheetManager.styleMirror);\r\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\r\n                    styleSheetRuleCb({\r\n                        id,\r\n                        styleId,\r\n                        adds: [\r\n                            {\r\n                                rule,\r\n                                index: [\r\n                                    ...getNestedCSSRulePositions(thisArg),\r\n                                    index || 0,\r\n                                ],\r\n                            },\r\n                        ],\r\n                    });\r\n                }\r\n                return target.apply(thisArg, argumentsList);\r\n            }),\r\n        });\r\n        type.prototype.deleteRule = new Proxy(unmodifiedFunctions[typeKey].deleteRule, {\r\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\r\n                const [index] = argumentsList;\r\n                const { id, styleId } = getIdAndStyleId(thisArg.parentStyleSheet, mirror, stylesheetManager.styleMirror);\r\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\r\n                    styleSheetRuleCb({\r\n                        id,\r\n                        styleId,\r\n                        removes: [\r\n                            { index: [...getNestedCSSRulePositions(thisArg), index] },\r\n                        ],\r\n                    });\r\n                }\r\n                return target.apply(thisArg, argumentsList);\r\n            }),\r\n        });\r\n    });\r\n    return callbackWrapper(() => {\r\n        win.CSSStyleSheet.prototype.insertRule = insertRule;\r\n        win.CSSStyleSheet.prototype.deleteRule = deleteRule;\r\n        replace && (win.CSSStyleSheet.prototype.replace = replace);\r\n        replaceSync && (win.CSSStyleSheet.prototype.replaceSync = replaceSync);\r\n        Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\r\n            type.prototype.insertRule = unmodifiedFunctions[typeKey].insertRule;\r\n            type.prototype.deleteRule = unmodifiedFunctions[typeKey].deleteRule;\r\n        });\r\n    });\r\n}\r\nfunction initAdoptedStyleSheetObserver({ mirror, stylesheetManager, }, host) {\r\n    let hostId = null;\r\n    if (host.nodeName === '#document')\r\n        hostId = mirror.getId(host);\r\n    else\r\n        hostId = mirror.getId(host.host);\r\n    const patchTarget = host.nodeName === '#document'\r\n        ? host.defaultView?.Document\r\n        : host.ownerDocument?.defaultView?.ShadowRoot;\r\n    const originalPropertyDescriptor = patchTarget?.prototype\r\n        ? Object.getOwnPropertyDescriptor(patchTarget?.prototype, 'adoptedStyleSheets')\r\n        : undefined;\r\n    if (hostId === null ||\r\n        hostId === -1 ||\r\n        !patchTarget ||\r\n        !originalPropertyDescriptor)\r\n        return () => {\r\n        };\r\n    Object.defineProperty(host, 'adoptedStyleSheets', {\r\n        configurable: originalPropertyDescriptor.configurable,\r\n        enumerable: originalPropertyDescriptor.enumerable,\r\n        get() {\r\n            return originalPropertyDescriptor.get?.call(this);\r\n        },\r\n        set(sheets) {\r\n            const result = originalPropertyDescriptor.set?.call(this, sheets);\r\n            if (hostId !== null && hostId !== -1) {\r\n                try {\r\n                    stylesheetManager.adoptStyleSheets(sheets, hostId);\r\n                }\r\n                catch (e) {\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n    });\r\n    return callbackWrapper(() => {\r\n        Object.defineProperty(host, 'adoptedStyleSheets', {\r\n            configurable: originalPropertyDescriptor.configurable,\r\n            enumerable: originalPropertyDescriptor.enumerable,\r\n            get: originalPropertyDescriptor.get,\r\n            set: originalPropertyDescriptor.set,\r\n        });\r\n    });\r\n}\r\nfunction initStyleDeclarationObserver({ styleDeclarationCb, mirror, ignoreCSSAttributes, stylesheetManager, }, { win }) {\r\n    const setProperty = win.CSSStyleDeclaration.prototype.setProperty;\r\n    win.CSSStyleDeclaration.prototype.setProperty = new Proxy(setProperty, {\r\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\r\n            const [property, value, priority] = argumentsList;\r\n            if (ignoreCSSAttributes.has(property)) {\r\n                return setProperty.apply(thisArg, [property, value, priority]);\r\n            }\r\n            const { id, styleId } = getIdAndStyleId(thisArg.parentRule?.parentStyleSheet, mirror, stylesheetManager.styleMirror);\r\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\r\n                styleDeclarationCb({\r\n                    id,\r\n                    styleId,\r\n                    set: {\r\n                        property,\r\n                        value,\r\n                        priority,\r\n                    },\r\n                    index: getNestedCSSRulePositions(thisArg.parentRule),\r\n                });\r\n            }\r\n            return target.apply(thisArg, argumentsList);\r\n        }),\r\n    });\r\n    const removeProperty = win.CSSStyleDeclaration.prototype.removeProperty;\r\n    win.CSSStyleDeclaration.prototype.removeProperty = new Proxy(removeProperty, {\r\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\r\n            const [property] = argumentsList;\r\n            if (ignoreCSSAttributes.has(property)) {\r\n                return removeProperty.apply(thisArg, [property]);\r\n            }\r\n            const { id, styleId } = getIdAndStyleId(thisArg.parentRule?.parentStyleSheet, mirror, stylesheetManager.styleMirror);\r\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\r\n                styleDeclarationCb({\r\n                    id,\r\n                    styleId,\r\n                    remove: {\r\n                        property,\r\n                    },\r\n                    index: getNestedCSSRulePositions(thisArg.parentRule),\r\n                });\r\n            }\r\n            return target.apply(thisArg, argumentsList);\r\n        }),\r\n    });\r\n    return callbackWrapper(() => {\r\n        win.CSSStyleDeclaration.prototype.setProperty = setProperty;\r\n        win.CSSStyleDeclaration.prototype.removeProperty = removeProperty;\r\n    });\r\n}\r\nfunction initMediaInteractionObserver({ mediaInteractionCb, blockClass, blockSelector, unblockSelector, mirror, sampling, doc, }) {\r\n    const handler = callbackWrapper((type) => throttle(callbackWrapper((event) => {\r\n        const target = getEventTarget(event);\r\n        if (!target ||\r\n            isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\r\n            return;\r\n        }\r\n        const { currentTime, volume, muted, playbackRate } = target;\r\n        mediaInteractionCb({\r\n            type,\r\n            id: mirror.getId(target),\r\n            currentTime,\r\n            volume,\r\n            muted,\r\n            playbackRate,\r\n        });\r\n    }), sampling.media || 500));\r\n    const handlers = [\r\n        on('play', handler(0), doc),\r\n        on('pause', handler(1), doc),\r\n        on('seeked', handler(2), doc),\r\n        on('volumechange', handler(3), doc),\r\n        on('ratechange', handler(4), doc),\r\n    ];\r\n    return callbackWrapper(() => {\r\n        handlers.forEach((h) => h());\r\n    });\r\n}\r\nfunction initFontObserver({ fontCb, doc }) {\r\n    const win = doc.defaultView;\r\n    if (!win) {\r\n        return () => {\r\n        };\r\n    }\r\n    const handlers = [];\r\n    const fontMap = new WeakMap();\r\n    const originalFontFace = win.FontFace;\r\n    win.FontFace = function FontFace(family, source, descriptors) {\r\n        const fontFace = new originalFontFace(family, source, descriptors);\r\n        fontMap.set(fontFace, {\r\n            family,\r\n            buffer: typeof source !== 'string',\r\n            descriptors,\r\n            fontSource: typeof source === 'string'\r\n                ? source\r\n                : JSON.stringify(Array.from(new Uint8Array(source))),\r\n        });\r\n        return fontFace;\r\n    };\r\n    const restoreHandler = patch(doc.fonts, 'add', function (original) {\r\n        return function (fontFace) {\r\n            setTimeout(callbackWrapper(() => {\r\n                const p = fontMap.get(fontFace);\r\n                if (p) {\r\n                    fontCb(p);\r\n                    fontMap.delete(fontFace);\r\n                }\r\n            }), 0);\r\n            return original.apply(this, [fontFace]);\r\n        };\r\n    });\r\n    handlers.push(() => {\r\n        win.FontFace = originalFontFace;\r\n    });\r\n    handlers.push(restoreHandler);\r\n    return callbackWrapper(() => {\r\n        handlers.forEach((h) => h());\r\n    });\r\n}\r\nfunction initSelectionObserver(param) {\r\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, selectionCb, } = param;\r\n    let collapsed = true;\r\n    const updateSelection = callbackWrapper(() => {\r\n        const selection = doc.getSelection();\r\n        if (!selection || (collapsed && selection?.isCollapsed))\r\n            return;\r\n        collapsed = selection.isCollapsed || false;\r\n        const ranges = [];\r\n        const count = selection.rangeCount || 0;\r\n        for (let i = 0; i < count; i++) {\r\n            const range = selection.getRangeAt(i);\r\n            const { startContainer, startOffset, endContainer, endOffset } = range;\r\n            const blocked = isBlocked(startContainer, blockClass, blockSelector, unblockSelector, true) ||\r\n                isBlocked(endContainer, blockClass, blockSelector, unblockSelector, true);\r\n            if (blocked)\r\n                continue;\r\n            ranges.push({\r\n                start: mirror.getId(startContainer),\r\n                startOffset,\r\n                end: mirror.getId(endContainer),\r\n                endOffset,\r\n            });\r\n        }\r\n        selectionCb({ ranges });\r\n    });\r\n    updateSelection();\r\n    return on('selectionchange', updateSelection);\r\n}\r\nfunction initCustomElementObserver({ doc, customElementCb, }) {\r\n    const win = doc.defaultView;\r\n    if (!win || !win.customElements)\r\n        return () => { };\r\n    const restoreHandler = patch(win.customElements, 'define', function (original) {\r\n        return function (name, constructor, options) {\r\n            try {\r\n                customElementCb({\r\n                    define: {\r\n                        name,\r\n                    },\r\n                });\r\n            }\r\n            catch (e) {\r\n            }\r\n            return original.apply(this, [name, constructor, options]);\r\n        };\r\n    });\r\n    return restoreHandler;\r\n}\r\nfunction initObservers(o, _hooks = {}) {\r\n    const currentWindow = o.doc.defaultView;\r\n    if (!currentWindow) {\r\n        return () => {\r\n        };\r\n    }\r\n    const mutationObserver = initMutationObserver(o, o.doc);\r\n    const mousemoveHandler = initMoveObserver(o);\r\n    const mouseInteractionHandler = initMouseInteractionObserver(o);\r\n    const scrollHandler = initScrollObserver(o);\r\n    const viewportResizeHandler = initViewportResizeObserver(o, {\r\n        win: currentWindow,\r\n    });\r\n    const inputHandler = initInputObserver(o);\r\n    const mediaInteractionHandler = initMediaInteractionObserver(o);\r\n    const styleSheetObserver = initStyleSheetObserver(o, { win: currentWindow });\r\n    const adoptedStyleSheetObserver = initAdoptedStyleSheetObserver(o, o.doc);\r\n    const styleDeclarationObserver = initStyleDeclarationObserver(o, {\r\n        win: currentWindow,\r\n    });\r\n    const fontObserver = o.collectFonts\r\n        ? initFontObserver(o)\r\n        : () => {\r\n        };\r\n    const selectionObserver = initSelectionObserver(o);\r\n    const customElementObserver = initCustomElementObserver(o);\r\n    const pluginHandlers = [];\r\n    for (const plugin of o.plugins) {\r\n        pluginHandlers.push(plugin.observer(plugin.callback, currentWindow, plugin.options));\r\n    }\r\n    return callbackWrapper(() => {\r\n        mutationBuffers.forEach((b) => b.reset());\r\n        mutationObserver.disconnect();\r\n        mousemoveHandler();\r\n        mouseInteractionHandler();\r\n        scrollHandler();\r\n        viewportResizeHandler();\r\n        inputHandler();\r\n        mediaInteractionHandler();\r\n        styleSheetObserver();\r\n        adoptedStyleSheetObserver();\r\n        styleDeclarationObserver();\r\n        fontObserver();\r\n        selectionObserver();\r\n        customElementObserver();\r\n        pluginHandlers.forEach((h) => h());\r\n    });\r\n}\r\nfunction hasNestedCSSRule(prop) {\r\n    return typeof window[prop] !== 'undefined';\r\n}\r\nfunction canMonkeyPatchNestedCSSRule(prop) {\r\n    return Boolean(typeof window[prop] !== 'undefined' &&\r\n        window[prop].prototype &&\r\n        'insertRule' in window[prop].prototype &&\r\n        'deleteRule' in window[prop].prototype);\r\n}\n\nexport { INPUT_TAGS, initAdoptedStyleSheetObserver, initMutationObserver, initObservers, initScrollObserver, mutationBuffers };\n","class CrossOriginIframeMirror {\r\n    constructor(generateIdFn) {\r\n        this.generateIdFn = generateIdFn;\r\n        this.iframeIdToRemoteIdMap = new WeakMap();\r\n        this.iframeRemoteIdToIdMap = new WeakMap();\r\n    }\r\n    getId(iframe, remoteId, idToRemoteMap, remoteToIdMap) {\r\n        const idToRemoteIdMap = idToRemoteMap || this.getIdToRemoteIdMap(iframe);\r\n        const remoteIdToIdMap = remoteToIdMap || this.getRemoteIdToIdMap(iframe);\r\n        let id = idToRemoteIdMap.get(remoteId);\r\n        if (!id) {\r\n            id = this.generateIdFn();\r\n            idToRemoteIdMap.set(remoteId, id);\r\n            remoteIdToIdMap.set(id, remoteId);\r\n        }\r\n        return id;\r\n    }\r\n    getIds(iframe, remoteId) {\r\n        const idToRemoteIdMap = this.getIdToRemoteIdMap(iframe);\r\n        const remoteIdToIdMap = this.getRemoteIdToIdMap(iframe);\r\n        return remoteId.map((id) => this.getId(iframe, id, idToRemoteIdMap, remoteIdToIdMap));\r\n    }\r\n    getRemoteId(iframe, id, map) {\r\n        const remoteIdToIdMap = map || this.getRemoteIdToIdMap(iframe);\r\n        if (typeof id !== 'number')\r\n            return id;\r\n        const remoteId = remoteIdToIdMap.get(id);\r\n        if (!remoteId)\r\n            return -1;\r\n        return remoteId;\r\n    }\r\n    getRemoteIds(iframe, ids) {\r\n        const remoteIdToIdMap = this.getRemoteIdToIdMap(iframe);\r\n        return ids.map((id) => this.getRemoteId(iframe, id, remoteIdToIdMap));\r\n    }\r\n    reset(iframe) {\r\n        if (!iframe) {\r\n            this.iframeIdToRemoteIdMap = new WeakMap();\r\n            this.iframeRemoteIdToIdMap = new WeakMap();\r\n            return;\r\n        }\r\n        this.iframeIdToRemoteIdMap.delete(iframe);\r\n        this.iframeRemoteIdToIdMap.delete(iframe);\r\n    }\r\n    getIdToRemoteIdMap(iframe) {\r\n        let idToRemoteIdMap = this.iframeIdToRemoteIdMap.get(iframe);\r\n        if (!idToRemoteIdMap) {\r\n            idToRemoteIdMap = new Map();\r\n            this.iframeIdToRemoteIdMap.set(iframe, idToRemoteIdMap);\r\n        }\r\n        return idToRemoteIdMap;\r\n    }\r\n    getRemoteIdToIdMap(iframe) {\r\n        let remoteIdToIdMap = this.iframeRemoteIdToIdMap.get(iframe);\r\n        if (!remoteIdToIdMap) {\r\n            remoteIdToIdMap = new Map();\r\n            this.iframeRemoteIdToIdMap.set(iframe, remoteIdToIdMap);\r\n        }\r\n        return remoteIdToIdMap;\r\n    }\r\n}\n\nexport { CrossOriginIframeMirror as default };\n","import { genId, NodeType } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\nimport CrossOriginIframeMirror from './cross-origin-iframe-mirror.js';\nimport { EventType, IncrementalSource } from '../../../types/dist/rrweb-types.js';\n\nclass IframeManagerNoop {\r\n    constructor() {\r\n        this.crossOriginIframeMirror = new CrossOriginIframeMirror(genId);\r\n        this.crossOriginIframeRootIdMap = new WeakMap();\r\n    }\r\n    addIframe() {\r\n    }\r\n    addLoadListener() {\r\n    }\r\n    attachIframe() {\r\n    }\r\n}\r\nclass IframeManager {\r\n    constructor(options) {\r\n        this.iframes = new WeakMap();\r\n        this.crossOriginIframeMap = new WeakMap();\r\n        this.crossOriginIframeMirror = new CrossOriginIframeMirror(genId);\r\n        this.crossOriginIframeRootIdMap = new WeakMap();\r\n        this.mutationCb = options.mutationCb;\r\n        this.wrappedEmit = options.wrappedEmit;\r\n        this.stylesheetManager = options.stylesheetManager;\r\n        this.recordCrossOriginIframes = options.recordCrossOriginIframes;\r\n        this.crossOriginIframeStyleMirror = new CrossOriginIframeMirror(this.stylesheetManager.styleMirror.generateId.bind(this.stylesheetManager.styleMirror));\r\n        this.mirror = options.mirror;\r\n        if (this.recordCrossOriginIframes) {\r\n            window.addEventListener('message', this.handleMessage.bind(this));\r\n        }\r\n    }\r\n    addIframe(iframeEl) {\r\n        this.iframes.set(iframeEl, true);\r\n        if (iframeEl.contentWindow)\r\n            this.crossOriginIframeMap.set(iframeEl.contentWindow, iframeEl);\r\n    }\r\n    addLoadListener(cb) {\r\n        this.loadListener = cb;\r\n    }\r\n    attachIframe(iframeEl, childSn) {\r\n        this.mutationCb({\r\n            adds: [\r\n                {\r\n                    parentId: this.mirror.getId(iframeEl),\r\n                    nextId: null,\r\n                    node: childSn,\r\n                },\r\n            ],\r\n            removes: [],\r\n            texts: [],\r\n            attributes: [],\r\n            isAttachIframe: true,\r\n        });\r\n        this.loadListener?.(iframeEl);\r\n        if (iframeEl.contentDocument &&\r\n            iframeEl.contentDocument.adoptedStyleSheets &&\r\n            iframeEl.contentDocument.adoptedStyleSheets.length > 0)\r\n            this.stylesheetManager.adoptStyleSheets(iframeEl.contentDocument.adoptedStyleSheets, this.mirror.getId(iframeEl.contentDocument));\r\n    }\r\n    handleMessage(message) {\r\n        const crossOriginMessageEvent = message;\r\n        if (crossOriginMessageEvent.data.type !== 'rrweb' ||\r\n            crossOriginMessageEvent.origin !== crossOriginMessageEvent.data.origin)\r\n            return;\r\n        const iframeSourceWindow = message.source;\r\n        if (!iframeSourceWindow)\r\n            return;\r\n        const iframeEl = this.crossOriginIframeMap.get(message.source);\r\n        if (!iframeEl)\r\n            return;\r\n        const transformedEvent = this.transformCrossOriginEvent(iframeEl, crossOriginMessageEvent.data.event);\r\n        if (transformedEvent)\r\n            this.wrappedEmit(transformedEvent, crossOriginMessageEvent.data.isCheckout);\r\n    }\r\n    transformCrossOriginEvent(iframeEl, e) {\r\n        switch (e.type) {\r\n            case EventType.FullSnapshot: {\r\n                this.crossOriginIframeMirror.reset(iframeEl);\r\n                this.crossOriginIframeStyleMirror.reset(iframeEl);\r\n                this.replaceIdOnNode(e.data.node, iframeEl);\r\n                const rootId = e.data.node.id;\r\n                this.crossOriginIframeRootIdMap.set(iframeEl, rootId);\r\n                this.patchRootIdOnNode(e.data.node, rootId);\r\n                return {\r\n                    timestamp: e.timestamp,\r\n                    type: EventType.IncrementalSnapshot,\r\n                    data: {\r\n                        source: IncrementalSource.Mutation,\r\n                        adds: [\r\n                            {\r\n                                parentId: this.mirror.getId(iframeEl),\r\n                                nextId: null,\r\n                                node: e.data.node,\r\n                            },\r\n                        ],\r\n                        removes: [],\r\n                        texts: [],\r\n                        attributes: [],\r\n                        isAttachIframe: true,\r\n                    },\r\n                };\r\n            }\r\n            case EventType.Meta:\r\n            case EventType.Load:\r\n            case EventType.DomContentLoaded: {\r\n                return false;\r\n            }\r\n            case EventType.Plugin: {\r\n                return e;\r\n            }\r\n            case EventType.Custom: {\r\n                this.replaceIds(e.data.payload, iframeEl, ['id', 'parentId', 'previousId', 'nextId']);\r\n                return e;\r\n            }\r\n            case EventType.IncrementalSnapshot: {\r\n                switch (e.data.source) {\r\n                    case IncrementalSource.Mutation: {\r\n                        e.data.adds.forEach((n) => {\r\n                            this.replaceIds(n, iframeEl, [\r\n                                'parentId',\r\n                                'nextId',\r\n                                'previousId',\r\n                            ]);\r\n                            this.replaceIdOnNode(n.node, iframeEl);\r\n                            const rootId = this.crossOriginIframeRootIdMap.get(iframeEl);\r\n                            rootId && this.patchRootIdOnNode(n.node, rootId);\r\n                        });\r\n                        e.data.removes.forEach((n) => {\r\n                            this.replaceIds(n, iframeEl, ['parentId', 'id']);\r\n                        });\r\n                        e.data.attributes.forEach((n) => {\r\n                            this.replaceIds(n, iframeEl, ['id']);\r\n                        });\r\n                        e.data.texts.forEach((n) => {\r\n                            this.replaceIds(n, iframeEl, ['id']);\r\n                        });\r\n                        return e;\r\n                    }\r\n                    case IncrementalSource.Drag:\r\n                    case IncrementalSource.TouchMove:\r\n                    case IncrementalSource.MouseMove: {\r\n                        e.data.positions.forEach((p) => {\r\n                            this.replaceIds(p, iframeEl, ['id']);\r\n                        });\r\n                        return e;\r\n                    }\r\n                    case IncrementalSource.ViewportResize: {\r\n                        return false;\r\n                    }\r\n                    case IncrementalSource.MediaInteraction:\r\n                    case IncrementalSource.MouseInteraction:\r\n                    case IncrementalSource.Scroll:\r\n                    case IncrementalSource.CanvasMutation:\r\n                    case IncrementalSource.Input: {\r\n                        this.replaceIds(e.data, iframeEl, ['id']);\r\n                        return e;\r\n                    }\r\n                    case IncrementalSource.StyleSheetRule:\r\n                    case IncrementalSource.StyleDeclaration: {\r\n                        this.replaceIds(e.data, iframeEl, ['id']);\r\n                        this.replaceStyleIds(e.data, iframeEl, ['styleId']);\r\n                        return e;\r\n                    }\r\n                    case IncrementalSource.Font: {\r\n                        return e;\r\n                    }\r\n                    case IncrementalSource.Selection: {\r\n                        e.data.ranges.forEach((range) => {\r\n                            this.replaceIds(range, iframeEl, ['start', 'end']);\r\n                        });\r\n                        return e;\r\n                    }\r\n                    case IncrementalSource.AdoptedStyleSheet: {\r\n                        this.replaceIds(e.data, iframeEl, ['id']);\r\n                        this.replaceStyleIds(e.data, iframeEl, ['styleIds']);\r\n                        e.data.styles?.forEach((style) => {\r\n                            this.replaceStyleIds(style, iframeEl, ['styleId']);\r\n                        });\r\n                        return e;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    replace(iframeMirror, obj, iframeEl, keys) {\r\n        for (const key of keys) {\r\n            if (!Array.isArray(obj[key]) && typeof obj[key] !== 'number')\r\n                continue;\r\n            if (Array.isArray(obj[key])) {\r\n                obj[key] = iframeMirror.getIds(iframeEl, obj[key]);\r\n            }\r\n            else {\r\n                obj[key] = iframeMirror.getId(iframeEl, obj[key]);\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n    replaceIds(obj, iframeEl, keys) {\r\n        return this.replace(this.crossOriginIframeMirror, obj, iframeEl, keys);\r\n    }\r\n    replaceStyleIds(obj, iframeEl, keys) {\r\n        return this.replace(this.crossOriginIframeStyleMirror, obj, iframeEl, keys);\r\n    }\r\n    replaceIdOnNode(node, iframeEl) {\r\n        this.replaceIds(node, iframeEl, ['id', 'rootId']);\r\n        if ('childNodes' in node) {\r\n            node.childNodes.forEach((child) => {\r\n                this.replaceIdOnNode(child, iframeEl);\r\n            });\r\n        }\r\n    }\r\n    patchRootIdOnNode(node, rootId) {\r\n        if (node.type !== NodeType.Document && !node.rootId)\r\n            node.rootId = rootId;\r\n        if ('childNodes' in node) {\r\n            node.childNodes.forEach((child) => {\r\n                this.patchRootIdOnNode(child, rootId);\r\n            });\r\n        }\r\n    }\r\n}\n\nexport { IframeManager, IframeManagerNoop };\n","import { initMutationObserver, initScrollObserver, initAdoptedStyleSheetObserver } from './observer.js';\nimport { setTimeout, patch, inDom } from '../utils.js';\nimport { isNativeShadowDom } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\n\nclass ShadowDomManagerNoop {\r\n    init() {\r\n    }\r\n    addShadowRoot() {\r\n    }\r\n    observeAttachShadow() {\r\n    }\r\n    reset() {\r\n    }\r\n}\r\nclass ShadowDomManager {\r\n    constructor(options) {\r\n        this.shadowDoms = new WeakSet();\r\n        this.restoreHandlers = [];\r\n        this.mutationCb = options.mutationCb;\r\n        this.scrollCb = options.scrollCb;\r\n        this.bypassOptions = options.bypassOptions;\r\n        this.mirror = options.mirror;\r\n        this.init();\r\n    }\r\n    init() {\r\n        this.reset();\r\n        this.patchAttachShadow(Element, document);\r\n    }\r\n    addShadowRoot(shadowRoot, doc) {\r\n        if (!isNativeShadowDom(shadowRoot))\r\n            return;\r\n        if (this.shadowDoms.has(shadowRoot))\r\n            return;\r\n        this.shadowDoms.add(shadowRoot);\r\n        const observer = initMutationObserver({\r\n            ...this.bypassOptions,\r\n            doc,\r\n            mutationCb: this.mutationCb,\r\n            mirror: this.mirror,\r\n            shadowDomManager: this,\r\n        }, shadowRoot);\r\n        this.restoreHandlers.push(() => observer.disconnect());\r\n        this.restoreHandlers.push(initScrollObserver({\r\n            ...this.bypassOptions,\r\n            scrollCb: this.scrollCb,\r\n            doc: shadowRoot,\r\n            mirror: this.mirror,\r\n        }));\r\n        setTimeout(() => {\r\n            if (shadowRoot.adoptedStyleSheets &&\r\n                shadowRoot.adoptedStyleSheets.length > 0)\r\n                this.bypassOptions.stylesheetManager.adoptStyleSheets(shadowRoot.adoptedStyleSheets, this.mirror.getId(shadowRoot.host));\r\n            this.restoreHandlers.push(initAdoptedStyleSheetObserver({\r\n                mirror: this.mirror,\r\n                stylesheetManager: this.bypassOptions.stylesheetManager,\r\n            }, shadowRoot));\r\n        }, 0);\r\n    }\r\n    observeAttachShadow(iframeElement) {\r\n        if (!iframeElement.contentWindow || !iframeElement.contentDocument)\r\n            return;\r\n        this.patchAttachShadow(iframeElement.contentWindow.Element, iframeElement.contentDocument);\r\n    }\r\n    patchAttachShadow(element, doc) {\r\n        const manager = this;\r\n        this.restoreHandlers.push(patch(element.prototype, 'attachShadow', function (original) {\r\n            return function (option) {\r\n                const shadowRoot = original.call(this, option);\r\n                if (this.shadowRoot && inDom(this))\r\n                    manager.addShadowRoot(this.shadowRoot, doc);\r\n                return shadowRoot;\r\n            };\r\n        }));\r\n    }\r\n    reset() {\r\n        this.restoreHandlers.forEach((handler) => {\r\n            try {\r\n                handler();\r\n            }\r\n            catch (e) {\r\n            }\r\n        });\r\n        this.restoreHandlers = [];\r\n        this.shadowDoms = new WeakSet();\r\n    }\r\n}\n\nexport { ShadowDomManager, ShadowDomManagerNoop };\n","import { onRequestAnimationFrame, isBlocked } from '../../../utils.js';\nimport { CanvasContext } from '../../../../../types/dist/rrweb-types.js';\nimport initCanvas2DMutationObserver from './2d.js';\nimport initCanvasContextObserver from './canvas.js';\nimport initCanvasWebGLMutationObserver from './webgl.js';\nimport { getImageBitmapDataUrlWorkerURL as t } from '../../../../../rrweb-worker/es/rrweb-worker/index.js';\nimport { callbackWrapper, registerErrorHandler } from '../../error-handler.js';\n\nclass CanvasManagerNoop {\r\n    reset() {\r\n    }\r\n    freeze() {\r\n    }\r\n    unfreeze() {\r\n    }\r\n    lock() {\r\n    }\r\n    unlock() {\r\n    }\r\n    snapshot() {\r\n    }\r\n}\r\nclass CanvasManager {\r\n    reset() {\r\n        this.pendingCanvasMutations.clear();\r\n        this.resetObservers && this.resetObservers();\r\n    }\r\n    freeze() {\r\n        this.frozen = true;\r\n    }\r\n    unfreeze() {\r\n        this.frozen = false;\r\n    }\r\n    lock() {\r\n        this.locked = true;\r\n    }\r\n    unlock() {\r\n        this.locked = false;\r\n    }\r\n    constructor(options) {\r\n        this.pendingCanvasMutations = new Map();\r\n        this.rafStamps = { latestId: 0, invokeId: null };\r\n        this.frozen = false;\r\n        this.locked = false;\r\n        this.processMutation = (target, mutation) => {\r\n            const newFrame = this.rafStamps.invokeId &&\r\n                this.rafStamps.latestId !== this.rafStamps.invokeId;\r\n            if (newFrame || !this.rafStamps.invokeId)\r\n                this.rafStamps.invokeId = this.rafStamps.latestId;\r\n            if (!this.pendingCanvasMutations.has(target)) {\r\n                this.pendingCanvasMutations.set(target, []);\r\n            }\r\n            this.pendingCanvasMutations.get(target).push(mutation);\r\n        };\r\n        const { sampling = 'all', win, blockClass, blockSelector, unblockSelector, maxCanvasSize, recordCanvas, dataURLOptions, errorHandler, } = options;\r\n        this.mutationCb = options.mutationCb;\r\n        this.mirror = options.mirror;\r\n        this.options = options;\r\n        if (errorHandler) {\r\n            registerErrorHandler(errorHandler);\r\n        }\r\n        if (options.enableManualSnapshot) {\r\n            return;\r\n        }\r\n        callbackWrapper(() => {\r\n            if (recordCanvas && sampling === 'all')\r\n                this.initCanvasMutationObserver(win, blockClass, blockSelector, unblockSelector);\r\n            if (recordCanvas && typeof sampling === 'number')\r\n                this.initCanvasFPSObserver(sampling, win, blockClass, blockSelector, unblockSelector, maxCanvasSize, {\r\n                    dataURLOptions,\r\n                });\r\n        })();\r\n    }\r\n    initCanvasFPSObserver(fps, win, blockClass, blockSelector, unblockSelector, maxCanvasSize, options) {\r\n        const canvasContextReset = initCanvasContextObserver(win, blockClass, blockSelector, unblockSelector, true);\r\n        const rafId = this.takeSnapshot(false, fps, win, blockClass, blockSelector, unblockSelector, maxCanvasSize, options.dataURLOptions);\r\n        this.resetObservers = () => {\r\n            canvasContextReset();\r\n            cancelAnimationFrame(rafId);\r\n        };\r\n    }\r\n    initCanvasMutationObserver(win, blockClass, blockSelector, unblockSelector) {\r\n        this.startRAFTimestamping();\r\n        this.startPendingCanvasMutationFlusher();\r\n        const canvasContextReset = initCanvasContextObserver(win, blockClass, blockSelector, unblockSelector, false);\r\n        const canvas2DReset = initCanvas2DMutationObserver(this.processMutation.bind(this), win, blockClass, blockSelector, unblockSelector);\r\n        const canvasWebGL1and2Reset = initCanvasWebGLMutationObserver(this.processMutation.bind(this), win, blockClass, blockSelector, unblockSelector, this.mirror);\r\n        this.resetObservers = () => {\r\n            canvasContextReset();\r\n            canvas2DReset();\r\n            canvasWebGL1and2Reset();\r\n        };\r\n    }\r\n    snapshot(canvasElement) {\r\n        const { options } = this;\r\n        const rafId = this.takeSnapshot(true, options.sampling === 'all' ? 2 : options.sampling || 2, options.win, options.blockClass, options.blockSelector, options.unblockSelector, options.maxCanvasSize, options.dataURLOptions, canvasElement);\r\n        this.resetObservers = () => {\r\n            cancelAnimationFrame(rafId);\r\n        };\r\n    }\r\n    takeSnapshot(isManualSnapshot, fps, win, blockClass, blockSelector, unblockSelector, maxCanvasSize, dataURLOptions, canvasElement) {\r\n        const snapshotInProgressMap = new Map();\r\n        const worker = new Worker(t());\r\n        worker.onmessage = (e) => {\r\n            const data = e.data;\r\n            const { id } = data;\r\n            snapshotInProgressMap.set(id, false);\r\n            if (!('base64' in data))\r\n                return;\r\n            const { base64, type, width, height } = data;\r\n            this.mutationCb({\r\n                id,\r\n                type: CanvasContext['2D'],\r\n                commands: [\r\n                    {\r\n                        property: 'clearRect',\r\n                        args: [0, 0, width, height],\r\n                    },\r\n                    {\r\n                        property: 'drawImage',\r\n                        args: [\r\n                            {\r\n                                rr_type: 'ImageBitmap',\r\n                                args: [\r\n                                    {\r\n                                        rr_type: 'Blob',\r\n                                        data: [{ rr_type: 'ArrayBuffer', base64 }],\r\n                                        type,\r\n                                    },\r\n                                ],\r\n                            },\r\n                            0,\r\n                            0,\r\n                            width,\r\n                            height,\r\n                        ],\r\n                    },\r\n                ],\r\n            });\r\n        };\r\n        const timeBetweenSnapshots = 1000 / fps;\r\n        let lastSnapshotTime = 0;\r\n        let rafId;\r\n        const getCanvas = (canvasElement) => {\r\n            if (canvasElement) {\r\n                return [canvasElement];\r\n            }\r\n            const matchedCanvas = [];\r\n            win.document.querySelectorAll('canvas').forEach((canvas) => {\r\n                if (!isBlocked(canvas, blockClass, blockSelector, unblockSelector, true)) {\r\n                    matchedCanvas.push(canvas);\r\n                }\r\n            });\r\n            return matchedCanvas;\r\n        };\r\n        const takeCanvasSnapshots = (timestamp) => {\r\n            if (lastSnapshotTime &&\r\n                timestamp - lastSnapshotTime < timeBetweenSnapshots) {\r\n                rafId = onRequestAnimationFrame(takeCanvasSnapshots);\r\n                return;\r\n            }\r\n            lastSnapshotTime = timestamp;\r\n            getCanvas(canvasElement).forEach((canvas) => {\r\n                const id = this.mirror.getId(canvas);\r\n                if (snapshotInProgressMap.get(id))\r\n                    return;\r\n                if (!canvas.width || !canvas.height)\r\n                    return;\r\n                snapshotInProgressMap.set(id, true);\r\n                if (!isManualSnapshot &&\r\n                    ['webgl', 'webgl2'].includes(canvas.__context)) {\r\n                    const context = canvas.getContext(canvas.__context);\r\n                    if (context?.getContextAttributes()?.preserveDrawingBuffer === false) {\r\n                        context.clear(context.COLOR_BUFFER_BIT);\r\n                    }\r\n                }\r\n                createImageBitmap(canvas)\r\n                    .then((bitmap) => {\r\n                    worker.postMessage({\r\n                        id,\r\n                        bitmap,\r\n                        width: canvas.width,\r\n                        height: canvas.height,\r\n                        dataURLOptions,\r\n                        maxCanvasSize,\r\n                    }, [bitmap]);\r\n                })\r\n                    .catch((error) => {\r\n                    callbackWrapper(() => {\r\n                        throw error;\r\n                    })();\r\n                });\r\n            });\r\n            rafId = onRequestAnimationFrame(takeCanvasSnapshots);\r\n        };\r\n        rafId = onRequestAnimationFrame(takeCanvasSnapshots);\r\n        return rafId;\r\n    }\r\n    startPendingCanvasMutationFlusher() {\r\n        onRequestAnimationFrame(() => this.flushPendingCanvasMutations());\r\n    }\r\n    startRAFTimestamping() {\r\n        const setLatestRAFTimestamp = (timestamp) => {\r\n            this.rafStamps.latestId = timestamp;\r\n            onRequestAnimationFrame(setLatestRAFTimestamp);\r\n        };\r\n        onRequestAnimationFrame(setLatestRAFTimestamp);\r\n    }\r\n    flushPendingCanvasMutations() {\r\n        this.pendingCanvasMutations.forEach((values, canvas) => {\r\n            const id = this.mirror.getId(canvas);\r\n            this.flushPendingCanvasMutationFor(canvas, id);\r\n        });\r\n        onRequestAnimationFrame(() => this.flushPendingCanvasMutations());\r\n    }\r\n    flushPendingCanvasMutationFor(canvas, id) {\r\n        if (this.frozen || this.locked) {\r\n            return;\r\n        }\r\n        const valuesWithType = this.pendingCanvasMutations.get(canvas);\r\n        if (!valuesWithType || id === -1)\r\n            return;\r\n        const values = valuesWithType.map((value) => {\r\n            const { type, ...rest } = value;\r\n            return rest;\r\n        });\r\n        const { type } = valuesWithType[0];\r\n        this.mutationCb({ id, type, commands: values });\r\n        this.pendingCanvasMutations.delete(canvas);\r\n    }\r\n}\n\nexport { CanvasManager, CanvasManagerNoop };\n","import { stringifyRule } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\nimport { StyleSheetMirror } from '../utils.js';\n\nclass StylesheetManager {\r\n    constructor(options) {\r\n        this.trackedLinkElements = new WeakSet();\r\n        this.styleMirror = new StyleSheetMirror();\r\n        this.mutationCb = options.mutationCb;\r\n        this.adoptedStyleSheetCb = options.adoptedStyleSheetCb;\r\n    }\r\n    attachLinkElement(linkEl, childSn) {\r\n        if ('_cssText' in childSn.attributes)\r\n            this.mutationCb({\r\n                adds: [],\r\n                removes: [],\r\n                texts: [],\r\n                attributes: [\r\n                    {\r\n                        id: childSn.id,\r\n                        attributes: childSn\r\n                            .attributes,\r\n                    },\r\n                ],\r\n            });\r\n        this.trackLinkElement(linkEl);\r\n    }\r\n    trackLinkElement(linkEl) {\r\n        if (this.trackedLinkElements.has(linkEl))\r\n            return;\r\n        this.trackedLinkElements.add(linkEl);\r\n        this.trackStylesheetInLinkElement(linkEl);\r\n    }\r\n    adoptStyleSheets(sheets, hostId) {\r\n        if (sheets.length === 0)\r\n            return;\r\n        const adoptedStyleSheetData = {\r\n            id: hostId,\r\n            styleIds: [],\r\n        };\r\n        const styles = [];\r\n        for (const sheet of sheets) {\r\n            let styleId;\r\n            if (!this.styleMirror.has(sheet)) {\r\n                styleId = this.styleMirror.add(sheet);\r\n                styles.push({\r\n                    styleId,\r\n                    rules: Array.from(sheet.rules || CSSRule, (r, index) => ({\r\n                        rule: stringifyRule(r),\r\n                        index,\r\n                    })),\r\n                });\r\n            }\r\n            else\r\n                styleId = this.styleMirror.getId(sheet);\r\n            adoptedStyleSheetData.styleIds.push(styleId);\r\n        }\r\n        if (styles.length > 0)\r\n            adoptedStyleSheetData.styles = styles;\r\n        this.adoptedStyleSheetCb(adoptedStyleSheetData);\r\n    }\r\n    reset() {\r\n        this.styleMirror.reset();\r\n        this.trackedLinkElements = new WeakSet();\r\n    }\r\n    trackStylesheetInLinkElement(linkEl) {\r\n    }\r\n}\n\nexport { StylesheetManager };\n","import { onRequestAnimationFrame } from '../utils.js';\n\nclass ProcessedNodeManager {\r\n    constructor() {\r\n        this.nodeMap = new WeakMap();\r\n        this.loop = true;\r\n        this.periodicallyClear();\r\n    }\r\n    periodicallyClear() {\r\n        onRequestAnimationFrame(() => {\r\n            this.clear();\r\n            if (this.loop)\r\n                this.periodicallyClear();\r\n        });\r\n    }\r\n    inOtherBuffer(node, thisBuffer) {\r\n        const buffers = this.nodeMap.get(node);\r\n        return (buffers && Array.from(buffers).some((buffer) => buffer !== thisBuffer));\r\n    }\r\n    add(node, buffer) {\r\n        this.nodeMap.set(node, (this.nodeMap.get(node) || new Set()).add(buffer));\r\n    }\r\n    clear() {\r\n        this.nodeMap = new WeakMap();\r\n    }\r\n    destroy() {\r\n        this.loop = false;\r\n    }\r\n}\n\nexport { ProcessedNodeManager as default };\n","import { createMirror, snapshot } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\nimport { initObservers, mutationBuffers } from './observer.js';\nimport { polyfill, on, nowTimestamp, getWindowWidth, getWindowHeight, getWindowScroll, isSerializedIframe, isSerializedStylesheet, hasShadowRoot } from '../utils.js';\nimport { EventType, IncrementalSource } from '../../../types/dist/rrweb-types.js';\nimport { IframeManagerNoop, IframeManager } from './iframe-manager.js';\nimport { ShadowDomManagerNoop, ShadowDomManager } from './shadow-dom-manager.js';\nimport { CanvasManagerNoop } from './observers/canvas/canvas-manager.js';\nexport { CanvasManager } from './observers/canvas/canvas-manager.js';\nimport { StylesheetManager } from './stylesheet-manager.js';\nimport ProcessedNodeManager from './processed-node-manager.js';\nimport { callbackWrapper, unregisterErrorHandler, registerErrorHandler } from './error-handler.js';\n\nlet wrappedEmit;\r\nlet _wrappedEmit;\r\nlet _takeFullSnapshot;\r\nconst mirror = createMirror();\r\nfunction record(options = {}) {\r\n    const { emit, checkoutEveryNms, checkoutEveryNth, blockClass = 'rr-block', blockSelector = null, unblockSelector = null, ignoreClass = 'rr-ignore', ignoreSelector = null, maskAllText = false, maskTextClass = 'rr-mask', unmaskTextClass = null, maskTextSelector = null, unmaskTextSelector = null, inlineStylesheet = true, maskAllInputs, maskInputOptions: _maskInputOptions, slimDOMOptions: _slimDOMOptions, maskAttributeFn, maskInputFn, maskTextFn, maxCanvasSize = null, packFn, sampling = {}, dataURLOptions = {}, mousemoveWait, recordCanvas = false, recordCrossOriginIframes = false, recordAfter = options.recordAfter === 'DOMContentLoaded'\r\n        ? options.recordAfter\r\n        : 'load', userTriggeredOnInput = false, collectFonts = false, inlineImages = false, plugins, keepIframeSrcFn = () => false, ignoreCSSAttributes = new Set([]), errorHandler, onMutation, getCanvasManager, } = options;\r\n    registerErrorHandler(errorHandler);\r\n    const inEmittingFrame = recordCrossOriginIframes\r\n        ? window.parent === window\r\n        : true;\r\n    let passEmitsToParent = false;\r\n    if (!inEmittingFrame) {\r\n        try {\r\n            if (window.parent.document) {\r\n                passEmitsToParent = false;\r\n            }\r\n        }\r\n        catch (e) {\r\n            passEmitsToParent = true;\r\n        }\r\n    }\r\n    if (inEmittingFrame && !emit) {\r\n        throw new Error('emit function is required');\r\n    }\r\n    if (mousemoveWait !== undefined && sampling.mousemove === undefined) {\r\n        sampling.mousemove = mousemoveWait;\r\n    }\r\n    mirror.reset();\r\n    const maskInputOptions = maskAllInputs === true\r\n        ? {\r\n            color: true,\r\n            date: true,\r\n            'datetime-local': true,\r\n            email: true,\r\n            month: true,\r\n            number: true,\r\n            range: true,\r\n            search: true,\r\n            tel: true,\r\n            text: true,\r\n            time: true,\r\n            url: true,\r\n            week: true,\r\n            textarea: true,\r\n            select: true,\r\n            radio: true,\r\n            checkbox: true,\r\n        }\r\n        : _maskInputOptions !== undefined\r\n            ? _maskInputOptions\r\n            : {};\r\n    const slimDOMOptions = _slimDOMOptions === true || _slimDOMOptions === 'all'\r\n        ? {\r\n            script: true,\r\n            comment: true,\r\n            headFavicon: true,\r\n            headWhitespace: true,\r\n            headMetaSocial: true,\r\n            headMetaRobots: true,\r\n            headMetaHttpEquiv: true,\r\n            headMetaVerification: true,\r\n            headMetaAuthorship: _slimDOMOptions === 'all',\r\n            headMetaDescKeywords: _slimDOMOptions === 'all',\r\n        }\r\n        : _slimDOMOptions\r\n            ? _slimDOMOptions\r\n            : {};\r\n    polyfill();\r\n    let lastFullSnapshotEvent;\r\n    let incrementalSnapshotCount = 0;\r\n    const eventProcessor = (e) => {\r\n        for (const plugin of plugins || []) {\r\n            if (plugin.eventProcessor) {\r\n                e = plugin.eventProcessor(e);\r\n            }\r\n        }\r\n        if (packFn &&\r\n            !passEmitsToParent) {\r\n            e = packFn(e);\r\n        }\r\n        return e;\r\n    };\r\n    wrappedEmit = (r, isCheckout) => {\r\n        const e = r;\r\n        e.timestamp = nowTimestamp();\r\n        if (mutationBuffers[0]?.isFrozen() &&\r\n            e.type !== EventType.FullSnapshot &&\r\n            !(e.type === EventType.IncrementalSnapshot &&\r\n                e.data.source === IncrementalSource.Mutation)) {\r\n            mutationBuffers.forEach((buf) => buf.unfreeze());\r\n        }\r\n        if (inEmittingFrame) {\r\n            emit?.(eventProcessor(e), isCheckout);\r\n        }\r\n        else if (passEmitsToParent) {\r\n            const message = {\r\n                type: 'rrweb',\r\n                event: eventProcessor(e),\r\n                origin: window.location.origin,\r\n                isCheckout,\r\n            };\r\n            window.parent.postMessage(message, '*');\r\n        }\r\n        if (e.type === EventType.FullSnapshot) {\r\n            lastFullSnapshotEvent = e;\r\n            incrementalSnapshotCount = 0;\r\n        }\r\n        else if (e.type === EventType.IncrementalSnapshot) {\r\n            if (e.data.source === IncrementalSource.Mutation &&\r\n                e.data.isAttachIframe) {\r\n                return;\r\n            }\r\n            incrementalSnapshotCount++;\r\n            const exceedCount = checkoutEveryNth && incrementalSnapshotCount >= checkoutEveryNth;\r\n            const exceedTime = checkoutEveryNms &&\r\n                lastFullSnapshotEvent &&\r\n                e.timestamp - lastFullSnapshotEvent.timestamp > checkoutEveryNms;\r\n            if (exceedCount || exceedTime) {\r\n                takeFullSnapshot(true);\r\n            }\r\n        }\r\n    };\r\n    _wrappedEmit = wrappedEmit;\r\n    const wrappedMutationEmit = (m) => {\r\n        wrappedEmit({\r\n            type: EventType.IncrementalSnapshot,\r\n            data: {\r\n                source: IncrementalSource.Mutation,\r\n                ...m,\r\n            },\r\n        });\r\n    };\r\n    const wrappedScrollEmit = (p) => wrappedEmit({\r\n        type: EventType.IncrementalSnapshot,\r\n        data: {\r\n            source: IncrementalSource.Scroll,\r\n            ...p,\r\n        },\r\n    });\r\n    const wrappedCanvasMutationEmit = (p) => wrappedEmit({\r\n        type: EventType.IncrementalSnapshot,\r\n        data: {\r\n            source: IncrementalSource.CanvasMutation,\r\n            ...p,\r\n        },\r\n    });\r\n    const wrappedAdoptedStyleSheetEmit = (a) => wrappedEmit({\r\n        type: EventType.IncrementalSnapshot,\r\n        data: {\r\n            source: IncrementalSource.AdoptedStyleSheet,\r\n            ...a,\r\n        },\r\n    });\r\n    const stylesheetManager = new StylesheetManager({\r\n        mutationCb: wrappedMutationEmit,\r\n        adoptedStyleSheetCb: wrappedAdoptedStyleSheetEmit,\r\n    });\r\n    const iframeManager = typeof __RRWEB_EXCLUDE_IFRAME__ === 'boolean' && __RRWEB_EXCLUDE_IFRAME__\r\n        ? new IframeManagerNoop()\r\n        : new IframeManager({\r\n            mirror,\r\n            mutationCb: wrappedMutationEmit,\r\n            stylesheetManager: stylesheetManager,\r\n            recordCrossOriginIframes,\r\n            wrappedEmit,\r\n        });\r\n    for (const plugin of plugins || []) {\r\n        if (plugin.getMirror)\r\n            plugin.getMirror({\r\n                nodeMirror: mirror,\r\n                crossOriginIframeMirror: iframeManager.crossOriginIframeMirror,\r\n                crossOriginIframeStyleMirror: iframeManager.crossOriginIframeStyleMirror,\r\n            });\r\n    }\r\n    const processedNodeManager = new ProcessedNodeManager();\r\n    const canvasManager = _getCanvasManager(getCanvasManager, {\r\n        mirror,\r\n        win: window,\r\n        mutationCb: (p) => wrappedEmit({\r\n            type: EventType.IncrementalSnapshot,\r\n            data: {\r\n                source: IncrementalSource.CanvasMutation,\r\n                ...p,\r\n            },\r\n        }),\r\n        recordCanvas,\r\n        blockClass,\r\n        blockSelector,\r\n        unblockSelector,\r\n        maxCanvasSize,\r\n        sampling: sampling['canvas'],\r\n        dataURLOptions,\r\n        errorHandler,\r\n    });\r\n    const shadowDomManager = typeof __RRWEB_EXCLUDE_SHADOW_DOM__ === 'boolean' &&\r\n        __RRWEB_EXCLUDE_SHADOW_DOM__\r\n        ? new ShadowDomManagerNoop()\r\n        : new ShadowDomManager({\r\n            mutationCb: wrappedMutationEmit,\r\n            scrollCb: wrappedScrollEmit,\r\n            bypassOptions: {\r\n                onMutation,\r\n                blockClass,\r\n                blockSelector,\r\n                unblockSelector,\r\n                maskAllText,\r\n                maskTextClass,\r\n                unmaskTextClass,\r\n                maskTextSelector,\r\n                unmaskTextSelector,\r\n                inlineStylesheet,\r\n                maskInputOptions,\r\n                dataURLOptions,\r\n                maskAttributeFn,\r\n                maskTextFn,\r\n                maskInputFn,\r\n                recordCanvas,\r\n                inlineImages,\r\n                sampling,\r\n                slimDOMOptions,\r\n                iframeManager,\r\n                stylesheetManager,\r\n                canvasManager,\r\n                keepIframeSrcFn,\r\n                processedNodeManager,\r\n            },\r\n            mirror,\r\n        });\r\n    const takeFullSnapshot = (isCheckout = false) => {\r\n        wrappedEmit({\r\n            type: EventType.Meta,\r\n            data: {\r\n                href: window.location.href,\r\n                width: getWindowWidth(),\r\n                height: getWindowHeight(),\r\n            },\r\n        }, isCheckout);\r\n        stylesheetManager.reset();\r\n        shadowDomManager.init();\r\n        mutationBuffers.forEach((buf) => buf.lock());\r\n        const node = snapshot(document, {\r\n            mirror,\r\n            blockClass,\r\n            blockSelector,\r\n            unblockSelector,\r\n            maskAllText,\r\n            maskTextClass,\r\n            unmaskTextClass,\r\n            maskTextSelector,\r\n            unmaskTextSelector,\r\n            inlineStylesheet,\r\n            maskAllInputs: maskInputOptions,\r\n            maskAttributeFn,\r\n            maskInputFn,\r\n            maskTextFn,\r\n            slimDOM: slimDOMOptions,\r\n            dataURLOptions,\r\n            recordCanvas,\r\n            inlineImages,\r\n            onSerialize: (n) => {\r\n                if (isSerializedIframe(n, mirror)) {\r\n                    iframeManager.addIframe(n);\r\n                }\r\n                if (isSerializedStylesheet(n, mirror)) {\r\n                    stylesheetManager.trackLinkElement(n);\r\n                }\r\n                if (hasShadowRoot(n)) {\r\n                    shadowDomManager.addShadowRoot(n.shadowRoot, document);\r\n                }\r\n            },\r\n            onIframeLoad: (iframe, childSn) => {\r\n                iframeManager.attachIframe(iframe, childSn);\r\n                shadowDomManager.observeAttachShadow(iframe);\r\n            },\r\n            onStylesheetLoad: (linkEl, childSn) => {\r\n                stylesheetManager.attachLinkElement(linkEl, childSn);\r\n            },\r\n            keepIframeSrcFn,\r\n        });\r\n        if (!node) {\r\n            return console.warn('Failed to snapshot the document');\r\n        }\r\n        wrappedEmit({\r\n            type: EventType.FullSnapshot,\r\n            data: {\r\n                node,\r\n                initialOffset: getWindowScroll(window),\r\n            },\r\n        });\r\n        mutationBuffers.forEach((buf) => buf.unlock());\r\n        if (document.adoptedStyleSheets && document.adoptedStyleSheets.length > 0)\r\n            stylesheetManager.adoptStyleSheets(document.adoptedStyleSheets, mirror.getId(document));\r\n    };\r\n    _takeFullSnapshot = takeFullSnapshot;\r\n    try {\r\n        const handlers = [];\r\n        const observe = (doc) => {\r\n            return callbackWrapper(initObservers)({\r\n                onMutation,\r\n                mutationCb: wrappedMutationEmit,\r\n                mousemoveCb: (positions, source) => wrappedEmit({\r\n                    type: EventType.IncrementalSnapshot,\r\n                    data: {\r\n                        source,\r\n                        positions,\r\n                    },\r\n                }),\r\n                mouseInteractionCb: (d) => wrappedEmit({\r\n                    type: EventType.IncrementalSnapshot,\r\n                    data: {\r\n                        source: IncrementalSource.MouseInteraction,\r\n                        ...d,\r\n                    },\r\n                }),\r\n                scrollCb: wrappedScrollEmit,\r\n                viewportResizeCb: (d) => wrappedEmit({\r\n                    type: EventType.IncrementalSnapshot,\r\n                    data: {\r\n                        source: IncrementalSource.ViewportResize,\r\n                        ...d,\r\n                    },\r\n                }),\r\n                inputCb: (v) => wrappedEmit({\r\n                    type: EventType.IncrementalSnapshot,\r\n                    data: {\r\n                        source: IncrementalSource.Input,\r\n                        ...v,\r\n                    },\r\n                }),\r\n                mediaInteractionCb: (p) => wrappedEmit({\r\n                    type: EventType.IncrementalSnapshot,\r\n                    data: {\r\n                        source: IncrementalSource.MediaInteraction,\r\n                        ...p,\r\n                    },\r\n                }),\r\n                styleSheetRuleCb: (r) => wrappedEmit({\r\n                    type: EventType.IncrementalSnapshot,\r\n                    data: {\r\n                        source: IncrementalSource.StyleSheetRule,\r\n                        ...r,\r\n                    },\r\n                }),\r\n                styleDeclarationCb: (r) => wrappedEmit({\r\n                    type: EventType.IncrementalSnapshot,\r\n                    data: {\r\n                        source: IncrementalSource.StyleDeclaration,\r\n                        ...r,\r\n                    },\r\n                }),\r\n                canvasMutationCb: wrappedCanvasMutationEmit,\r\n                fontCb: (p) => wrappedEmit({\r\n                    type: EventType.IncrementalSnapshot,\r\n                    data: {\r\n                        source: IncrementalSource.Font,\r\n                        ...p,\r\n                    },\r\n                }),\r\n                selectionCb: (p) => {\r\n                    wrappedEmit({\r\n                        type: EventType.IncrementalSnapshot,\r\n                        data: {\r\n                            source: IncrementalSource.Selection,\r\n                            ...p,\r\n                        },\r\n                    });\r\n                },\r\n                customElementCb: (c) => {\r\n                    wrappedEmit({\r\n                        type: EventType.IncrementalSnapshot,\r\n                        data: {\r\n                            source: IncrementalSource.CustomElement,\r\n                            ...c,\r\n                        },\r\n                    });\r\n                },\r\n                blockClass,\r\n                ignoreClass,\r\n                ignoreSelector,\r\n                maskAllText,\r\n                maskTextClass,\r\n                unmaskTextClass,\r\n                maskTextSelector,\r\n                unmaskTextSelector,\r\n                maskInputOptions,\r\n                inlineStylesheet,\r\n                sampling,\r\n                recordCanvas,\r\n                inlineImages,\r\n                userTriggeredOnInput,\r\n                collectFonts,\r\n                doc,\r\n                maskAttributeFn,\r\n                maskInputFn,\r\n                maskTextFn,\r\n                keepIframeSrcFn,\r\n                blockSelector,\r\n                unblockSelector,\r\n                slimDOMOptions,\r\n                dataURLOptions,\r\n                mirror,\r\n                iframeManager,\r\n                stylesheetManager,\r\n                shadowDomManager,\r\n                processedNodeManager,\r\n                canvasManager,\r\n                ignoreCSSAttributes,\r\n                plugins: plugins\r\n                    ?.filter((p) => p.observer)\r\n                    ?.map((p) => ({\r\n                    observer: p.observer,\r\n                    options: p.options,\r\n                    callback: (payload) => wrappedEmit({\r\n                        type: EventType.Plugin,\r\n                        data: {\r\n                            plugin: p.name,\r\n                            payload,\r\n                        },\r\n                    }),\r\n                })) || [],\r\n            }, {});\r\n        };\r\n        iframeManager.addLoadListener((iframeEl) => {\r\n            try {\r\n                handlers.push(observe(iframeEl.contentDocument));\r\n            }\r\n            catch (error) {\r\n                console.warn(error);\r\n            }\r\n        });\r\n        const init = () => {\r\n            takeFullSnapshot();\r\n            handlers.push(observe(document));\r\n        };\r\n        if (document.readyState === 'interactive' ||\r\n            document.readyState === 'complete') {\r\n            init();\r\n        }\r\n        else {\r\n            handlers.push(on('DOMContentLoaded', () => {\r\n                wrappedEmit({\r\n                    type: EventType.DomContentLoaded,\r\n                    data: {},\r\n                });\r\n                if (recordAfter === 'DOMContentLoaded')\r\n                    init();\r\n            }));\r\n            handlers.push(on('load', () => {\r\n                wrappedEmit({\r\n                    type: EventType.Load,\r\n                    data: {},\r\n                });\r\n                if (recordAfter === 'load')\r\n                    init();\r\n            }, window));\r\n        }\r\n        return () => {\r\n            handlers.forEach((h) => h());\r\n            processedNodeManager.destroy();\r\n            _takeFullSnapshot = undefined;\r\n            unregisterErrorHandler();\r\n        };\r\n    }\r\n    catch (error) {\r\n        console.warn(error);\r\n    }\r\n}\r\nfunction addCustomEvent(tag, payload) {\r\n    if (!_wrappedEmit) {\r\n        throw new Error('please add custom event after start recording');\r\n    }\r\n    wrappedEmit({\r\n        type: EventType.Custom,\r\n        data: {\r\n            tag,\r\n            payload,\r\n        },\r\n    });\r\n}\r\nfunction freezePage() {\r\n    mutationBuffers.forEach((buf) => buf.freeze());\r\n}\r\nfunction takeFullSnapshot(isCheckout) {\r\n    if (!_takeFullSnapshot) {\r\n        throw new Error('please take full snapshot after start recording');\r\n    }\r\n    _takeFullSnapshot(isCheckout);\r\n}\r\nrecord.mirror = mirror;\r\nrecord.takeFullSnapshot = takeFullSnapshot;\r\nfunction _getCanvasManager(getCanvasManagerFn, options) {\r\n    try {\r\n        return getCanvasManagerFn\r\n            ? getCanvasManagerFn(options)\r\n            : new CanvasManagerNoop();\r\n    }\r\n    catch {\r\n        console.warn('Unable to initialize CanvasManager');\r\n        return new CanvasManagerNoop();\r\n    }\r\n}\n\nexport { addCustomEvent, record as default, freezePage, mirror, takeFullSnapshot };\n","type ClassOption = string | RegExp;\n\n/** Duplicate this from @sentry-internal/rrweb so we can export this as well. */\nexport const ReplayEventTypeDomContentLoaded = 0;\nexport const ReplayEventTypeLoad = 1;\nexport const ReplayEventTypeFullSnapshot = 2;\nexport const ReplayEventTypeIncrementalSnapshot = 3;\nexport const ReplayEventTypeMeta = 4;\nexport const ReplayEventTypeCustom = 5;\nexport const ReplayEventTypePlugin = 6;\n\nexport type ReplayEventType =\n  | typeof ReplayEventTypeDomContentLoaded\n  | typeof ReplayEventTypeLoad\n  | typeof ReplayEventTypeFullSnapshot\n  | typeof ReplayEventTypeIncrementalSnapshot\n  | typeof ReplayEventTypeMeta\n  | typeof ReplayEventTypeCustom\n  | typeof ReplayEventTypePlugin;\n\n/**\n * This is a partial copy of rrweb's eventWithTime type which only contains the properties\n * we specifcally need in the SDK.\n */\nexport type ReplayEventWithTime = {\n  type: ReplayEventType;\n  data: unknown;\n  timestamp: number;\n  delay?: number;\n};\n\n/**\n * This is a partial copy of rrweb's recording options which only contains the properties\n * we specifically us in the SDK. Users can specify additional properties, hence we add the\n * Record<string, unknown> union type.\n */\nexport type RrwebRecordOptions = {\n  maskAllText?: boolean;\n  maskAllInputs?: boolean;\n  blockClass?: ClassOption;\n  ignoreClass?: string;\n  maskTextClass?: ClassOption;\n  maskTextSelector?: string;\n  blockSelector?: string;\n  maskInputOptions?: Record<string, boolean>;\n} & Record<string, unknown>;\n\nexport interface CanvasManagerInterface {\n  reset(): void;\n  freeze(): void;\n  unfreeze(): void;\n  lock(): void;\n  unlock(): void;\n  snapshot(): void;\n}\n\nexport interface CanvasManagerOptions {\n  recordCanvas: boolean;\n  enableManualSnapshot?: boolean;\n  blockClass: string | RegExp;\n  blockSelector: string | null;\n  unblockSelector: string | null;\n  sampling?: 'all' | number;\n  dataURLOptions: Partial<{\n    type: string;\n    quality: number;\n  }>;\n  mutationCb: (p: any) => void;\n  win: typeof globalThis & Window;\n  mirror: any;\n}\n","/**\n * Converts a timestamp to ms, if it was in s, or keeps it as ms.\n */\nexport function timestampToMs(timestamp: number): number {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp : timestamp * 1000;\n}\n\n/**\n * Converts a timestamp to s, if it was in ms, or keeps it as s.\n */\nexport function timestampToS(timestamp: number): number {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n","import { EventType } from '@sentry-internal/rrweb';\nimport type { Breadcrumb } from '@sentry/types';\nimport { normalize } from '@sentry/utils';\n\nimport type { ReplayContainer } from '../../types';\n\n/**\n * Add a breadcrumb event to replay.\n */\nexport function addBreadcrumbEvent(replay: ReplayContainer, breadcrumb: Breadcrumb): void {\n  if (breadcrumb.category === 'sentry.transaction') {\n    return;\n  }\n\n  if (['ui.click', 'ui.input'].includes(breadcrumb.category as string)) {\n    replay.triggerUserActivity();\n  } else {\n    replay.checkAndHandleExpiredSession();\n  }\n\n  replay.addUpdate(() => {\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.throttledAddEvent({\n      type: EventType.Custom,\n      // TODO: We were converting from ms to seconds for breadcrumbs, spans,\n      // but maybe we should just keep them as milliseconds\n      timestamp: (breadcrumb.timestamp || 0) * 1000,\n      data: {\n        tag: 'breadcrumb',\n        // normalize to max. 10 depth and 1_000 properties per object\n        payload: normalize(breadcrumb, 10, 1_000),\n      },\n    });\n\n    // Do not flush after console log messages\n    return breadcrumb.category === 'console';\n  });\n}\n","import type { INode } from '@sentry-internal/rrweb-snapshot';\n\nconst INTERACTIVE_SELECTOR = 'button,a';\n\n/** Get the closest interactive parent element, or else return the given element. */\nexport function getClosestInteractive(element: Element): Element {\n  const closestInteractive = element.closest(INTERACTIVE_SELECTOR);\n  return closestInteractive || element;\n}\n\n/**\n * For clicks, we check if the target is inside of a button or link\n * If so, we use this as the target instead\n * This is useful because if you click on the image in <button><img></button>,\n * The target will be the image, not the button, which we don't want here\n */\nexport function getClickTargetNode(event: Event | MouseEvent | Node): Node | INode | null {\n  const target = getTargetNode(event);\n\n  if (!target || !(target instanceof Element)) {\n    return target;\n  }\n\n  return getClosestInteractive(target);\n}\n\n/** Get the event target node. */\nexport function getTargetNode(event: Node | { target: EventTarget | null }): Node | INode | null {\n  if (isEventWithTarget(event)) {\n    return event.target as Node | null;\n  }\n\n  return event;\n}\n\nfunction isEventWithTarget(event: unknown): event is { target: EventTarget | null } {\n  return typeof event === 'object' && !!event && 'target' in event;\n}\n","import { fill } from '@sentry/utils';\n\nimport { WINDOW } from '../../constants';\n\ntype WindowOpenHandler = () => void;\n\nlet handlers: undefined | WindowOpenHandler[];\n\n/**\n * Register a handler to be called when `window.open()` is called.\n * Returns a cleanup function.\n */\nexport function onWindowOpen(cb: WindowOpenHandler): () => void {\n  // Ensure to only register this once\n  if (!handlers) {\n    handlers = [];\n    monkeyPatchWindowOpen();\n  }\n\n  handlers.push(cb);\n\n  return () => {\n    const pos = handlers ? handlers.indexOf(cb) : -1;\n    if (pos > -1) {\n      (handlers as WindowOpenHandler[]).splice(pos, 1);\n    }\n  };\n}\n\nfunction monkeyPatchWindowOpen(): void {\n  fill(WINDOW, 'open', function (originalWindowOpen: () => void): () => void {\n    return function (...args: unknown[]): void {\n      if (handlers) {\n        try {\n          handlers.forEach(handler => handler());\n        } catch (e) {\n          // ignore errors in here\n        }\n      }\n\n      return originalWindowOpen.apply(WINDOW, args);\n    };\n  });\n}\n","import { IncrementalSource, MouseInteractions, record } from '@sentry-internal/rrweb';\nimport type { Breadcrumb } from '@sentry/types';\n\nimport { WINDOW } from '../constants';\nimport type {\n  RecordingEvent,\n  ReplayClickDetector,\n  ReplayContainer,\n  ReplayMultiClickFrame,\n  ReplaySlowClickFrame,\n  SlowClickConfig,\n} from '../types';\nimport { ReplayEventTypeIncrementalSnapshot } from '../types';\nimport { timestampToS } from '../util/timestamp';\nimport { addBreadcrumbEvent } from './util/addBreadcrumbEvent';\nimport { getClosestInteractive } from './util/domUtils';\nimport { onWindowOpen } from './util/onWindowOpen';\n\ntype ClickBreadcrumb = Breadcrumb & {\n  timestamp: number;\n};\n\ninterface Click {\n  timestamp: number;\n  mutationAfter?: number;\n  scrollAfter?: number;\n  clickBreadcrumb: ClickBreadcrumb;\n  clickCount: number;\n  node: HTMLElement;\n}\n\ntype IncrementalRecordingEvent = RecordingEvent & {\n  type: typeof ReplayEventTypeIncrementalSnapshot;\n  data: { source: IncrementalSource };\n};\n\ntype IncrementalMouseInteractionRecordingEvent = IncrementalRecordingEvent & {\n  type: typeof ReplayEventTypeIncrementalSnapshot;\n  data: { type: MouseInteractions; id: number };\n};\n\n/** Handle a click. */\nexport function handleClick(clickDetector: ReplayClickDetector, clickBreadcrumb: Breadcrumb, node: HTMLElement): void {\n  clickDetector.handleClick(clickBreadcrumb, node);\n}\n\n/** A click detector class that can be used to detect slow or rage clicks on elements. */\nexport class ClickDetector implements ReplayClickDetector {\n  // protected for testing\n  protected _lastMutation: number;\n  protected _lastScroll: number;\n\n  private _clicks: Click[];\n  private _teardown: undefined | (() => void);\n\n  private _threshold: number;\n  private _scollTimeout: number;\n  private _timeout: number;\n  private _ignoreSelector: string;\n\n  private _replay: ReplayContainer;\n  private _checkClickTimeout?: ReturnType<typeof setTimeout>;\n  private _addBreadcrumbEvent: typeof addBreadcrumbEvent;\n\n  public constructor(\n    replay: ReplayContainer,\n    slowClickConfig: SlowClickConfig,\n    // Just for easier testing\n    _addBreadcrumbEvent = addBreadcrumbEvent,\n  ) {\n    this._lastMutation = 0;\n    this._lastScroll = 0;\n    this._clicks = [];\n\n    // We want everything in s, but options are in ms\n    this._timeout = slowClickConfig.timeout / 1000;\n    this._threshold = slowClickConfig.threshold / 1000;\n    this._scollTimeout = slowClickConfig.scrollTimeout / 1000;\n    this._replay = replay;\n    this._ignoreSelector = slowClickConfig.ignoreSelector;\n    this._addBreadcrumbEvent = _addBreadcrumbEvent;\n  }\n\n  /** Register click detection handlers on mutation or scroll. */\n  public addListeners(): void {\n    const cleanupWindowOpen = onWindowOpen(() => {\n      // Treat window.open as mutation\n      this._lastMutation = nowInSeconds();\n    });\n\n    this._teardown = () => {\n      cleanupWindowOpen();\n\n      this._clicks = [];\n      this._lastMutation = 0;\n      this._lastScroll = 0;\n    };\n  }\n\n  /** Clean up listeners. */\n  public removeListeners(): void {\n    if (this._teardown) {\n      this._teardown();\n    }\n\n    if (this._checkClickTimeout) {\n      clearTimeout(this._checkClickTimeout);\n    }\n  }\n\n  /** @inheritDoc */\n  public handleClick(breadcrumb: Breadcrumb, node: HTMLElement): void {\n    if (ignoreElement(node, this._ignoreSelector) || !isClickBreadcrumb(breadcrumb)) {\n      return;\n    }\n\n    const newClick: Click = {\n      timestamp: timestampToS(breadcrumb.timestamp),\n      clickBreadcrumb: breadcrumb,\n      // Set this to 0 so we know it originates from the click breadcrumb\n      clickCount: 0,\n      node,\n    };\n\n    // If there was a click in the last 1s on the same element, ignore it - only keep a single reference per second\n    if (\n      this._clicks.some(click => click.node === newClick.node && Math.abs(click.timestamp - newClick.timestamp) < 1)\n    ) {\n      return;\n    }\n\n    this._clicks.push(newClick);\n\n    // If this is the first new click, set a timeout to check for multi clicks\n    if (this._clicks.length === 1) {\n      this._scheduleCheckClicks();\n    }\n  }\n\n  /** @inheritDoc */\n  public registerMutation(timestamp = Date.now()): void {\n    this._lastMutation = timestampToS(timestamp);\n  }\n\n  /** @inheritDoc */\n  public registerScroll(timestamp = Date.now()): void {\n    this._lastScroll = timestampToS(timestamp);\n  }\n\n  /** @inheritDoc */\n  public registerClick(element: HTMLElement): void {\n    const node = getClosestInteractive(element);\n    this._handleMultiClick(node as HTMLElement);\n  }\n\n  /** Count multiple clicks on elements. */\n  private _handleMultiClick(node: HTMLElement): void {\n    this._getClicks(node).forEach(click => {\n      click.clickCount++;\n    });\n  }\n\n  /** Get all pending clicks for a given node. */\n  private _getClicks(node: HTMLElement): Click[] {\n    return this._clicks.filter(click => click.node === node);\n  }\n\n  /** Check the clicks that happened. */\n  private _checkClicks(): void {\n    const timedOutClicks: Click[] = [];\n\n    const now = nowInSeconds();\n\n    this._clicks.forEach(click => {\n      if (!click.mutationAfter && this._lastMutation) {\n        click.mutationAfter = click.timestamp <= this._lastMutation ? this._lastMutation - click.timestamp : undefined;\n      }\n      if (!click.scrollAfter && this._lastScroll) {\n        click.scrollAfter = click.timestamp <= this._lastScroll ? this._lastScroll - click.timestamp : undefined;\n      }\n\n      // All of these are in seconds!\n      if (click.timestamp + this._timeout <= now) {\n        timedOutClicks.push(click);\n      }\n    });\n\n    // Remove \"old\" clicks\n    for (const click of timedOutClicks) {\n      const pos = this._clicks.indexOf(click);\n\n      if (pos > -1) {\n        this._generateBreadcrumbs(click);\n        this._clicks.splice(pos, 1);\n      }\n    }\n\n    // Trigger new check, unless no clicks left\n    if (this._clicks.length) {\n      this._scheduleCheckClicks();\n    }\n  }\n\n  /** Generate matching breadcrumb(s) for the click. */\n  private _generateBreadcrumbs(click: Click): void {\n    const replay = this._replay;\n    const hadScroll = click.scrollAfter && click.scrollAfter <= this._scollTimeout;\n    const hadMutation = click.mutationAfter && click.mutationAfter <= this._threshold;\n\n    const isSlowClick = !hadScroll && !hadMutation;\n    const { clickCount, clickBreadcrumb } = click;\n\n    // Slow click\n    if (isSlowClick) {\n      // If `mutationAfter` is set, it means a mutation happened after the threshold, but before the timeout\n      // If not, it means we just timed out without scroll & mutation\n      const timeAfterClickMs = Math.min(click.mutationAfter || this._timeout, this._timeout) * 1000;\n      const endReason = timeAfterClickMs < this._timeout * 1000 ? 'mutation' : 'timeout';\n\n      const breadcrumb: ReplaySlowClickFrame = {\n        type: 'default',\n        message: clickBreadcrumb.message,\n        timestamp: clickBreadcrumb.timestamp,\n        category: 'ui.slowClickDetected',\n        data: {\n          ...clickBreadcrumb.data,\n          url: WINDOW.location.href,\n          route: replay.getCurrentRoute(),\n          timeAfterClickMs,\n          endReason,\n          // If clickCount === 0, it means multiClick was not correctly captured here\n          // - we still want to send 1 in this case\n          clickCount: clickCount || 1,\n        },\n      };\n\n      this._addBreadcrumbEvent(replay, breadcrumb);\n      return;\n    }\n\n    // Multi click\n    if (clickCount > 1) {\n      const breadcrumb: ReplayMultiClickFrame = {\n        type: 'default',\n        message: clickBreadcrumb.message,\n        timestamp: clickBreadcrumb.timestamp,\n        category: 'ui.multiClick',\n        data: {\n          ...clickBreadcrumb.data,\n          url: WINDOW.location.href,\n          route: replay.getCurrentRoute(),\n          clickCount,\n          metric: true,\n        },\n      };\n\n      this._addBreadcrumbEvent(replay, breadcrumb);\n    }\n  }\n\n  /** Schedule to check current clicks. */\n  private _scheduleCheckClicks(): void {\n    if (this._checkClickTimeout) {\n      clearTimeout(this._checkClickTimeout);\n    }\n\n    this._checkClickTimeout = setTimeout(() => this._checkClicks(), 1000);\n  }\n}\n\nconst SLOW_CLICK_TAGS = ['A', 'BUTTON', 'INPUT'];\n\n/** exported for tests only */\nexport function ignoreElement(node: HTMLElement, ignoreSelector: string): boolean {\n  if (!SLOW_CLICK_TAGS.includes(node.tagName)) {\n    return true;\n  }\n\n  // If <input> tag, we only want to consider input[type='submit'] & input[type='button']\n  if (node.tagName === 'INPUT' && !['submit', 'button'].includes(node.getAttribute('type') || '')) {\n    return true;\n  }\n\n  // If <a> tag, detect special variants that may not lead to an action\n  // If target !== _self, we may open the link somewhere else, which would lead to no action\n  // Also, when downloading a file, we may not leave the page, but still not trigger an action\n  if (\n    node.tagName === 'A' &&\n    (node.hasAttribute('download') || (node.hasAttribute('target') && node.getAttribute('target') !== '_self'))\n  ) {\n    return true;\n  }\n\n  if (ignoreSelector && node.matches(ignoreSelector)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isClickBreadcrumb(breadcrumb: Breadcrumb): breadcrumb is ClickBreadcrumb {\n  return !!(breadcrumb.data && typeof breadcrumb.data.nodeId === 'number' && breadcrumb.timestamp);\n}\n\n// This is good enough for us, and is easier to test/mock than `timestampInSeconds`\nfunction nowInSeconds(): number {\n  return Date.now() / 1000;\n}\n\n/** Update the click detector based on a recording event of rrweb. */\nexport function updateClickDetectorForRecordingEvent(clickDetector: ReplayClickDetector, event: RecordingEvent): void {\n  try {\n    // note: We only consider incremental snapshots here\n    // This means that any full snapshot is ignored for mutation detection - the reason is that we simply cannot know if a mutation happened here.\n    // E.g. think that we are buffering, an error happens and we take a full snapshot because we switched to session mode -\n    // in this scenario, we would not know if a dead click happened because of the error, which is a key dead click scenario.\n    // Instead, by ignoring full snapshots, we have the risk that we generate a false positive\n    // (if a mutation _did_ happen but was \"swallowed\" by the full snapshot)\n    // But this should be more unlikely as we'd generally capture the incremental snapshot right away\n\n    if (!isIncrementalEvent(event)) {\n      return;\n    }\n\n    const { source } = event.data;\n    if (source === IncrementalSource.Mutation) {\n      clickDetector.registerMutation(event.timestamp);\n    }\n\n    if (source === IncrementalSource.Scroll) {\n      clickDetector.registerScroll(event.timestamp);\n    }\n\n    if (isIncrementalMouseInteraction(event)) {\n      const { type, id } = event.data;\n      const node = record.mirror.getNode(id);\n\n      if (node instanceof HTMLElement && type === MouseInteractions.Click) {\n        clickDetector.registerClick(node);\n      }\n    }\n  } catch {\n    // ignore errors here, e.g. if accessing something that does not exist\n  }\n}\n\nfunction isIncrementalEvent(event: RecordingEvent): event is IncrementalRecordingEvent {\n  return event.type === ReplayEventTypeIncrementalSnapshot;\n}\n\nfunction isIncrementalMouseInteraction(\n  event: IncrementalRecordingEvent,\n): event is IncrementalMouseInteractionRecordingEvent {\n  return event.data.source === IncrementalSource.MouseInteraction;\n}\n","import type { ReplayBreadcrumbFrame } from '../types/replayFrame';\n\n/**\n * Create a breadcrumb for a replay.\n */\nexport function createBreadcrumb(\n  breadcrumb: Omit<ReplayBreadcrumbFrame, 'timestamp' | 'type'> & Partial<Pick<ReplayBreadcrumbFrame, 'timestamp'>>,\n): ReplayBreadcrumbFrame {\n  return {\n    timestamp: Date.now() / 1000,\n    type: 'default',\n    ...breadcrumb,\n  };\n}\n","var NodeType;\r\n(function (NodeType) {\r\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\r\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\r\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\r\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\r\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\r\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\r\n})(NodeType || (NodeType = {}));\n\nfunction isElement(n) {\r\n    return n.nodeType === n.ELEMENT_NODE;\r\n}\r\nfunction isShadowRoot(n) {\r\n    const host = n?.host;\r\n    return Boolean(host?.shadowRoot === n);\r\n}\r\nfunction isNativeShadowDom(shadowRoot) {\r\n    return Object.prototype.toString.call(shadowRoot) === '[object ShadowRoot]';\r\n}\r\nfunction fixBrowserCompatibilityIssuesInCSS(cssText) {\r\n    if (cssText.includes(' background-clip: text;') &&\r\n        !cssText.includes(' -webkit-background-clip: text;')) {\r\n        cssText = cssText.replace(' background-clip: text;', ' -webkit-background-clip: text; background-clip: text;');\r\n    }\r\n    return cssText;\r\n}\r\nfunction escapeImportStatement(rule) {\r\n    const { cssText } = rule;\r\n    if (cssText.split('\"').length < 3)\r\n        return cssText;\r\n    const statement = ['@import', `url(${JSON.stringify(rule.href)})`];\r\n    if (rule.layerName === '') {\r\n        statement.push(`layer`);\r\n    }\r\n    else if (rule.layerName) {\r\n        statement.push(`layer(${rule.layerName})`);\r\n    }\r\n    if (rule.supportsText) {\r\n        statement.push(`supports(${rule.supportsText})`);\r\n    }\r\n    if (rule.media.length) {\r\n        statement.push(rule.media.mediaText);\r\n    }\r\n    return statement.join(' ') + ';';\r\n}\r\nfunction stringifyStylesheet(s) {\r\n    try {\r\n        const rules = s.rules || s.cssRules;\r\n        return rules\r\n            ? fixBrowserCompatibilityIssuesInCSS(Array.from(rules, stringifyRule).join(''))\r\n            : null;\r\n    }\r\n    catch (error) {\r\n        return null;\r\n    }\r\n}\r\nfunction stringifyRule(rule) {\r\n    let importStringified;\r\n    if (isCSSImportRule(rule)) {\r\n        try {\r\n            importStringified =\r\n                stringifyStylesheet(rule.styleSheet) ||\r\n                    escapeImportStatement(rule);\r\n        }\r\n        catch (error) {\r\n        }\r\n    }\r\n    else if (isCSSStyleRule(rule) && rule.selectorText.includes(':')) {\r\n        return fixSafariColons(rule.cssText);\r\n    }\r\n    return importStringified || rule.cssText;\r\n}\r\nfunction fixSafariColons(cssStringified) {\r\n    const regex = /(\\[(?:[\\w-]+)[^\\\\])(:(?:[\\w-]+)\\])/gm;\r\n    return cssStringified.replace(regex, '$1\\\\$2');\r\n}\r\nfunction isCSSImportRule(rule) {\r\n    return 'styleSheet' in rule;\r\n}\r\nfunction isCSSStyleRule(rule) {\r\n    return 'selectorText' in rule;\r\n}\r\nclass Mirror {\r\n    constructor() {\r\n        this.idNodeMap = new Map();\r\n        this.nodeMetaMap = new WeakMap();\r\n    }\r\n    getId(n) {\r\n        if (!n)\r\n            return -1;\r\n        const id = this.getMeta(n)?.id;\r\n        return id ?? -1;\r\n    }\r\n    getNode(id) {\r\n        return this.idNodeMap.get(id) || null;\r\n    }\r\n    getIds() {\r\n        return Array.from(this.idNodeMap.keys());\r\n    }\r\n    getMeta(n) {\r\n        return this.nodeMetaMap.get(n) || null;\r\n    }\r\n    removeNodeFromMap(n) {\r\n        const id = this.getId(n);\r\n        this.idNodeMap.delete(id);\r\n        if (n.childNodes) {\r\n            n.childNodes.forEach((childNode) => this.removeNodeFromMap(childNode));\r\n        }\r\n    }\r\n    has(id) {\r\n        return this.idNodeMap.has(id);\r\n    }\r\n    hasNode(node) {\r\n        return this.nodeMetaMap.has(node);\r\n    }\r\n    add(n, meta) {\r\n        const id = meta.id;\r\n        this.idNodeMap.set(id, n);\r\n        this.nodeMetaMap.set(n, meta);\r\n    }\r\n    replace(id, n) {\r\n        const oldNode = this.getNode(id);\r\n        if (oldNode) {\r\n            const meta = this.nodeMetaMap.get(oldNode);\r\n            if (meta)\r\n                this.nodeMetaMap.set(n, meta);\r\n        }\r\n        this.idNodeMap.set(id, n);\r\n    }\r\n    reset() {\r\n        this.idNodeMap = new Map();\r\n        this.nodeMetaMap = new WeakMap();\r\n    }\r\n}\r\nfunction createMirror() {\r\n    return new Mirror();\r\n}\r\nfunction shouldMaskInput({ maskInputOptions, tagName, type, }) {\r\n    if (tagName === 'OPTION') {\r\n        tagName = 'SELECT';\r\n    }\r\n    return Boolean(maskInputOptions[tagName.toLowerCase()] ||\r\n        (type && maskInputOptions[type]) ||\r\n        type === 'password' ||\r\n        (tagName === 'INPUT' && !type && maskInputOptions['text']));\r\n}\r\nfunction maskInputValue({ isMasked, element, value, maskInputFn, }) {\r\n    let text = value || '';\r\n    if (!isMasked) {\r\n        return text;\r\n    }\r\n    if (maskInputFn) {\r\n        text = maskInputFn(text, element);\r\n    }\r\n    return '*'.repeat(text.length);\r\n}\r\nfunction toLowerCase(str) {\r\n    return str.toLowerCase();\r\n}\r\nfunction toUpperCase(str) {\r\n    return str.toUpperCase();\r\n}\r\nconst ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\r\nfunction is2DCanvasBlank(canvas) {\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx)\r\n        return true;\r\n    const chunkSize = 50;\r\n    for (let x = 0; x < canvas.width; x += chunkSize) {\r\n        for (let y = 0; y < canvas.height; y += chunkSize) {\r\n            const getImageData = ctx.getImageData;\r\n            const originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData\r\n                ? getImageData[ORIGINAL_ATTRIBUTE_NAME]\r\n                : getImageData;\r\n            const pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);\r\n            if (pixelBuffer.some((pixel) => pixel !== 0))\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isNodeMetaEqual(a, b) {\r\n    if (!a || !b || a.type !== b.type)\r\n        return false;\r\n    if (a.type === NodeType.Document)\r\n        return a.compatMode === b.compatMode;\r\n    else if (a.type === NodeType.DocumentType)\r\n        return (a.name === b.name &&\r\n            a.publicId === b.publicId &&\r\n            a.systemId === b.systemId);\r\n    else if (a.type === NodeType.Comment ||\r\n        a.type === NodeType.Text ||\r\n        a.type === NodeType.CDATA)\r\n        return a.textContent === b.textContent;\r\n    else if (a.type === NodeType.Element)\r\n        return (a.tagName === b.tagName &&\r\n            JSON.stringify(a.attributes) ===\r\n                JSON.stringify(b.attributes) &&\r\n            a.isSVG === b.isSVG &&\r\n            a.needBlock === b.needBlock);\r\n    return false;\r\n}\r\nfunction getInputType(element) {\r\n    const type = element.type;\r\n    return element.hasAttribute('data-rr-is-password')\r\n        ? 'password'\r\n        : type\r\n            ?\r\n                toLowerCase(type)\r\n            : null;\r\n}\r\nfunction getInputValue(el, tagName, type) {\r\n    if (tagName === 'INPUT' && (type === 'radio' || type === 'checkbox')) {\r\n        return el.getAttribute('value') || '';\r\n    }\r\n    return el.value;\r\n}\n\nlet _id = 1;\r\nconst tagNameRegex = new RegExp('[^a-z0-9-_:]');\r\nconst IGNORED_NODE = -2;\r\nfunction genId() {\r\n    return _id++;\r\n}\r\nfunction getValidTagName(element) {\r\n    if (element instanceof HTMLFormElement) {\r\n        return 'form';\r\n    }\r\n    const processedTagName = toLowerCase(element.tagName);\r\n    if (tagNameRegex.test(processedTagName)) {\r\n        return 'div';\r\n    }\r\n    return processedTagName;\r\n}\r\nfunction extractOrigin(url) {\r\n    let origin = '';\r\n    if (url.indexOf('//') > -1) {\r\n        origin = url.split('/').slice(0, 3).join('/');\r\n    }\r\n    else {\r\n        origin = url.split('/')[0];\r\n    }\r\n    origin = origin.split('?')[0];\r\n    return origin;\r\n}\r\nlet canvasService;\r\nlet canvasCtx;\r\nconst URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")(.*?)\"|([^)]*))\\)/gm;\r\nconst URL_PROTOCOL_MATCH = /^(?:[a-z+]+:)?\\/\\//i;\r\nconst URL_WWW_MATCH = /^www\\..*/i;\r\nconst DATA_URI = /^(data:)([^,]*),(.*)/i;\r\nfunction absoluteToStylesheet(cssText, href) {\r\n    return (cssText || '').replace(URL_IN_CSS_REF, (origin, quote1, path1, quote2, path2, path3) => {\r\n        const filePath = path1 || path2 || path3;\r\n        const maybeQuote = quote1 || quote2 || '';\r\n        if (!filePath) {\r\n            return origin;\r\n        }\r\n        if (URL_PROTOCOL_MATCH.test(filePath) || URL_WWW_MATCH.test(filePath)) {\r\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\r\n        }\r\n        if (DATA_URI.test(filePath)) {\r\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\r\n        }\r\n        if (filePath[0] === '/') {\r\n            return `url(${maybeQuote}${extractOrigin(href) + filePath}${maybeQuote})`;\r\n        }\r\n        const stack = href.split('/');\r\n        const parts = filePath.split('/');\r\n        stack.pop();\r\n        for (const part of parts) {\r\n            if (part === '.') {\r\n                continue;\r\n            }\r\n            else if (part === '..') {\r\n                stack.pop();\r\n            }\r\n            else {\r\n                stack.push(part);\r\n            }\r\n        }\r\n        return `url(${maybeQuote}${stack.join('/')}${maybeQuote})`;\r\n    });\r\n}\r\nconst SRCSET_NOT_SPACES = /^[^ \\t\\n\\r\\u000c]+/;\r\nconst SRCSET_COMMAS_OR_SPACES = /^[, \\t\\n\\r\\u000c]+/;\r\nfunction getAbsoluteSrcsetString(doc, attributeValue) {\r\n    if (attributeValue.trim() === '') {\r\n        return attributeValue;\r\n    }\r\n    let pos = 0;\r\n    function collectCharacters(regEx) {\r\n        let chars;\r\n        const match = regEx.exec(attributeValue.substring(pos));\r\n        if (match) {\r\n            chars = match[0];\r\n            pos += chars.length;\r\n            return chars;\r\n        }\r\n        return '';\r\n    }\r\n    const output = [];\r\n    while (true) {\r\n        collectCharacters(SRCSET_COMMAS_OR_SPACES);\r\n        if (pos >= attributeValue.length) {\r\n            break;\r\n        }\r\n        let url = collectCharacters(SRCSET_NOT_SPACES);\r\n        if (url.slice(-1) === ',') {\r\n            url = absoluteToDoc(doc, url.substring(0, url.length - 1));\r\n            output.push(url);\r\n        }\r\n        else {\r\n            let descriptorsStr = '';\r\n            url = absoluteToDoc(doc, url);\r\n            let inParens = false;\r\n            while (true) {\r\n                const c = attributeValue.charAt(pos);\r\n                if (c === '') {\r\n                    output.push((url + descriptorsStr).trim());\r\n                    break;\r\n                }\r\n                else if (!inParens) {\r\n                    if (c === ',') {\r\n                        pos += 1;\r\n                        output.push((url + descriptorsStr).trim());\r\n                        break;\r\n                    }\r\n                    else if (c === '(') {\r\n                        inParens = true;\r\n                    }\r\n                }\r\n                else {\r\n                    if (c === ')') {\r\n                        inParens = false;\r\n                    }\r\n                }\r\n                descriptorsStr += c;\r\n                pos += 1;\r\n            }\r\n        }\r\n    }\r\n    return output.join(', ');\r\n}\r\nfunction absoluteToDoc(doc, attributeValue) {\r\n    if (!attributeValue || attributeValue.trim() === '') {\r\n        return attributeValue;\r\n    }\r\n    const a = doc.createElement('a');\r\n    a.href = attributeValue;\r\n    return a.href;\r\n}\r\nfunction isSVGElement(el) {\r\n    return Boolean(el.tagName === 'svg' || el.ownerSVGElement);\r\n}\r\nfunction getHref() {\r\n    const a = document.createElement('a');\r\n    a.href = '';\r\n    return a.href;\r\n}\r\nfunction transformAttribute(doc, tagName, name, value, element, maskAttributeFn) {\r\n    if (!value) {\r\n        return value;\r\n    }\r\n    if (name === 'src' ||\r\n        (name === 'href' && !(tagName === 'use' && value[0] === '#'))) {\r\n        return absoluteToDoc(doc, value);\r\n    }\r\n    else if (name === 'xlink:href' && value[0] !== '#') {\r\n        return absoluteToDoc(doc, value);\r\n    }\r\n    else if (name === 'background' &&\r\n        (tagName === 'table' || tagName === 'td' || tagName === 'th')) {\r\n        return absoluteToDoc(doc, value);\r\n    }\r\n    else if (name === 'srcset') {\r\n        return getAbsoluteSrcsetString(doc, value);\r\n    }\r\n    else if (name === 'style') {\r\n        return absoluteToStylesheet(value, getHref());\r\n    }\r\n    else if (tagName === 'object' && name === 'data') {\r\n        return absoluteToDoc(doc, value);\r\n    }\r\n    if (typeof maskAttributeFn === 'function') {\r\n        return maskAttributeFn(name, value, element);\r\n    }\r\n    return value;\r\n}\r\nfunction ignoreAttribute(tagName, name, _value) {\r\n    return (tagName === 'video' || tagName === 'audio') && name === 'autoplay';\r\n}\r\nfunction _isBlockedElement(element, blockClass, blockSelector, unblockSelector) {\r\n    try {\r\n        if (unblockSelector && element.matches(unblockSelector)) {\r\n            return false;\r\n        }\r\n        if (typeof blockClass === 'string') {\r\n            if (element.classList.contains(blockClass)) {\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            for (let eIndex = element.classList.length; eIndex--;) {\r\n                const className = element.classList[eIndex];\r\n                if (blockClass.test(className)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        if (blockSelector) {\r\n            return element.matches(blockSelector);\r\n        }\r\n    }\r\n    catch (e) {\r\n    }\r\n    return false;\r\n}\r\nfunction elementClassMatchesRegex(el, regex) {\r\n    for (let eIndex = el.classList.length; eIndex--;) {\r\n        const className = el.classList[eIndex];\r\n        if (regex.test(className)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction classMatchesRegex(node, regex, checkAncestors) {\r\n    if (!node)\r\n        return false;\r\n    if (checkAncestors) {\r\n        return (distanceToMatch(node, (node) => elementClassMatchesRegex(node, regex)) >= 0);\r\n    }\r\n    else if (node.nodeType === node.ELEMENT_NODE) {\r\n        return elementClassMatchesRegex(node, regex);\r\n    }\r\n    return false;\r\n}\r\nfunction distanceToMatch(node, matchPredicate, limit = Infinity, distance = 0) {\r\n    if (!node)\r\n        return -1;\r\n    if (node.nodeType !== node.ELEMENT_NODE)\r\n        return -1;\r\n    if (distance > limit)\r\n        return -1;\r\n    if (matchPredicate(node))\r\n        return distance;\r\n    return distanceToMatch(node.parentNode, matchPredicate, limit, distance + 1);\r\n}\r\nfunction createMatchPredicate(className, selector) {\r\n    return (node) => {\r\n        const el = node;\r\n        if (el === null)\r\n            return false;\r\n        try {\r\n            if (className) {\r\n                if (typeof className === 'string') {\r\n                    if (el.matches(`.${className}`))\r\n                        return true;\r\n                }\r\n                else if (elementClassMatchesRegex(el, className)) {\r\n                    return true;\r\n                }\r\n            }\r\n            if (selector && el.matches(selector))\r\n                return true;\r\n            return false;\r\n        }\r\n        catch {\r\n            return false;\r\n        }\r\n    };\r\n}\r\nfunction needMaskingText(node, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText) {\r\n    try {\r\n        const el = node.nodeType === node.ELEMENT_NODE\r\n            ? node\r\n            : node.parentElement;\r\n        if (el === null)\r\n            return false;\r\n        if (el.tagName === 'INPUT') {\r\n            const autocomplete = el.getAttribute('autocomplete');\r\n            const disallowedAutocompleteValues = [\r\n                'current-password',\r\n                'new-password',\r\n                'cc-number',\r\n                'cc-exp',\r\n                'cc-exp-month',\r\n                'cc-exp-year',\r\n                'cc-csc',\r\n            ];\r\n            if (disallowedAutocompleteValues.includes(autocomplete)) {\r\n                return true;\r\n            }\r\n        }\r\n        let maskDistance = -1;\r\n        let unmaskDistance = -1;\r\n        if (maskAllText) {\r\n            unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector));\r\n            if (unmaskDistance < 0) {\r\n                return true;\r\n            }\r\n            maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector), unmaskDistance >= 0 ? unmaskDistance : Infinity);\r\n        }\r\n        else {\r\n            maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector));\r\n            if (maskDistance < 0) {\r\n                return false;\r\n            }\r\n            unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector), maskDistance >= 0 ? maskDistance : Infinity);\r\n        }\r\n        return maskDistance >= 0\r\n            ? unmaskDistance >= 0\r\n                ? maskDistance <= unmaskDistance\r\n                : true\r\n            : unmaskDistance >= 0\r\n                ? false\r\n                : !!maskAllText;\r\n    }\r\n    catch (e) {\r\n    }\r\n    return !!maskAllText;\r\n}\r\nfunction onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {\r\n    const win = iframeEl.contentWindow;\r\n    if (!win) {\r\n        return;\r\n    }\r\n    let fired = false;\r\n    let readyState;\r\n    try {\r\n        readyState = win.document.readyState;\r\n    }\r\n    catch (error) {\r\n        return;\r\n    }\r\n    if (readyState !== 'complete') {\r\n        const timer = setTimeout(() => {\r\n            if (!fired) {\r\n                listener();\r\n                fired = true;\r\n            }\r\n        }, iframeLoadTimeout);\r\n        iframeEl.addEventListener('load', () => {\r\n            clearTimeout(timer);\r\n            fired = true;\r\n            listener();\r\n        });\r\n        return;\r\n    }\r\n    const blankUrl = 'about:blank';\r\n    if (win.location.href !== blankUrl ||\r\n        iframeEl.src === blankUrl ||\r\n        iframeEl.src === '') {\r\n        setTimeout(listener, 0);\r\n        return iframeEl.addEventListener('load', listener);\r\n    }\r\n    iframeEl.addEventListener('load', listener);\r\n}\r\nfunction onceStylesheetLoaded(link, listener, styleSheetLoadTimeout) {\r\n    let fired = false;\r\n    let styleSheetLoaded;\r\n    try {\r\n        styleSheetLoaded = link.sheet;\r\n    }\r\n    catch (error) {\r\n        return;\r\n    }\r\n    if (styleSheetLoaded)\r\n        return;\r\n    const timer = setTimeout(() => {\r\n        if (!fired) {\r\n            listener();\r\n            fired = true;\r\n        }\r\n    }, styleSheetLoadTimeout);\r\n    link.addEventListener('load', () => {\r\n        clearTimeout(timer);\r\n        fired = true;\r\n        listener();\r\n    });\r\n}\r\nfunction serializeNode(n, options) {\r\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, maskAllText, maskAttributeFn, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, inlineStylesheet, maskInputOptions = {}, maskTextFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, newlyAddedElement = false, } = options;\r\n    const rootId = getRootId(doc, mirror);\r\n    switch (n.nodeType) {\r\n        case n.DOCUMENT_NODE:\r\n            if (n.compatMode !== 'CSS1Compat') {\r\n                return {\r\n                    type: NodeType.Document,\r\n                    childNodes: [],\r\n                    compatMode: n.compatMode,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    type: NodeType.Document,\r\n                    childNodes: [],\r\n                };\r\n            }\r\n        case n.DOCUMENT_TYPE_NODE:\r\n            return {\r\n                type: NodeType.DocumentType,\r\n                name: n.name,\r\n                publicId: n.publicId,\r\n                systemId: n.systemId,\r\n                rootId,\r\n            };\r\n        case n.ELEMENT_NODE:\r\n            return serializeElementNode(n, {\r\n                doc,\r\n                blockClass,\r\n                blockSelector,\r\n                unblockSelector,\r\n                inlineStylesheet,\r\n                maskAttributeFn,\r\n                maskInputOptions,\r\n                maskInputFn,\r\n                dataURLOptions,\r\n                inlineImages,\r\n                recordCanvas,\r\n                keepIframeSrcFn,\r\n                newlyAddedElement,\r\n                rootId,\r\n                maskAllText,\r\n                maskTextClass,\r\n                unmaskTextClass,\r\n                maskTextSelector,\r\n                unmaskTextSelector,\r\n            });\r\n        case n.TEXT_NODE:\r\n            return serializeTextNode(n, {\r\n                maskAllText,\r\n                maskTextClass,\r\n                unmaskTextClass,\r\n                maskTextSelector,\r\n                unmaskTextSelector,\r\n                maskTextFn,\r\n                maskInputOptions,\r\n                maskInputFn,\r\n                rootId,\r\n            });\r\n        case n.CDATA_SECTION_NODE:\r\n            return {\r\n                type: NodeType.CDATA,\r\n                textContent: '',\r\n                rootId,\r\n            };\r\n        case n.COMMENT_NODE:\r\n            return {\r\n                type: NodeType.Comment,\r\n                textContent: n.textContent || '',\r\n                rootId,\r\n            };\r\n        default:\r\n            return false;\r\n    }\r\n}\r\nfunction getRootId(doc, mirror) {\r\n    if (!mirror.hasNode(doc))\r\n        return undefined;\r\n    const docId = mirror.getId(doc);\r\n    return docId === 1 ? undefined : docId;\r\n}\r\nfunction serializeTextNode(n, options) {\r\n    const { maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, maskTextFn, maskInputOptions, maskInputFn, rootId, } = options;\r\n    const parentTagName = n.parentNode && n.parentNode.tagName;\r\n    let textContent = n.textContent;\r\n    const isStyle = parentTagName === 'STYLE' ? true : undefined;\r\n    const isScript = parentTagName === 'SCRIPT' ? true : undefined;\r\n    const isTextarea = parentTagName === 'TEXTAREA' ? true : undefined;\r\n    if (isStyle && textContent) {\r\n        try {\r\n            if (n.nextSibling || n.previousSibling) {\r\n            }\r\n            else if (n.parentNode.sheet?.cssRules) {\r\n                textContent = stringifyStylesheet(n.parentNode.sheet);\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.warn(`Cannot get CSS styles from text's parentNode. Error: ${err}`, n);\r\n        }\r\n        textContent = absoluteToStylesheet(textContent, getHref());\r\n    }\r\n    if (isScript) {\r\n        textContent = 'SCRIPT_PLACEHOLDER';\r\n    }\r\n    const forceMask = needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText);\r\n    if (!isStyle && !isScript && !isTextarea && textContent && forceMask) {\r\n        textContent = maskTextFn\r\n            ? maskTextFn(textContent, n.parentElement)\r\n            : textContent.replace(/[\\S]/g, '*');\r\n    }\r\n    if (isTextarea && textContent && (maskInputOptions.textarea || forceMask)) {\r\n        textContent = maskInputFn\r\n            ? maskInputFn(textContent, n.parentNode)\r\n            : textContent.replace(/[\\S]/g, '*');\r\n    }\r\n    if (parentTagName === 'OPTION' && textContent) {\r\n        const isInputMasked = shouldMaskInput({\r\n            type: null,\r\n            tagName: parentTagName,\r\n            maskInputOptions,\r\n        });\r\n        textContent = maskInputValue({\r\n            isMasked: needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, isInputMasked),\r\n            element: n,\r\n            value: textContent,\r\n            maskInputFn,\r\n        });\r\n    }\r\n    return {\r\n        type: NodeType.Text,\r\n        textContent: textContent || '',\r\n        isStyle,\r\n        rootId,\r\n    };\r\n}\r\nfunction serializeElementNode(n, options) {\r\n    const { doc, blockClass, blockSelector, unblockSelector, inlineStylesheet, maskInputOptions = {}, maskAttributeFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, newlyAddedElement = false, rootId, maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, } = options;\r\n    const needBlock = _isBlockedElement(n, blockClass, blockSelector, unblockSelector);\r\n    const tagName = getValidTagName(n);\r\n    let attributes = {};\r\n    const len = n.attributes.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const attr = n.attributes[i];\r\n        if (attr.name && !ignoreAttribute(tagName, attr.name, attr.value)) {\r\n            attributes[attr.name] = transformAttribute(doc, tagName, toLowerCase(attr.name), attr.value, n, maskAttributeFn);\r\n        }\r\n    }\r\n    if (tagName === 'link' && inlineStylesheet) {\r\n        const stylesheet = Array.from(doc.styleSheets).find((s) => {\r\n            return s.href === n.href;\r\n        });\r\n        let cssText = null;\r\n        if (stylesheet) {\r\n            cssText = stringifyStylesheet(stylesheet);\r\n        }\r\n        if (cssText) {\r\n            delete attributes.rel;\r\n            delete attributes.href;\r\n            attributes._cssText = absoluteToStylesheet(cssText, stylesheet.href);\r\n        }\r\n    }\r\n    if (tagName === 'style' &&\r\n        n.sheet &&\r\n        !(n.innerText || n.textContent || '').trim().length) {\r\n        const cssText = stringifyStylesheet(n.sheet);\r\n        if (cssText) {\r\n            attributes._cssText = absoluteToStylesheet(cssText, getHref());\r\n        }\r\n    }\r\n    if (tagName === 'input' ||\r\n        tagName === 'textarea' ||\r\n        tagName === 'select' ||\r\n        tagName === 'option') {\r\n        const el = n;\r\n        const type = getInputType(el);\r\n        const value = getInputValue(el, toUpperCase(tagName), type);\r\n        const checked = el.checked;\r\n        if (type !== 'submit' && type !== 'button' && value) {\r\n            const forceMask = needMaskingText(el, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, shouldMaskInput({\r\n                type,\r\n                tagName: toUpperCase(tagName),\r\n                maskInputOptions,\r\n            }));\r\n            attributes.value = maskInputValue({\r\n                isMasked: forceMask,\r\n                element: el,\r\n                value,\r\n                maskInputFn,\r\n            });\r\n        }\r\n        if (checked) {\r\n            attributes.checked = checked;\r\n        }\r\n    }\r\n    if (tagName === 'option') {\r\n        if (n.selected && !maskInputOptions['select']) {\r\n            attributes.selected = true;\r\n        }\r\n        else {\r\n            delete attributes.selected;\r\n        }\r\n    }\r\n    if (tagName === 'canvas' && recordCanvas) {\r\n        if (n.__context === '2d') {\r\n            if (!is2DCanvasBlank(n)) {\r\n                attributes.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\r\n            }\r\n        }\r\n        else if (!('__context' in n)) {\r\n            const canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\r\n            const blankCanvas = document.createElement('canvas');\r\n            blankCanvas.width = n.width;\r\n            blankCanvas.height = n.height;\r\n            const blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);\r\n            if (canvasDataURL !== blankCanvasDataURL) {\r\n                attributes.rr_dataURL = canvasDataURL;\r\n            }\r\n        }\r\n    }\r\n    if (tagName === 'img' && inlineImages) {\r\n        if (!canvasService) {\r\n            canvasService = doc.createElement('canvas');\r\n            canvasCtx = canvasService.getContext('2d');\r\n        }\r\n        const image = n;\r\n        const oldValue = image.crossOrigin;\r\n        image.crossOrigin = 'anonymous';\r\n        const recordInlineImage = () => {\r\n            image.removeEventListener('load', recordInlineImage);\r\n            try {\r\n                canvasService.width = image.naturalWidth;\r\n                canvasService.height = image.naturalHeight;\r\n                canvasCtx.drawImage(image, 0, 0);\r\n                attributes.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);\r\n            }\r\n            catch (err) {\r\n                console.warn(`Cannot inline img src=${image.currentSrc}! Error: ${err}`);\r\n            }\r\n            oldValue\r\n                ? (attributes.crossOrigin = oldValue)\r\n                : image.removeAttribute('crossorigin');\r\n        };\r\n        if (image.complete && image.naturalWidth !== 0)\r\n            recordInlineImage();\r\n        else\r\n            image.addEventListener('load', recordInlineImage);\r\n    }\r\n    if (tagName === 'audio' || tagName === 'video') {\r\n        attributes.rr_mediaState = n.paused\r\n            ? 'paused'\r\n            : 'played';\r\n        attributes.rr_mediaCurrentTime = n.currentTime;\r\n    }\r\n    if (!newlyAddedElement) {\r\n        if (n.scrollLeft) {\r\n            attributes.rr_scrollLeft = n.scrollLeft;\r\n        }\r\n        if (n.scrollTop) {\r\n            attributes.rr_scrollTop = n.scrollTop;\r\n        }\r\n    }\r\n    if (needBlock) {\r\n        const { width, height } = n.getBoundingClientRect();\r\n        attributes = {\r\n            class: attributes.class,\r\n            rr_width: `${width}px`,\r\n            rr_height: `${height}px`,\r\n        };\r\n    }\r\n    if (tagName === 'iframe' && !keepIframeSrcFn(attributes.src)) {\r\n        if (!n.contentDocument) {\r\n            attributes.rr_src = attributes.src;\r\n        }\r\n        delete attributes.src;\r\n    }\r\n    let isCustomElement;\r\n    try {\r\n        if (customElements.get(tagName))\r\n            isCustomElement = true;\r\n    }\r\n    catch (e) {\r\n    }\r\n    return {\r\n        type: NodeType.Element,\r\n        tagName,\r\n        attributes,\r\n        childNodes: [],\r\n        isSVG: isSVGElement(n) || undefined,\r\n        needBlock,\r\n        rootId,\r\n        isCustom: isCustomElement,\r\n    };\r\n}\r\nfunction lowerIfExists(maybeAttr) {\r\n    if (maybeAttr === undefined || maybeAttr === null) {\r\n        return '';\r\n    }\r\n    else {\r\n        return maybeAttr.toLowerCase();\r\n    }\r\n}\r\nfunction slimDOMExcluded(sn, slimDOMOptions) {\r\n    if (slimDOMOptions.comment && sn.type === NodeType.Comment) {\r\n        return true;\r\n    }\r\n    else if (sn.type === NodeType.Element) {\r\n        if (slimDOMOptions.script &&\r\n            (sn.tagName === 'script' ||\r\n                (sn.tagName === 'link' &&\r\n                    (sn.attributes.rel === 'preload' ||\r\n                        sn.attributes.rel === 'modulepreload') &&\r\n                    sn.attributes.as === 'script') ||\r\n                (sn.tagName === 'link' &&\r\n                    sn.attributes.rel === 'prefetch' &&\r\n                    typeof sn.attributes.href === 'string' &&\r\n                    sn.attributes.href.endsWith('.js')))) {\r\n            return true;\r\n        }\r\n        else if (slimDOMOptions.headFavicon &&\r\n            ((sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon') ||\r\n                (sn.tagName === 'meta' &&\r\n                    (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) ||\r\n                        lowerIfExists(sn.attributes.name) === 'application-name' ||\r\n                        lowerIfExists(sn.attributes.rel) === 'icon' ||\r\n                        lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' ||\r\n                        lowerIfExists(sn.attributes.rel) === 'shortcut icon')))) {\r\n            return true;\r\n        }\r\n        else if (sn.tagName === 'meta') {\r\n            if (slimDOMOptions.headMetaDescKeywords &&\r\n                lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {\r\n                return true;\r\n            }\r\n            else if (slimDOMOptions.headMetaSocial &&\r\n                (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) ||\r\n                    lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) ||\r\n                    lowerIfExists(sn.attributes.name) === 'pinterest')) {\r\n                return true;\r\n            }\r\n            else if (slimDOMOptions.headMetaRobots &&\r\n                (lowerIfExists(sn.attributes.name) === 'robots' ||\r\n                    lowerIfExists(sn.attributes.name) === 'googlebot' ||\r\n                    lowerIfExists(sn.attributes.name) === 'bingbot')) {\r\n                return true;\r\n            }\r\n            else if (slimDOMOptions.headMetaHttpEquiv &&\r\n                sn.attributes['http-equiv'] !== undefined) {\r\n                return true;\r\n            }\r\n            else if (slimDOMOptions.headMetaAuthorship &&\r\n                (lowerIfExists(sn.attributes.name) === 'author' ||\r\n                    lowerIfExists(sn.attributes.name) === 'generator' ||\r\n                    lowerIfExists(sn.attributes.name) === 'framework' ||\r\n                    lowerIfExists(sn.attributes.name) === 'publisher' ||\r\n                    lowerIfExists(sn.attributes.name) === 'progid' ||\r\n                    lowerIfExists(sn.attributes.property).match(/^article:/) ||\r\n                    lowerIfExists(sn.attributes.property).match(/^product:/))) {\r\n                return true;\r\n            }\r\n            else if (slimDOMOptions.headMetaVerification &&\r\n                (lowerIfExists(sn.attributes.name) === 'google-site-verification' ||\r\n                    lowerIfExists(sn.attributes.name) === 'yandex-verification' ||\r\n                    lowerIfExists(sn.attributes.name) === 'csrf-token' ||\r\n                    lowerIfExists(sn.attributes.name) === 'p:domain_verify' ||\r\n                    lowerIfExists(sn.attributes.name) === 'verify-v1' ||\r\n                    lowerIfExists(sn.attributes.name) === 'verification' ||\r\n                    lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction serializeNodeWithId(n, options) {\r\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, skipChild = false, inlineStylesheet = true, maskInputOptions = {}, maskAttributeFn, maskTextFn, maskInputFn, slimDOMOptions, dataURLOptions = {}, inlineImages = false, recordCanvas = false, onSerialize, onIframeLoad, iframeLoadTimeout = 5000, onStylesheetLoad, stylesheetLoadTimeout = 5000, keepIframeSrcFn = () => false, newlyAddedElement = false, } = options;\r\n    let { preserveWhiteSpace = true } = options;\r\n    const _serializedNode = serializeNode(n, {\r\n        doc,\r\n        mirror,\r\n        blockClass,\r\n        blockSelector,\r\n        maskAllText,\r\n        unblockSelector,\r\n        maskTextClass,\r\n        unmaskTextClass,\r\n        maskTextSelector,\r\n        unmaskTextSelector,\r\n        inlineStylesheet,\r\n        maskInputOptions,\r\n        maskAttributeFn,\r\n        maskTextFn,\r\n        maskInputFn,\r\n        dataURLOptions,\r\n        inlineImages,\r\n        recordCanvas,\r\n        keepIframeSrcFn,\r\n        newlyAddedElement,\r\n    });\r\n    if (!_serializedNode) {\r\n        console.warn(n, 'not serialized');\r\n        return null;\r\n    }\r\n    let id;\r\n    if (mirror.hasNode(n)) {\r\n        id = mirror.getId(n);\r\n    }\r\n    else if (slimDOMExcluded(_serializedNode, slimDOMOptions) ||\r\n        (!preserveWhiteSpace &&\r\n            _serializedNode.type === NodeType.Text &&\r\n            !_serializedNode.isStyle &&\r\n            !_serializedNode.textContent.replace(/^\\s+|\\s+$/gm, '').length)) {\r\n        id = IGNORED_NODE;\r\n    }\r\n    else {\r\n        id = genId();\r\n    }\r\n    const serializedNode = Object.assign(_serializedNode, { id });\r\n    mirror.add(n, serializedNode);\r\n    if (id === IGNORED_NODE) {\r\n        return null;\r\n    }\r\n    if (onSerialize) {\r\n        onSerialize(n);\r\n    }\r\n    let recordChild = !skipChild;\r\n    if (serializedNode.type === NodeType.Element) {\r\n        recordChild = recordChild && !serializedNode.needBlock;\r\n        delete serializedNode.needBlock;\r\n        const shadowRoot = n.shadowRoot;\r\n        if (shadowRoot && isNativeShadowDom(shadowRoot))\r\n            serializedNode.isShadowHost = true;\r\n    }\r\n    if ((serializedNode.type === NodeType.Document ||\r\n        serializedNode.type === NodeType.Element) &&\r\n        recordChild) {\r\n        if (slimDOMOptions.headWhitespace &&\r\n            serializedNode.type === NodeType.Element &&\r\n            serializedNode.tagName === 'head') {\r\n            preserveWhiteSpace = false;\r\n        }\r\n        const bypassOptions = {\r\n            doc,\r\n            mirror,\r\n            blockClass,\r\n            blockSelector,\r\n            maskAllText,\r\n            unblockSelector,\r\n            maskTextClass,\r\n            unmaskTextClass,\r\n            maskTextSelector,\r\n            unmaskTextSelector,\r\n            skipChild,\r\n            inlineStylesheet,\r\n            maskInputOptions,\r\n            maskAttributeFn,\r\n            maskTextFn,\r\n            maskInputFn,\r\n            slimDOMOptions,\r\n            dataURLOptions,\r\n            inlineImages,\r\n            recordCanvas,\r\n            preserveWhiteSpace,\r\n            onSerialize,\r\n            onIframeLoad,\r\n            iframeLoadTimeout,\r\n            onStylesheetLoad,\r\n            stylesheetLoadTimeout,\r\n            keepIframeSrcFn,\r\n        };\r\n        for (const childN of Array.from(n.childNodes)) {\r\n            const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\r\n            if (serializedChildNode) {\r\n                serializedNode.childNodes.push(serializedChildNode);\r\n            }\r\n        }\r\n        if (isElement(n) && n.shadowRoot) {\r\n            for (const childN of Array.from(n.shadowRoot.childNodes)) {\r\n                const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\r\n                if (serializedChildNode) {\r\n                    isNativeShadowDom(n.shadowRoot) &&\r\n                        (serializedChildNode.isShadow = true);\r\n                    serializedNode.childNodes.push(serializedChildNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (n.parentNode &&\r\n        isShadowRoot(n.parentNode) &&\r\n        isNativeShadowDom(n.parentNode)) {\r\n        serializedNode.isShadow = true;\r\n    }\r\n    if (serializedNode.type === NodeType.Element &&\r\n        serializedNode.tagName === 'iframe') {\r\n        onceIframeLoaded(n, () => {\r\n            const iframeDoc = n.contentDocument;\r\n            if (iframeDoc && onIframeLoad) {\r\n                const serializedIframeNode = serializeNodeWithId(iframeDoc, {\r\n                    doc: iframeDoc,\r\n                    mirror,\r\n                    blockClass,\r\n                    blockSelector,\r\n                    unblockSelector,\r\n                    maskAllText,\r\n                    maskTextClass,\r\n                    unmaskTextClass,\r\n                    maskTextSelector,\r\n                    unmaskTextSelector,\r\n                    skipChild: false,\r\n                    inlineStylesheet,\r\n                    maskInputOptions,\r\n                    maskAttributeFn,\r\n                    maskTextFn,\r\n                    maskInputFn,\r\n                    slimDOMOptions,\r\n                    dataURLOptions,\r\n                    inlineImages,\r\n                    recordCanvas,\r\n                    preserveWhiteSpace,\r\n                    onSerialize,\r\n                    onIframeLoad,\r\n                    iframeLoadTimeout,\r\n                    onStylesheetLoad,\r\n                    stylesheetLoadTimeout,\r\n                    keepIframeSrcFn,\r\n                });\r\n                if (serializedIframeNode) {\r\n                    onIframeLoad(n, serializedIframeNode);\r\n                }\r\n            }\r\n        }, iframeLoadTimeout);\r\n    }\r\n    if (serializedNode.type === NodeType.Element &&\r\n        serializedNode.tagName === 'link' &&\r\n        serializedNode.attributes.rel === 'stylesheet') {\r\n        onceStylesheetLoaded(n, () => {\r\n            if (onStylesheetLoad) {\r\n                const serializedLinkNode = serializeNodeWithId(n, {\r\n                    doc,\r\n                    mirror,\r\n                    blockClass,\r\n                    blockSelector,\r\n                    unblockSelector,\r\n                    maskAllText,\r\n                    maskTextClass,\r\n                    unmaskTextClass,\r\n                    maskTextSelector,\r\n                    unmaskTextSelector,\r\n                    skipChild: false,\r\n                    inlineStylesheet,\r\n                    maskInputOptions,\r\n                    maskAttributeFn,\r\n                    maskTextFn,\r\n                    maskInputFn,\r\n                    slimDOMOptions,\r\n                    dataURLOptions,\r\n                    inlineImages,\r\n                    recordCanvas,\r\n                    preserveWhiteSpace,\r\n                    onSerialize,\r\n                    onIframeLoad,\r\n                    iframeLoadTimeout,\r\n                    onStylesheetLoad,\r\n                    stylesheetLoadTimeout,\r\n                    keepIframeSrcFn,\r\n                });\r\n                if (serializedLinkNode) {\r\n                    onStylesheetLoad(n, serializedLinkNode);\r\n                }\r\n            }\r\n        }, stylesheetLoadTimeout);\r\n    }\r\n    return serializedNode;\r\n}\r\nfunction snapshot(n, options) {\r\n    const { mirror = new Mirror(), blockClass = 'rr-block', blockSelector = null, unblockSelector = null, maskAllText = false, maskTextClass = 'rr-mask', unmaskTextClass = null, maskTextSelector = null, unmaskTextSelector = null, inlineStylesheet = true, inlineImages = false, recordCanvas = false, maskAllInputs = false, maskAttributeFn, maskTextFn, maskInputFn, slimDOM = false, dataURLOptions, preserveWhiteSpace, onSerialize, onIframeLoad, iframeLoadTimeout, onStylesheetLoad, stylesheetLoadTimeout, keepIframeSrcFn = () => false, } = options || {};\r\n    const maskInputOptions = maskAllInputs === true\r\n        ? {\r\n            color: true,\r\n            date: true,\r\n            'datetime-local': true,\r\n            email: true,\r\n            month: true,\r\n            number: true,\r\n            range: true,\r\n            search: true,\r\n            tel: true,\r\n            text: true,\r\n            time: true,\r\n            url: true,\r\n            week: true,\r\n            textarea: true,\r\n            select: true,\r\n        }\r\n        : maskAllInputs === false\r\n            ? {}\r\n            : maskAllInputs;\r\n    const slimDOMOptions = slimDOM === true || slimDOM === 'all'\r\n        ?\r\n            {\r\n                script: true,\r\n                comment: true,\r\n                headFavicon: true,\r\n                headWhitespace: true,\r\n                headMetaDescKeywords: slimDOM === 'all',\r\n                headMetaSocial: true,\r\n                headMetaRobots: true,\r\n                headMetaHttpEquiv: true,\r\n                headMetaAuthorship: true,\r\n                headMetaVerification: true,\r\n            }\r\n        : slimDOM === false\r\n            ? {}\r\n            : slimDOM;\r\n    return serializeNodeWithId(n, {\r\n        doc: n,\r\n        mirror,\r\n        blockClass,\r\n        blockSelector,\r\n        unblockSelector,\r\n        maskAllText,\r\n        maskTextClass,\r\n        unmaskTextClass,\r\n        maskTextSelector,\r\n        unmaskTextSelector,\r\n        skipChild: false,\r\n        inlineStylesheet,\r\n        maskInputOptions,\r\n        maskAttributeFn,\r\n        maskTextFn,\r\n        maskInputFn,\r\n        slimDOMOptions,\r\n        dataURLOptions,\r\n        inlineImages,\r\n        recordCanvas,\r\n        preserveWhiteSpace,\r\n        onSerialize,\r\n        onIframeLoad,\r\n        iframeLoadTimeout,\r\n        onStylesheetLoad,\r\n        stylesheetLoadTimeout,\r\n        keepIframeSrcFn,\r\n        newlyAddedElement: false,\r\n    });\r\n}\r\nfunction visitSnapshot(node, onVisit) {\r\n    function walk(current) {\r\n        onVisit(current);\r\n        if (current.type === NodeType.Document ||\r\n            current.type === NodeType.Element) {\r\n            current.childNodes.forEach(walk);\r\n        }\r\n    }\r\n    walk(node);\r\n}\r\nfunction cleanupSnapshot() {\r\n    _id = 1;\r\n}\n\nconst commentre = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\r\nfunction parse(css, options = {}) {\r\n    let lineno = 1;\r\n    let column = 1;\r\n    function updatePosition(str) {\r\n        const lines = str.match(/\\n/g);\r\n        if (lines) {\r\n            lineno += lines.length;\r\n        }\r\n        const i = str.lastIndexOf('\\n');\r\n        column = i === -1 ? column + str.length : str.length - i;\r\n    }\r\n    function position() {\r\n        const start = { line: lineno, column };\r\n        return (node) => {\r\n            node.position = new Position(start);\r\n            whitespace();\r\n            return node;\r\n        };\r\n    }\r\n    class Position {\r\n        constructor(start) {\r\n            this.start = start;\r\n            this.end = { line: lineno, column };\r\n            this.source = options.source;\r\n        }\r\n    }\r\n    Position.prototype.content = css;\r\n    const errorsList = [];\r\n    function error(msg) {\r\n        const err = new Error(`${options.source || ''}:${lineno}:${column}: ${msg}`);\r\n        err.reason = msg;\r\n        err.filename = options.source;\r\n        err.line = lineno;\r\n        err.column = column;\r\n        err.source = css;\r\n        if (options.silent) {\r\n            errorsList.push(err);\r\n        }\r\n        else {\r\n            throw err;\r\n        }\r\n    }\r\n    function stylesheet() {\r\n        const rulesList = rules();\r\n        return {\r\n            type: 'stylesheet',\r\n            stylesheet: {\r\n                source: options.source,\r\n                rules: rulesList,\r\n                parsingErrors: errorsList,\r\n            },\r\n        };\r\n    }\r\n    function open() {\r\n        return match(/^{\\s*/);\r\n    }\r\n    function close() {\r\n        return match(/^}/);\r\n    }\r\n    function rules() {\r\n        let node;\r\n        const rules = [];\r\n        whitespace();\r\n        comments(rules);\r\n        while (css.length && css.charAt(0) !== '}' && (node = atrule() || rule())) {\r\n            if (node) {\r\n                rules.push(node);\r\n                comments(rules);\r\n            }\r\n        }\r\n        return rules;\r\n    }\r\n    function match(re) {\r\n        const m = re.exec(css);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const str = m[0];\r\n        updatePosition(str);\r\n        css = css.slice(str.length);\r\n        return m;\r\n    }\r\n    function whitespace() {\r\n        match(/^\\s*/);\r\n    }\r\n    function comments(rules = []) {\r\n        let c;\r\n        while ((c = comment())) {\r\n            if (c) {\r\n                rules.push(c);\r\n            }\r\n            c = comment();\r\n        }\r\n        return rules;\r\n    }\r\n    function comment() {\r\n        const pos = position();\r\n        if ('/' !== css.charAt(0) || '*' !== css.charAt(1)) {\r\n            return;\r\n        }\r\n        let i = 2;\r\n        while ('' !== css.charAt(i) &&\r\n            ('*' !== css.charAt(i) || '/' !== css.charAt(i + 1))) {\r\n            ++i;\r\n        }\r\n        i += 2;\r\n        if ('' === css.charAt(i - 1)) {\r\n            return error('End of comment missing');\r\n        }\r\n        const str = css.slice(2, i - 2);\r\n        column += 2;\r\n        updatePosition(str);\r\n        css = css.slice(i);\r\n        column += 2;\r\n        return pos({\r\n            type: 'comment',\r\n            comment: str,\r\n        });\r\n    }\r\n    function selector() {\r\n        whitespace();\r\n        while (css[0] == '}') {\r\n            error('extra closing bracket');\r\n            css = css.slice(1);\r\n            whitespace();\r\n        }\r\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const cleanedInput = m[0]\r\n            .trim()\r\n            .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\r\n            .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, (m) => {\r\n            return m.replace(/,/g, '\\u200C');\r\n        });\r\n        return customSplit(cleanedInput).map((s) => s.replace(/\\u200C/g, ',').trim());\r\n    }\r\n    function customSplit(input) {\r\n        const result = [];\r\n        let currentSegment = '';\r\n        let depthParentheses = 0;\r\n        let depthBrackets = 0;\r\n        let currentStringChar = null;\r\n        for (const char of input) {\r\n            const hasStringEscape = currentSegment.endsWith('\\\\');\r\n            if (currentStringChar) {\r\n                if (currentStringChar === char && !hasStringEscape) {\r\n                    currentStringChar = null;\r\n                }\r\n            }\r\n            else if (char === '(') {\r\n                depthParentheses++;\r\n            }\r\n            else if (char === ')') {\r\n                depthParentheses--;\r\n            }\r\n            else if (char === '[') {\r\n                depthBrackets++;\r\n            }\r\n            else if (char === ']') {\r\n                depthBrackets--;\r\n            }\r\n            else if ('\\'\"'.includes(char)) {\r\n                currentStringChar = char;\r\n            }\r\n            if (char === ',' && depthParentheses === 0 && depthBrackets === 0) {\r\n                result.push(currentSegment);\r\n                currentSegment = '';\r\n            }\r\n            else {\r\n                currentSegment += char;\r\n            }\r\n        }\r\n        if (currentSegment) {\r\n            result.push(currentSegment);\r\n        }\r\n        return result;\r\n    }\r\n    function declaration() {\r\n        const pos = position();\r\n        const propMatch = match(/^(\\*?[-#\\/\\*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\r\n        if (!propMatch) {\r\n            return;\r\n        }\r\n        const prop = trim(propMatch[0]);\r\n        if (!match(/^:\\s*/)) {\r\n            return error(`property missing ':'`);\r\n        }\r\n        const val = match(/^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+)/);\r\n        const ret = pos({\r\n            type: 'declaration',\r\n            property: prop.replace(commentre, ''),\r\n            value: val ? trim(val[0]).replace(commentre, '') : '',\r\n        });\r\n        match(/^[;\\s]*/);\r\n        return ret;\r\n    }\r\n    function declarations() {\r\n        const decls = [];\r\n        if (!open()) {\r\n            return error(`missing '{'`);\r\n        }\r\n        comments(decls);\r\n        let decl;\r\n        while ((decl = declaration())) {\r\n            if (decl !== false) {\r\n                decls.push(decl);\r\n                comments(decls);\r\n            }\r\n            decl = declaration();\r\n        }\r\n        if (!close()) {\r\n            return error(`missing '}'`);\r\n        }\r\n        return decls;\r\n    }\r\n    function keyframe() {\r\n        let m;\r\n        const vals = [];\r\n        const pos = position();\r\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\r\n            vals.push(m[1]);\r\n            match(/^,\\s*/);\r\n        }\r\n        if (!vals.length) {\r\n            return;\r\n        }\r\n        return pos({\r\n            type: 'keyframe',\r\n            values: vals,\r\n            declarations: declarations(),\r\n        });\r\n    }\r\n    function atkeyframes() {\r\n        const pos = position();\r\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const vendor = m[1];\r\n        m = match(/^([-\\w]+)\\s*/);\r\n        if (!m) {\r\n            return error('@keyframes missing name');\r\n        }\r\n        const name = m[1];\r\n        if (!open()) {\r\n            return error(`@keyframes missing '{'`);\r\n        }\r\n        let frame;\r\n        let frames = comments();\r\n        while ((frame = keyframe())) {\r\n            frames.push(frame);\r\n            frames = frames.concat(comments());\r\n        }\r\n        if (!close()) {\r\n            return error(`@keyframes missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'keyframes',\r\n            name,\r\n            vendor,\r\n            keyframes: frames,\r\n        });\r\n    }\r\n    function atsupports() {\r\n        const pos = position();\r\n        const m = match(/^@supports *([^{]+)/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const supports = trim(m[1]);\r\n        if (!open()) {\r\n            return error(`@supports missing '{'`);\r\n        }\r\n        const style = comments().concat(rules());\r\n        if (!close()) {\r\n            return error(`@supports missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'supports',\r\n            supports,\r\n            rules: style,\r\n        });\r\n    }\r\n    function athost() {\r\n        const pos = position();\r\n        const m = match(/^@host\\s*/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        if (!open()) {\r\n            return error(`@host missing '{'`);\r\n        }\r\n        const style = comments().concat(rules());\r\n        if (!close()) {\r\n            return error(`@host missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'host',\r\n            rules: style,\r\n        });\r\n    }\r\n    function atmedia() {\r\n        const pos = position();\r\n        const m = match(/^@media *([^{]+)/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const media = trim(m[1]);\r\n        if (!open()) {\r\n            return error(`@media missing '{'`);\r\n        }\r\n        const style = comments().concat(rules());\r\n        if (!close()) {\r\n            return error(`@media missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'media',\r\n            media,\r\n            rules: style,\r\n        });\r\n    }\r\n    function atcustommedia() {\r\n        const pos = position();\r\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        return pos({\r\n            type: 'custom-media',\r\n            name: trim(m[1]),\r\n            media: trim(m[2]),\r\n        });\r\n    }\r\n    function atpage() {\r\n        const pos = position();\r\n        const m = match(/^@page */);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const sel = selector() || [];\r\n        if (!open()) {\r\n            return error(`@page missing '{'`);\r\n        }\r\n        let decls = comments();\r\n        let decl;\r\n        while ((decl = declaration())) {\r\n            decls.push(decl);\r\n            decls = decls.concat(comments());\r\n        }\r\n        if (!close()) {\r\n            return error(`@page missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'page',\r\n            selectors: sel,\r\n            declarations: decls,\r\n        });\r\n    }\r\n    function atdocument() {\r\n        const pos = position();\r\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        const vendor = trim(m[1]);\r\n        const doc = trim(m[2]);\r\n        if (!open()) {\r\n            return error(`@document missing '{'`);\r\n        }\r\n        const style = comments().concat(rules());\r\n        if (!close()) {\r\n            return error(`@document missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'document',\r\n            document: doc,\r\n            vendor,\r\n            rules: style,\r\n        });\r\n    }\r\n    function atfontface() {\r\n        const pos = position();\r\n        const m = match(/^@font-face\\s*/);\r\n        if (!m) {\r\n            return;\r\n        }\r\n        if (!open()) {\r\n            return error(`@font-face missing '{'`);\r\n        }\r\n        let decls = comments();\r\n        let decl;\r\n        while ((decl = declaration())) {\r\n            decls.push(decl);\r\n            decls = decls.concat(comments());\r\n        }\r\n        if (!close()) {\r\n            return error(`@font-face missing '}'`);\r\n        }\r\n        return pos({\r\n            type: 'font-face',\r\n            declarations: decls,\r\n        });\r\n    }\r\n    const atimport = _compileAtrule('import');\r\n    const atcharset = _compileAtrule('charset');\r\n    const atnamespace = _compileAtrule('namespace');\r\n    function _compileAtrule(name) {\r\n        const re = new RegExp('^@' + name + '\\\\s*([^;]+);');\r\n        return () => {\r\n            const pos = position();\r\n            const m = match(re);\r\n            if (!m) {\r\n                return;\r\n            }\r\n            const ret = { type: name };\r\n            ret[name] = m[1].trim();\r\n            return pos(ret);\r\n        };\r\n    }\r\n    function atrule() {\r\n        if (css[0] !== '@') {\r\n            return;\r\n        }\r\n        return (atkeyframes() ||\r\n            atmedia() ||\r\n            atcustommedia() ||\r\n            atsupports() ||\r\n            atimport() ||\r\n            atcharset() ||\r\n            atnamespace() ||\r\n            atdocument() ||\r\n            atpage() ||\r\n            athost() ||\r\n            atfontface());\r\n    }\r\n    function rule() {\r\n        const pos = position();\r\n        const sel = selector();\r\n        if (!sel) {\r\n            return error('selector missing');\r\n        }\r\n        comments();\r\n        return pos({\r\n            type: 'rule',\r\n            selectors: sel,\r\n            declarations: declarations(),\r\n        });\r\n    }\r\n    return addParent(stylesheet());\r\n}\r\nfunction trim(str) {\r\n    return str ? str.replace(/^\\s+|\\s+$/g, '') : '';\r\n}\r\nfunction addParent(obj, parent) {\r\n    const isNode = obj && typeof obj.type === 'string';\r\n    const childParent = isNode ? obj : parent;\r\n    for (const k of Object.keys(obj)) {\r\n        const value = obj[k];\r\n        if (Array.isArray(value)) {\r\n            value.forEach((v) => {\r\n                addParent(v, childParent);\r\n            });\r\n        }\r\n        else if (value && typeof value === 'object') {\r\n            addParent(value, childParent);\r\n        }\r\n    }\r\n    if (isNode) {\r\n        Object.defineProperty(obj, 'parent', {\r\n            configurable: true,\r\n            writable: true,\r\n            enumerable: false,\r\n            value: parent || null,\r\n        });\r\n    }\r\n    return obj;\r\n}\n\nconst tagMap = {\r\n    script: 'noscript',\r\n    altglyph: 'altGlyph',\r\n    altglyphdef: 'altGlyphDef',\r\n    altglyphitem: 'altGlyphItem',\r\n    animatecolor: 'animateColor',\r\n    animatemotion: 'animateMotion',\r\n    animatetransform: 'animateTransform',\r\n    clippath: 'clipPath',\r\n    feblend: 'feBlend',\r\n    fecolormatrix: 'feColorMatrix',\r\n    fecomponenttransfer: 'feComponentTransfer',\r\n    fecomposite: 'feComposite',\r\n    feconvolvematrix: 'feConvolveMatrix',\r\n    fediffuselighting: 'feDiffuseLighting',\r\n    fedisplacementmap: 'feDisplacementMap',\r\n    fedistantlight: 'feDistantLight',\r\n    fedropshadow: 'feDropShadow',\r\n    feflood: 'feFlood',\r\n    fefunca: 'feFuncA',\r\n    fefuncb: 'feFuncB',\r\n    fefuncg: 'feFuncG',\r\n    fefuncr: 'feFuncR',\r\n    fegaussianblur: 'feGaussianBlur',\r\n    feimage: 'feImage',\r\n    femerge: 'feMerge',\r\n    femergenode: 'feMergeNode',\r\n    femorphology: 'feMorphology',\r\n    feoffset: 'feOffset',\r\n    fepointlight: 'fePointLight',\r\n    fespecularlighting: 'feSpecularLighting',\r\n    fespotlight: 'feSpotLight',\r\n    fetile: 'feTile',\r\n    feturbulence: 'feTurbulence',\r\n    foreignobject: 'foreignObject',\r\n    glyphref: 'glyphRef',\r\n    lineargradient: 'linearGradient',\r\n    radialgradient: 'radialGradient',\r\n};\r\nfunction getTagName(n) {\r\n    let tagName = tagMap[n.tagName] ? tagMap[n.tagName] : n.tagName;\r\n    if (tagName === 'link' && n.attributes._cssText) {\r\n        tagName = 'style';\r\n    }\r\n    return tagName;\r\n}\r\nfunction escapeRegExp(str) {\r\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\nconst HOVER_SELECTOR = /([^\\\\]):hover/;\r\nconst HOVER_SELECTOR_GLOBAL = new RegExp(HOVER_SELECTOR.source, 'g');\r\nfunction addHoverClass(cssText, cache) {\r\n    const cachedStyle = cache?.stylesWithHoverClass.get(cssText);\r\n    if (cachedStyle)\r\n        return cachedStyle;\r\n    if (cssText.length >= 1000000) {\r\n        return cssText;\r\n    }\r\n    const ast = parse(cssText, {\r\n        silent: true,\r\n    });\r\n    if (!ast.stylesheet) {\r\n        return cssText;\r\n    }\r\n    const selectors = [];\r\n    ast.stylesheet.rules.forEach((rule) => {\r\n        if ('selectors' in rule) {\r\n            (rule.selectors || []).forEach((selector) => {\r\n                if (HOVER_SELECTOR.test(selector)) {\r\n                    selectors.push(selector);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    if (selectors.length === 0) {\r\n        return cssText;\r\n    }\r\n    const selectorMatcher = new RegExp(selectors\r\n        .filter((selector, index) => selectors.indexOf(selector) === index)\r\n        .sort((a, b) => b.length - a.length)\r\n        .map((selector) => {\r\n        return escapeRegExp(selector);\r\n    })\r\n        .join('|'), 'g');\r\n    const result = cssText.replace(selectorMatcher, (selector) => {\r\n        const newSelector = selector.replace(HOVER_SELECTOR_GLOBAL, '$1.\\\\:hover');\r\n        return `${selector}, ${newSelector}`;\r\n    });\r\n    cache?.stylesWithHoverClass.set(cssText, result);\r\n    return result;\r\n}\r\nfunction createCache() {\r\n    const stylesWithHoverClass = new Map();\r\n    return {\r\n        stylesWithHoverClass,\r\n    };\r\n}\r\nfunction buildNode(n, options) {\r\n    const { doc, hackCss, cache } = options;\r\n    switch (n.type) {\r\n        case NodeType.Document:\r\n            return doc.implementation.createDocument(null, '', null);\r\n        case NodeType.DocumentType:\r\n            return doc.implementation.createDocumentType(n.name || 'html', n.publicId, n.systemId);\r\n        case NodeType.Element: {\r\n            const tagName = getTagName(n);\r\n            let node;\r\n            if (n.isSVG) {\r\n                node = doc.createElementNS('http://www.w3.org/2000/svg', tagName);\r\n            }\r\n            else {\r\n                if (n.isCustom &&\r\n                    doc.defaultView?.customElements &&\r\n                    !doc.defaultView.customElements.get(n.tagName))\r\n                    doc.defaultView.customElements.define(n.tagName, class extends doc.defaultView.HTMLElement {\r\n                    });\r\n                node = doc.createElement(tagName);\r\n            }\r\n            const specialAttributes = {};\r\n            for (const name in n.attributes) {\r\n                if (!Object.prototype.hasOwnProperty.call(n.attributes, name)) {\r\n                    continue;\r\n                }\r\n                let value = n.attributes[name];\r\n                if (tagName === 'option' &&\r\n                    name === 'selected' &&\r\n                    value === false) {\r\n                    continue;\r\n                }\r\n                if (value === null) {\r\n                    continue;\r\n                }\r\n                if (value === true)\r\n                    value = '';\r\n                if (name.startsWith('rr_')) {\r\n                    specialAttributes[name] = value;\r\n                    continue;\r\n                }\r\n                const isTextarea = tagName === 'textarea' && name === 'value';\r\n                const isRemoteOrDynamicCss = tagName === 'style' && name === '_cssText';\r\n                if (isRemoteOrDynamicCss && hackCss && typeof value === 'string') {\r\n                    value = addHoverClass(value, cache);\r\n                }\r\n                if ((isTextarea || isRemoteOrDynamicCss) && typeof value === 'string') {\r\n                    const child = doc.createTextNode(value);\r\n                    for (const c of Array.from(node.childNodes)) {\r\n                        if (c.nodeType === node.TEXT_NODE) {\r\n                            node.removeChild(c);\r\n                        }\r\n                    }\r\n                    node.appendChild(child);\r\n                    continue;\r\n                }\r\n                try {\r\n                    if (n.isSVG && name === 'xlink:href') {\r\n                        node.setAttributeNS('http://www.w3.org/1999/xlink', name, value.toString());\r\n                    }\r\n                    else if (name === 'onload' ||\r\n                        name === 'onclick' ||\r\n                        name.substring(0, 7) === 'onmouse') {\r\n                        node.setAttribute('_' + name, value.toString());\r\n                    }\r\n                    else if (tagName === 'meta' &&\r\n                        n.attributes['http-equiv'] === 'Content-Security-Policy' &&\r\n                        name === 'content') {\r\n                        node.setAttribute('csp-content', value.toString());\r\n                        continue;\r\n                    }\r\n                    else if (tagName === 'link' &&\r\n                        (n.attributes.rel === 'preload' ||\r\n                            n.attributes.rel === 'modulepreload') &&\r\n                        n.attributes.as === 'script') {\r\n                    }\r\n                    else if (tagName === 'link' &&\r\n                        n.attributes.rel === 'prefetch' &&\r\n                        typeof n.attributes.href === 'string' &&\r\n                        n.attributes.href.endsWith('.js')) {\r\n                    }\r\n                    else if (tagName === 'img' &&\r\n                        n.attributes.srcset &&\r\n                        n.attributes.rr_dataURL) {\r\n                        node.setAttribute('rrweb-original-srcset', n.attributes.srcset);\r\n                    }\r\n                    else {\r\n                        node.setAttribute(name, value.toString());\r\n                    }\r\n                }\r\n                catch (error) {\r\n                }\r\n            }\r\n            for (const name in specialAttributes) {\r\n                const value = specialAttributes[name];\r\n                if (tagName === 'canvas' && name === 'rr_dataURL') {\r\n                    const image = document.createElement('img');\r\n                    image.onload = () => {\r\n                        const ctx = node.getContext('2d');\r\n                        if (ctx) {\r\n                            ctx.drawImage(image, 0, 0, image.width, image.height);\r\n                        }\r\n                    };\r\n                    image.src = value.toString();\r\n                    if (node.RRNodeType)\r\n                        node.rr_dataURL = value.toString();\r\n                }\r\n                else if (tagName === 'img' && name === 'rr_dataURL') {\r\n                    const image = node;\r\n                    if (!image.currentSrc.startsWith('data:')) {\r\n                        image.setAttribute('rrweb-original-src', n.attributes.src);\r\n                        image.src = value.toString();\r\n                    }\r\n                }\r\n                if (name === 'rr_width') {\r\n                    node.style.setProperty('width', value.toString());\r\n                }\r\n                else if (name === 'rr_height') {\r\n                    node.style.setProperty('height', value.toString());\r\n                }\r\n                else if (name === 'rr_mediaCurrentTime' &&\r\n                    typeof value === 'number') {\r\n                    node.currentTime = value;\r\n                }\r\n                else if (name === 'rr_mediaState') {\r\n                    switch (value) {\r\n                        case 'played':\r\n                            node\r\n                                .play()\r\n                                .catch((e) => console.warn('media playback error', e));\r\n                            break;\r\n                        case 'paused':\r\n                            node.pause();\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            if (n.isShadowHost) {\r\n                if (!node.shadowRoot) {\r\n                    node.attachShadow({ mode: 'open' });\r\n                }\r\n                else {\r\n                    while (node.shadowRoot.firstChild) {\r\n                        node.shadowRoot.removeChild(node.shadowRoot.firstChild);\r\n                    }\r\n                }\r\n            }\r\n            return node;\r\n        }\r\n        case NodeType.Text:\r\n            return doc.createTextNode(n.isStyle && hackCss\r\n                ? addHoverClass(n.textContent, cache)\r\n                : n.textContent);\r\n        case NodeType.CDATA:\r\n            return doc.createCDATASection(n.textContent);\r\n        case NodeType.Comment:\r\n            return doc.createComment(n.textContent);\r\n        default:\r\n            return null;\r\n    }\r\n}\r\nfunction buildNodeWithSN(n, options) {\r\n    const { doc, mirror, skipChild = false, hackCss = true, afterAppend, cache, } = options;\r\n    if (mirror.has(n.id)) {\r\n        const nodeInMirror = mirror.getNode(n.id);\r\n        const meta = mirror.getMeta(nodeInMirror);\r\n        if (isNodeMetaEqual(meta, n))\r\n            return mirror.getNode(n.id);\r\n    }\r\n    let node = buildNode(n, { doc, hackCss, cache });\r\n    if (!node) {\r\n        return null;\r\n    }\r\n    if (n.rootId && mirror.getNode(n.rootId) !== doc) {\r\n        mirror.replace(n.rootId, doc);\r\n    }\r\n    if (n.type === NodeType.Document) {\r\n        doc.close();\r\n        doc.open();\r\n        if (n.compatMode === 'BackCompat' &&\r\n            n.childNodes &&\r\n            n.childNodes[0].type !== NodeType.DocumentType) {\r\n            if (n.childNodes[0].type === NodeType.Element &&\r\n                'xmlns' in n.childNodes[0].attributes &&\r\n                n.childNodes[0].attributes.xmlns === 'http://www.w3.org/1999/xhtml') {\r\n                doc.write('<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"\">');\r\n            }\r\n            else {\r\n                doc.write('<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"\">');\r\n            }\r\n        }\r\n        node = doc;\r\n    }\r\n    mirror.add(node, n);\r\n    if ((n.type === NodeType.Document || n.type === NodeType.Element) &&\r\n        !skipChild) {\r\n        for (const childN of n.childNodes) {\r\n            const childNode = buildNodeWithSN(childN, {\r\n                doc,\r\n                mirror,\r\n                skipChild: false,\r\n                hackCss,\r\n                afterAppend,\r\n                cache,\r\n            });\r\n            if (!childNode) {\r\n                console.warn('Failed to rebuild', childN);\r\n                continue;\r\n            }\r\n            if (childN.isShadow && isElement(node) && node.shadowRoot) {\r\n                node.shadowRoot.appendChild(childNode);\r\n            }\r\n            else if (n.type === NodeType.Document &&\r\n                childN.type == NodeType.Element) {\r\n                const htmlElement = childNode;\r\n                let body = null;\r\n                htmlElement.childNodes.forEach((child) => {\r\n                    if (child.nodeName === 'BODY')\r\n                        body = child;\r\n                });\r\n                if (body) {\r\n                    htmlElement.removeChild(body);\r\n                    node.appendChild(childNode);\r\n                    htmlElement.appendChild(body);\r\n                }\r\n                else {\r\n                    node.appendChild(childNode);\r\n                }\r\n            }\r\n            else {\r\n                node.appendChild(childNode);\r\n            }\r\n            if (afterAppend) {\r\n                afterAppend(childNode, childN.id);\r\n            }\r\n        }\r\n    }\r\n    return node;\r\n}\r\nfunction visit(mirror, onVisit) {\r\n    function walk(node) {\r\n        onVisit(node);\r\n    }\r\n    for (const id of mirror.getIds()) {\r\n        if (mirror.has(id)) {\r\n            walk(mirror.getNode(id));\r\n        }\r\n    }\r\n}\r\nfunction handleScroll(node, mirror) {\r\n    const n = mirror.getMeta(node);\r\n    if (n?.type !== NodeType.Element) {\r\n        return;\r\n    }\r\n    const el = node;\r\n    for (const name in n.attributes) {\r\n        if (!(Object.prototype.hasOwnProperty.call(n.attributes, name) &&\r\n            name.startsWith('rr_'))) {\r\n            continue;\r\n        }\r\n        const value = n.attributes[name];\r\n        if (name === 'rr_scrollLeft') {\r\n            el.scrollLeft = value;\r\n        }\r\n        if (name === 'rr_scrollTop') {\r\n            el.scrollTop = value;\r\n        }\r\n    }\r\n}\r\nfunction rebuild(n, options) {\r\n    const { doc, onVisit, hackCss = true, afterAppend, cache, mirror = new Mirror(), } = options;\r\n    const node = buildNodeWithSN(n, {\r\n        doc,\r\n        mirror,\r\n        skipChild: false,\r\n        hackCss,\r\n        afterAppend,\r\n        cache,\r\n    });\r\n    visit(mirror, (visitedNode) => {\r\n        if (onVisit) {\r\n            onVisit(visitedNode);\r\n        }\r\n        handleScroll(visitedNode, mirror);\r\n    });\r\n    return node;\r\n}\n\nexport { IGNORED_NODE, Mirror, NodeType, addHoverClass, buildNodeWithSN, classMatchesRegex, cleanupSnapshot, createCache, createMatchPredicate, createMirror, distanceToMatch, escapeImportStatement, fixSafariColons, genId, getInputType, getInputValue, ignoreAttribute, is2DCanvasBlank, isCSSImportRule, isCSSStyleRule, isElement, isNativeShadowDom, isNodeMetaEqual, isShadowRoot, maskInputValue, needMaskingText, rebuild, serializeNodeWithId, shouldMaskInput, snapshot, stringifyRule, stringifyStylesheet, toLowerCase, toUpperCase, transformAttribute, visitSnapshot };\n","// Note that these are the serialized attributes and not attributes directly on\n// the DOM Node. Attributes we are interested in:\nconst ATTRIBUTES_TO_RECORD = new Set([\n  'id',\n  'class',\n  'aria-label',\n  'role',\n  'name',\n  'alt',\n  'title',\n  'data-test-id',\n  'data-testid',\n  'disabled',\n  'aria-disabled',\n  'data-sentry-component',\n]);\n\n/**\n * Inclusion list of attributes that we want to record from the DOM element\n */\nexport function getAttributesToRecord(attributes: Record<string, unknown>): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  for (const key in attributes) {\n    if (ATTRIBUTES_TO_RECORD.has(key)) {\n      let normalizedKey = key;\n\n      if (key === 'data-testid' || key === 'data-test-id') {\n        normalizedKey = 'testId';\n      }\n\n      obj[normalizedKey] = attributes[key];\n    }\n  }\n\n  return obj;\n}\n","import { record } from '@sentry-internal/rrweb';\nimport type { serializedElementNodeWithId, serializedNodeWithId } from '@sentry-internal/rrweb-snapshot';\nimport { NodeType } from '@sentry-internal/rrweb-snapshot';\nimport type { Breadcrumb, HandlerDataDom } from '@sentry/types';\nimport { htmlTreeAsString } from '@sentry/utils';\n\nimport type { ReplayContainer } from '../types';\nimport { createBreadcrumb } from '../util/createBreadcrumb';\nimport { handleClick } from './handleClick';\nimport { addBreadcrumbEvent } from './util/addBreadcrumbEvent';\nimport { getClickTargetNode, getTargetNode } from './util/domUtils';\nimport { getAttributesToRecord } from './util/getAttributesToRecord';\n\nexport const handleDomListener: (replay: ReplayContainer) => (handlerData: HandlerDataDom) => void = (\n  replay: ReplayContainer,\n) => {\n  return (handlerData: HandlerDataDom): void => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleDom(handlerData);\n\n    if (!result) {\n      return;\n    }\n\n    const isClick = handlerData.name === 'click';\n    const event = isClick ? (handlerData.event as PointerEvent) : undefined;\n    // Ignore clicks if ctrl/alt/meta/shift keys are held down as they alter behavior of clicks (e.g. open in new tab)\n    if (\n      isClick &&\n      replay.clickDetector &&\n      event &&\n      event.target &&\n      !event.altKey &&\n      !event.metaKey &&\n      !event.ctrlKey &&\n      !event.shiftKey\n    ) {\n      handleClick(\n        replay.clickDetector,\n        result as Breadcrumb & { timestamp: number; data: { nodeId: number } },\n        getClickTargetNode(handlerData.event as Event) as HTMLElement,\n      );\n    }\n\n    addBreadcrumbEvent(replay, result);\n  };\n};\n\n/** Get the base DOM breadcrumb. */\nexport function getBaseDomBreadcrumb(target: Node | null, message: string): Breadcrumb {\n  const nodeId = record.mirror.getId(target);\n  const node = nodeId && record.mirror.getNode(nodeId);\n  const meta = node && record.mirror.getMeta(node);\n  const element = meta && isElement(meta) ? meta : null;\n\n  return {\n    message,\n    data: element\n      ? {\n          nodeId,\n          node: {\n            id: nodeId,\n            tagName: element.tagName,\n            textContent: Array.from(element.childNodes)\n              .map((node: serializedNodeWithId) => node.type === NodeType.Text && node.textContent)\n              .filter(Boolean) // filter out empty values\n              .map(text => (text as string).trim())\n              .join(''),\n            attributes: getAttributesToRecord(element.attributes),\n          },\n        }\n      : {},\n  };\n}\n\n/**\n * An event handler to react to DOM events.\n * Exported for tests.\n */\nexport function handleDom(handlerData: HandlerDataDom): Breadcrumb | null {\n  const { target, message } = getDomTarget(handlerData);\n\n  return createBreadcrumb({\n    category: `ui.${handlerData.name}`,\n    ...getBaseDomBreadcrumb(target, message),\n  });\n}\n\nfunction getDomTarget(handlerData: HandlerDataDom): { target: Node | null; message: string } {\n  const isClick = handlerData.name === 'click';\n\n  let message: string | undefined;\n  let target: Node | null = null;\n\n  // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n  try {\n    target = isClick ? getClickTargetNode(handlerData.event as Event) : getTargetNode(handlerData.event as Event);\n    message = htmlTreeAsString(target, { maxStringLength: 200 }) || '<unknown>';\n  } catch (e) {\n    message = '<unknown>';\n  }\n\n  return { target, message };\n}\n\nfunction isElement(node: serializedNodeWithId): node is serializedElementNodeWithId {\n  return node.type === NodeType.Element;\n}\n","import type { Breadcrumb } from '@sentry/types';\nimport { htmlTreeAsString } from '@sentry/utils';\n\nimport type { ReplayContainer } from '../types';\nimport { createBreadcrumb } from '../util/createBreadcrumb';\nimport { getBaseDomBreadcrumb } from './handleDom';\nimport { addBreadcrumbEvent } from './util/addBreadcrumbEvent';\n\n/** Handle keyboard events & create breadcrumbs. */\nexport function handleKeyboardEvent(replay: ReplayContainer, event: KeyboardEvent): void {\n  if (!replay.isEnabled()) {\n    return;\n  }\n\n  // Update user activity, but do not restart recording as it can create\n  // noisy/low-value replays (e.g. user comes back from idle, hits alt-tab, new\n  // session with a single \"keydown\" breadcrumb is created)\n  replay.updateUserActivity();\n\n  const breadcrumb = getKeyboardBreadcrumb(event);\n\n  if (!breadcrumb) {\n    return;\n  }\n\n  addBreadcrumbEvent(replay, breadcrumb);\n}\n\n/** exported only for tests */\nexport function getKeyboardBreadcrumb(event: KeyboardEvent): Breadcrumb | null {\n  const { metaKey, shiftKey, ctrlKey, altKey, key, target } = event;\n\n  // never capture for input fields\n  if (!target || isInputElement(target as HTMLElement) || !key) {\n    return null;\n  }\n\n  // Note: We do not consider shift here, as that means \"uppercase\"\n  const hasModifierKey = metaKey || ctrlKey || altKey;\n  const isCharacterKey = key.length === 1; // other keys like Escape, Tab, etc have a longer length\n\n  // Do not capture breadcrumb if only a word key is pressed\n  // This could leak e.g. user input\n  if (!hasModifierKey && isCharacterKey) {\n    return null;\n  }\n\n  const message = htmlTreeAsString(target, { maxStringLength: 200 }) || '<unknown>';\n  const baseBreadcrumb = getBaseDomBreadcrumb(target as Node, message);\n\n  return createBreadcrumb({\n    category: 'ui.keyDown',\n    message,\n    data: {\n      ...baseBreadcrumb.data,\n      metaKey,\n      shiftKey,\n      ctrlKey,\n      altKey,\n      key,\n    },\n  });\n}\n\nfunction isInputElement(target: HTMLElement): boolean {\n  return target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable;\n}\n","import { record } from '@sentry-internal/rrweb';\nimport { browserPerformanceTimeOrigin } from '@sentry/utils';\n\nimport { WINDOW } from '../constants';\nimport type {\n  AllPerformanceEntry,\n  AllPerformanceEntryData,\n  ExperimentalPerformanceResourceTiming,\n  LargestContentfulPaintData,\n  NavigationData,\n  PaintData,\n  ReplayPerformanceEntry,\n  ResourceData,\n} from '../types';\n\n// Map entryType -> function to normalize data for event\nconst ENTRY_TYPES: Record<\n  string,\n  (entry: AllPerformanceEntry) => null | ReplayPerformanceEntry<AllPerformanceEntryData>\n> = {\n  // @ts-expect-error TODO: entry type does not fit the create* functions entry type\n  resource: createResourceEntry,\n  paint: createPaintEntry,\n  // @ts-expect-error TODO: entry type does not fit the create* functions entry type\n  navigation: createNavigationEntry,\n};\n\n/**\n * Create replay performance entries from the browser performance entries.\n */\nexport function createPerformanceEntries(\n  entries: AllPerformanceEntry[],\n): ReplayPerformanceEntry<AllPerformanceEntryData>[] {\n  return entries.map(createPerformanceEntry).filter(Boolean) as ReplayPerformanceEntry<AllPerformanceEntryData>[];\n}\n\nfunction createPerformanceEntry(entry: AllPerformanceEntry): ReplayPerformanceEntry<AllPerformanceEntryData> | null {\n  if (!ENTRY_TYPES[entry.entryType]) {\n    return null;\n  }\n\n  return ENTRY_TYPES[entry.entryType](entry);\n}\n\nfunction getAbsoluteTime(time: number): number {\n  // browserPerformanceTimeOrigin can be undefined if `performance` or\n  // `performance.now` doesn't exist, but this is already checked by this integration\n  return ((browserPerformanceTimeOrigin || WINDOW.performance.timeOrigin) + time) / 1000;\n}\n\nfunction createPaintEntry(entry: PerformancePaintTiming): ReplayPerformanceEntry<PaintData> {\n  const { duration, entryType, name, startTime } = entry;\n\n  const start = getAbsoluteTime(startTime);\n  return {\n    type: entryType,\n    name,\n    start,\n    end: start + duration,\n    data: undefined,\n  };\n}\n\nfunction createNavigationEntry(entry: PerformanceNavigationTiming): ReplayPerformanceEntry<NavigationData> | null {\n  const {\n    entryType,\n    name,\n    decodedBodySize,\n    duration,\n    domComplete,\n    encodedBodySize,\n    domContentLoadedEventStart,\n    domContentLoadedEventEnd,\n    domInteractive,\n    loadEventStart,\n    loadEventEnd,\n    redirectCount,\n    startTime,\n    transferSize,\n    type,\n  } = entry;\n\n  // Ignore entries with no duration, they do not seem to be useful and cause dupes\n  if (duration === 0) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${type}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(domComplete),\n    name,\n    data: {\n      size: transferSize,\n      decodedBodySize,\n      encodedBodySize,\n      duration,\n      domInteractive,\n      domContentLoadedEventStart,\n      domContentLoadedEventEnd,\n      loadEventStart,\n      loadEventEnd,\n      domComplete,\n      redirectCount,\n    },\n  };\n}\n\nfunction createResourceEntry(\n  entry: ExperimentalPerformanceResourceTiming,\n): ReplayPerformanceEntry<ResourceData> | null {\n  const {\n    entryType,\n    initiatorType,\n    name,\n    responseEnd,\n    startTime,\n    decodedBodySize,\n    encodedBodySize,\n    responseStatus,\n    transferSize,\n  } = entry;\n\n  // Core SDK handles these\n  if (['fetch', 'xmlhttprequest'].includes(initiatorType)) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${initiatorType}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(responseEnd),\n    name,\n    data: {\n      size: transferSize,\n      statusCode: responseStatus,\n      decodedBodySize,\n      encodedBodySize,\n    },\n  };\n}\n\n/**\n * Add a LCP event to the replay based on an LCP metric.\n */\nexport function getLargestContentfulPaint(metric: {\n  value: number;\n  entries: PerformanceEntry[];\n}): ReplayPerformanceEntry<LargestContentfulPaintData> {\n  const entries = metric.entries;\n  const lastEntry = entries[entries.length - 1] as (PerformanceEntry & { element?: Element }) | undefined;\n  const element = lastEntry ? lastEntry.element : undefined;\n\n  const value = metric.value;\n\n  const end = getAbsoluteTime(value);\n\n  const data: ReplayPerformanceEntry<LargestContentfulPaintData> = {\n    type: 'largest-contentful-paint',\n    name: 'largest-contentful-paint',\n    start: end,\n    end,\n    data: {\n      value,\n      size: value,\n      nodeId: element ? record.mirror.getId(element) : undefined,\n    },\n  };\n\n  return data;\n}\n","import { addLcpInstrumentationHandler, addPerformanceInstrumentationHandler } from '@sentry-internal/tracing';\n\nimport type { ReplayContainer } from '../types';\nimport { getLargestContentfulPaint } from '../util/createPerformanceEntries';\n\n/**\n * Sets up a PerformanceObserver to listen to all performance entry types.\n * Returns a callback to stop observing.\n */\nexport function setupPerformanceObserver(replay: ReplayContainer): () => void {\n  function addPerformanceEntry(entry: PerformanceEntry): void {\n    // It is possible for entries to come up multiple times\n    if (!replay.performanceEntries.includes(entry)) {\n      replay.performanceEntries.push(entry);\n    }\n  }\n\n  function onEntries({ entries }: { entries: PerformanceEntry[] }): void {\n    entries.forEach(addPerformanceEntry);\n  }\n\n  const clearCallbacks: (() => void)[] = [];\n\n  (['navigation', 'paint', 'resource'] as const).forEach(type => {\n    clearCallbacks.push(addPerformanceInstrumentationHandler(type, onEntries));\n  });\n\n  clearCallbacks.push(\n    addLcpInstrumentationHandler(({ metric }) => {\n      replay.replayPerformanceEntries.push(getLargestContentfulPaint(metric));\n    }),\n  );\n\n  // A callback to cleanup all handlers\n  return () => {\n    clearCallbacks.forEach(clearCallback => clearCallback());\n  };\n}\n","declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n","export default `var t=Uint8Array,n=Uint16Array,r=Int32Array,e=new t([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),i=new t([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),a=new t([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),s=function(t,e){for(var i=new n(31),a=0;a<31;++a)i[a]=e+=1<<t[a-1];var s=new r(i[30]);for(a=1;a<30;++a)for(var o=i[a];o<i[a+1];++o)s[o]=o-i[a]<<5|a;return{b:i,r:s}},o=s(e,2),f=o.b,h=o.r;f[28]=258,h[258]=28;for(var l=s(i,0).r,u=new n(32768),c=0;c<32768;++c){var v=(43690&c)>>1|(21845&c)<<1;v=(61680&(v=(52428&v)>>2|(13107&v)<<2))>>4|(3855&v)<<4,u[c]=((65280&v)>>8|(255&v)<<8)>>1}var d=function(t,r,e){for(var i=t.length,a=0,s=new n(r);a<i;++a)t[a]&&++s[t[a]-1];var o,f=new n(r);for(a=1;a<r;++a)f[a]=f[a-1]+s[a-1]<<1;if(e){o=new n(1<<r);var h=15-r;for(a=0;a<i;++a)if(t[a])for(var l=a<<4|t[a],c=r-t[a],v=f[t[a]-1]++<<c,d=v|(1<<c)-1;v<=d;++v)o[u[v]>>h]=l}else for(o=new n(i),a=0;a<i;++a)t[a]&&(o[a]=u[f[t[a]-1]++]>>15-t[a]);return o},g=new t(288);for(c=0;c<144;++c)g[c]=8;for(c=144;c<256;++c)g[c]=9;for(c=256;c<280;++c)g[c]=7;for(c=280;c<288;++c)g[c]=8;var w=new t(32);for(c=0;c<32;++c)w[c]=5;var p=d(g,9,0),y=d(w,5,0),m=function(t){return(t+7)/8|0},b=function(n,r,e){return(null==r||r<0)&&(r=0),(null==e||e>n.length)&&(e=n.length),new t(n.subarray(r,e))},M=[\"unexpected EOF\",\"invalid block type\",\"invalid length/literal\",\"invalid distance\",\"stream finished\",\"no stream handler\",,\"no callback\",\"invalid UTF-8 data\",\"extra field too long\",\"date not in range 1980-2099\",\"filename too long\",\"stream finishing\",\"invalid zip data\"],E=function(t,n,r){var e=new Error(n||M[t]);if(e.code=t,Error.captureStackTrace&&Error.captureStackTrace(e,E),!r)throw e;return e},z=function(t,n,r){r<<=7&n;var e=n/8|0;t[e]|=r,t[e+1]|=r>>8},A=function(t,n,r){r<<=7&n;var e=n/8|0;t[e]|=r,t[e+1]|=r>>8,t[e+2]|=r>>16},_=function(r,e){for(var i=[],a=0;a<r.length;++a)r[a]&&i.push({s:a,f:r[a]});var s=i.length,o=i.slice();if(!s)return{t:F,l:0};if(1==s){var f=new t(i[0].s+1);return f[i[0].s]=1,{t:f,l:1}}i.sort((function(t,n){return t.f-n.f})),i.push({s:-1,f:25001});var h=i[0],l=i[1],u=0,c=1,v=2;for(i[0]={s:-1,f:h.f+l.f,l:h,r:l};c!=s-1;)h=i[i[u].f<i[v].f?u++:v++],l=i[u!=c&&i[u].f<i[v].f?u++:v++],i[c++]={s:-1,f:h.f+l.f,l:h,r:l};var d=o[0].s;for(a=1;a<s;++a)o[a].s>d&&(d=o[a].s);var g=new n(d+1),w=x(i[c-1],g,0);if(w>e){a=0;var p=0,y=w-e,m=1<<y;for(o.sort((function(t,n){return g[n.s]-g[t.s]||t.f-n.f}));a<s;++a){var b=o[a].s;if(!(g[b]>e))break;p+=m-(1<<w-g[b]),g[b]=e}for(p>>=y;p>0;){var M=o[a].s;g[M]<e?p-=1<<e-g[M]++-1:++a}for(;a>=0&&p;--a){var E=o[a].s;g[E]==e&&(--g[E],++p)}w=e}return{t:new t(g),l:w}},x=function(t,n,r){return-1==t.s?Math.max(x(t.l,n,r+1),x(t.r,n,r+1)):n[t.s]=r},D=function(t){for(var r=t.length;r&&!t[--r];);for(var e=new n(++r),i=0,a=t[0],s=1,o=function(t){e[i++]=t},f=1;f<=r;++f)if(t[f]==a&&f!=r)++s;else{if(!a&&s>2){for(;s>138;s-=138)o(32754);s>2&&(o(s>10?s-11<<5|28690:s-3<<5|12305),s=0)}else if(s>3){for(o(a),--s;s>6;s-=6)o(8304);s>2&&(o(s-3<<5|8208),s=0)}for(;s--;)o(a);s=1,a=t[f]}return{c:e.subarray(0,i),n:r}},T=function(t,n){for(var r=0,e=0;e<n.length;++e)r+=t[e]*n[e];return r},k=function(t,n,r){var e=r.length,i=m(n+2);t[i]=255&e,t[i+1]=e>>8,t[i+2]=255^t[i],t[i+3]=255^t[i+1];for(var a=0;a<e;++a)t[i+a+4]=r[a];return 8*(i+4+e)},C=function(t,r,s,o,f,h,l,u,c,v,m){z(r,m++,s),++f[256];for(var b=_(f,15),M=b.t,E=b.l,x=_(h,15),C=x.t,U=x.l,F=D(M),I=F.c,S=F.n,L=D(C),O=L.c,j=L.n,q=new n(19),B=0;B<I.length;++B)++q[31&I[B]];for(B=0;B<O.length;++B)++q[31&O[B]];for(var G=_(q,7),H=G.t,J=G.l,K=19;K>4&&!H[a[K-1]];--K);var N,P,Q,R,V=v+5<<3,W=T(f,g)+T(h,w)+l,X=T(f,M)+T(h,C)+l+14+3*K+T(q,H)+2*q[16]+3*q[17]+7*q[18];if(c>=0&&V<=W&&V<=X)return k(r,m,t.subarray(c,c+v));if(z(r,m,1+(X<W)),m+=2,X<W){N=d(M,E,0),P=M,Q=d(C,U,0),R=C;var Y=d(H,J,0);z(r,m,S-257),z(r,m+5,j-1),z(r,m+10,K-4),m+=14;for(B=0;B<K;++B)z(r,m+3*B,H[a[B]]);m+=3*K;for(var Z=[I,O],$=0;$<2;++$){var tt=Z[$];for(B=0;B<tt.length;++B){var nt=31&tt[B];z(r,m,Y[nt]),m+=H[nt],nt>15&&(z(r,m,tt[B]>>5&127),m+=tt[B]>>12)}}}else N=p,P=g,Q=y,R=w;for(B=0;B<u;++B){var rt=o[B];if(rt>255){A(r,m,N[(nt=rt>>18&31)+257]),m+=P[nt+257],nt>7&&(z(r,m,rt>>23&31),m+=e[nt]);var et=31&rt;A(r,m,Q[et]),m+=R[et],et>3&&(A(r,m,rt>>5&8191),m+=i[et])}else A(r,m,N[rt]),m+=P[rt]}return A(r,m,N[256]),m+P[256]},U=new r([65540,131080,131088,131104,262176,1048704,1048832,2114560,2117632]),F=new t(0),I=function(){for(var t=new Int32Array(256),n=0;n<256;++n){for(var r=n,e=9;--e;)r=(1&r&&-306674912)^r>>>1;t[n]=r}return t}(),S=function(){var t=1,n=0;return{p:function(r){for(var e=t,i=n,a=0|r.length,s=0;s!=a;){for(var o=Math.min(s+2655,a);s<o;++s)i+=e+=r[s];e=(65535&e)+15*(e>>16),i=(65535&i)+15*(i>>16)}t=e,n=i},d:function(){return(255&(t%=65521))<<24|(65280&t)<<8|(255&(n%=65521))<<8|n>>8}}},L=function(a,s,o,f,u){if(!u&&(u={l:1},s.dictionary)){var c=s.dictionary.subarray(-32768),v=new t(c.length+a.length);v.set(c),v.set(a,c.length),a=v,u.w=c.length}return function(a,s,o,f,u,c){var v=c.z||a.length,d=new t(f+v+5*(1+Math.ceil(v/7e3))+u),g=d.subarray(f,d.length-u),w=c.l,p=7&(c.r||0);if(s){p&&(g[0]=c.r>>3);for(var y=U[s-1],M=y>>13,E=8191&y,z=(1<<o)-1,A=c.p||new n(32768),_=c.h||new n(z+1),x=Math.ceil(o/3),D=2*x,T=function(t){return(a[t]^a[t+1]<<x^a[t+2]<<D)&z},F=new r(25e3),I=new n(288),S=new n(32),L=0,O=0,j=c.i||0,q=0,B=c.w||0,G=0;j+2<v;++j){var H=T(j),J=32767&j,K=_[H];if(A[J]=K,_[H]=J,B<=j){var N=v-j;if((L>7e3||q>24576)&&(N>423||!w)){p=C(a,g,0,F,I,S,O,q,G,j-G,p),q=L=O=0,G=j;for(var P=0;P<286;++P)I[P]=0;for(P=0;P<30;++P)S[P]=0}var Q=2,R=0,V=E,W=J-K&32767;if(N>2&&H==T(j-W))for(var X=Math.min(M,N)-1,Y=Math.min(32767,j),Z=Math.min(258,N);W<=Y&&--V&&J!=K;){if(a[j+Q]==a[j+Q-W]){for(var $=0;$<Z&&a[j+$]==a[j+$-W];++$);if($>Q){if(Q=$,R=W,$>X)break;var tt=Math.min(W,$-2),nt=0;for(P=0;P<tt;++P){var rt=j-W+P&32767,et=rt-A[rt]&32767;et>nt&&(nt=et,K=rt)}}}W+=(J=K)-(K=A[J])&32767}if(R){F[q++]=268435456|h[Q]<<18|l[R];var it=31&h[Q],at=31&l[R];O+=e[it]+i[at],++I[257+it],++S[at],B=j+Q,++L}else F[q++]=a[j],++I[a[j]]}}for(j=Math.max(j,B);j<v;++j)F[q++]=a[j],++I[a[j]];p=C(a,g,w,F,I,S,O,q,G,j-G,p),w||(c.r=7&p|g[p/8|0]<<3,p-=7,c.h=_,c.p=A,c.i=j,c.w=B)}else{for(j=c.w||0;j<v+w;j+=65535){var st=j+65535;st>=v&&(g[p/8|0]=w,st=v),p=k(g,p+1,a.subarray(j,st))}c.i=v}return b(d,0,f+m(p)+u)}(a,null==s.level?6:s.level,null==s.mem?Math.ceil(1.5*Math.max(8,Math.min(13,Math.log(a.length)))):12+s.mem,o,f,u)},O=function(t,n,r){for(;r;++n)t[n]=r,r>>>=8},j=function(){function n(n,r){if(\"function\"==typeof n&&(r=n,n={}),this.ondata=r,this.o=n||{},this.s={l:0,i:32768,w:32768,z:32768},this.b=new t(98304),this.o.dictionary){var e=this.o.dictionary.subarray(-32768);this.b.set(e,32768-e.length),this.s.i=32768-e.length}}return n.prototype.p=function(t,n){this.ondata(L(t,this.o,0,0,this.s),n)},n.prototype.push=function(n,r){this.ondata||E(5),this.s.l&&E(4);var e=n.length+this.s.z;if(e>this.b.length){if(e>2*this.b.length-32768){var i=new t(-32768&e);i.set(this.b.subarray(0,this.s.z)),this.b=i}var a=this.b.length-this.s.z;a&&(this.b.set(n.subarray(0,a),this.s.z),this.s.z=this.b.length,this.p(this.b,!1)),this.b.set(this.b.subarray(-32768)),this.b.set(n.subarray(a),32768),this.s.z=n.length-a+32768,this.s.i=32766,this.s.w=32768}else this.b.set(n,this.s.z),this.s.z+=n.length;this.s.l=1&r,(this.s.z>this.s.w+8191||r)&&(this.p(this.b,r||!1),this.s.w=this.s.i,this.s.i-=2)},n}();function q(t,n){n||(n={});var r=function(){var t=-1;return{p:function(n){for(var r=t,e=0;e<n.length;++e)r=I[255&r^n[e]]^r>>>8;t=r},d:function(){return~t}}}(),e=t.length;r.p(t);var i,a=L(t,n,10+((i=n).filename?i.filename.length+1:0),8),s=a.length;return function(t,n){var r=n.filename;if(t[0]=31,t[1]=139,t[2]=8,t[8]=n.level<2?4:9==n.level?2:0,t[9]=3,0!=n.mtime&&O(t,4,Math.floor(new Date(n.mtime||Date.now())/1e3)),r){t[3]=8;for(var e=0;e<=r.length;++e)t[e+10]=r.charCodeAt(e)}}(a,n),O(a,s-8,r.d()),O(a,s-4,e),a}var B=function(){function t(t,n){this.c=S(),this.v=1,j.call(this,t,n)}return t.prototype.push=function(t,n){this.c.p(t),j.prototype.push.call(this,t,n)},t.prototype.p=function(t,n){var r=L(t,this.o,this.v&&(this.o.dictionary?6:2),n&&4,this.s);this.v&&(function(t,n){var r=n.level,e=0==r?0:r<6?1:9==r?3:2;if(t[0]=120,t[1]=e<<6|(n.dictionary&&32),t[1]|=31-(t[0]<<8|t[1])%31,n.dictionary){var i=S();i.p(n.dictionary),O(t,2,i.d())}}(r,this.o),this.v=0),n&&O(r,r.length-4,this.c.d()),this.ondata(r,n)},t}(),G=\"undefined\"!=typeof TextEncoder&&new TextEncoder,H=\"undefined\"!=typeof TextDecoder&&new TextDecoder;try{H.decode(F,{stream:!0})}catch(t){}var J=function(){function t(t){this.ondata=t}return t.prototype.push=function(t,n){this.ondata||E(5),this.d&&E(4),this.ondata(K(t),this.d=n||!1)},t}();function K(n,r){if(r){for(var e=new t(n.length),i=0;i<n.length;++i)e[i]=n.charCodeAt(i);return e}if(G)return G.encode(n);var a=n.length,s=new t(n.length+(n.length>>1)),o=0,f=function(t){s[o++]=t};for(i=0;i<a;++i){if(o+5>s.length){var h=new t(o+8+(a-i<<1));h.set(s),s=h}var l=n.charCodeAt(i);l<128||r?f(l):l<2048?(f(192|l>>6),f(128|63&l)):l>55295&&l<57344?(f(240|(l=65536+(1047552&l)|1023&n.charCodeAt(++i))>>18),f(128|l>>12&63),f(128|l>>6&63),f(128|63&l)):(f(224|l>>12),f(128|l>>6&63),f(128|63&l))}return b(s,0,o)}const N=new class{constructor(){this._init()}clear(){this._init()}addEvent(t){if(!t)throw new Error(\"Adding invalid event\");const n=this._hasEvents?\",\":\"\";this.stream.push(n+t),this._hasEvents=!0}finish(){this.stream.push(\"]\",!0);const t=function(t){let n=0;for(let r=0,e=t.length;r<e;r++)n+=t[r].length;const r=new Uint8Array(n);for(let n=0,e=0,i=t.length;n<i;n++){const i=t[n];r.set(i,e),e+=i.length}return r}(this._deflatedData);return this._init(),t}_init(){this._hasEvents=!1,this._deflatedData=[],this.deflate=new B,this.deflate.ondata=(t,n)=>{this._deflatedData.push(t)},this.stream=new J(((t,n)=>{this.deflate.push(t,n)})),this.stream.push(\"[\")}},P={clear:()=>{N.clear()},addEvent:t=>N.addEvent(t),finish:()=>N.finish(),compress:t=>function(t){return q(K(t))}(t)};addEventListener(\"message\",(function(t){const n=t.data.method,r=t.data.id,e=t.data.arg;if(n in P&&\"function\"==typeof P[n])try{const t=P[n](e);postMessage({id:r,method:n,success:!0,response:t})}catch(t){postMessage({id:r,method:n,success:!1,response:t.message}),console.error(t)}})),postMessage({id:void 0,method:\"init\",success:!0,response:void 0});`;\n","import r from\"./worker\";function e(){const e=new Blob([r]);return URL.createObjectURL(e)}export{e as getWorkerURL};\n","import { addBreadcrumb } from '@sentry/core';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\n\n/**\n * Log a message in debug mode, and add a breadcrumb when _experiment.traceInternals is enabled.\n */\nexport function logInfo(message: string, shouldAddBreadcrumb?: boolean): void {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  logger.info(message);\n\n  if (shouldAddBreadcrumb) {\n    addLogBreadcrumb(message);\n  }\n}\n\n/**\n * Log a message, and add a breadcrumb in the next tick.\n * This is necessary when the breadcrumb may be added before the replay is initialized.\n */\nexport function logInfoNextTick(message: string, shouldAddBreadcrumb?: boolean): void {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  logger.info(message);\n\n  if (shouldAddBreadcrumb) {\n    // Wait a tick here to avoid race conditions for some initial logs\n    // which may be added before replay is initialized\n    setTimeout(() => {\n      addLogBreadcrumb(message);\n    }, 0);\n  }\n}\n\nfunction addLogBreadcrumb(message: string): void {\n  addBreadcrumb(\n    {\n      category: 'console',\n      data: {\n        logger: 'replay',\n      },\n      level: 'info',\n      message,\n    },\n    { level: 'info' },\n  );\n}\n","import { REPLAY_MAX_EVENT_BUFFER_SIZE } from '../constants';\n\n/** This error indicates that the event buffer size exceeded the limit.. */\nexport class EventBufferSizeExceededError extends Error {\n  public constructor() {\n    super(`Event buffer exceeded maximum size of ${REPLAY_MAX_EVENT_BUFFER_SIZE}.`);\n  }\n}\n","import { REPLAY_MAX_EVENT_BUFFER_SIZE } from '../constants';\nimport type { AddEventResult, EventBuffer, EventBufferType, RecordingEvent } from '../types';\nimport { timestampToMs } from '../util/timestamp';\nimport { EventBufferSizeExceededError } from './error';\n\n/**\n * A basic event buffer that does not do any compression.\n * Used as fallback if the compression worker cannot be loaded or is disabled.\n */\nexport class EventBufferArray implements EventBuffer {\n  /** All the events that are buffered to be sent. */\n  public events: RecordingEvent[];\n\n  /** @inheritdoc */\n  public hasCheckout: boolean;\n\n  private _totalSize: number;\n\n  public constructor() {\n    this.events = [];\n    this._totalSize = 0;\n    this.hasCheckout = false;\n  }\n\n  /** @inheritdoc */\n  public get hasEvents(): boolean {\n    return this.events.length > 0;\n  }\n\n  /** @inheritdoc */\n  public get type(): EventBufferType {\n    return 'sync';\n  }\n\n  /** @inheritdoc */\n  public destroy(): void {\n    this.events = [];\n  }\n\n  /** @inheritdoc */\n  public async addEvent(event: RecordingEvent): Promise<AddEventResult> {\n    const eventSize = JSON.stringify(event).length;\n    this._totalSize += eventSize;\n    if (this._totalSize > REPLAY_MAX_EVENT_BUFFER_SIZE) {\n      throw new EventBufferSizeExceededError();\n    }\n\n    this.events.push(event);\n  }\n\n  /** @inheritdoc */\n  public finish(): Promise<string> {\n    return new Promise<string>(resolve => {\n      // Make a copy of the events array reference and immediately clear the\n      // events member so that we do not lose new events while uploading\n      // attachment.\n      const eventsRet = this.events;\n      this.clear();\n      resolve(JSON.stringify(eventsRet));\n    });\n  }\n\n  /** @inheritdoc */\n  public clear(): void {\n    this.events = [];\n    this._totalSize = 0;\n    this.hasCheckout = false;\n  }\n\n  /** @inheritdoc */\n  public getEarliestTimestamp(): number | null {\n    const timestamp = this.events.map(event => event.timestamp).sort()[0];\n\n    if (!timestamp) {\n      return null;\n    }\n\n    return timestampToMs(timestamp);\n  }\n}\n","import { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { WorkerRequest, WorkerResponse } from '../types';\nimport { logInfo } from '../util/log';\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nexport class WorkerHandler {\n  private _worker: Worker;\n  private _id: number;\n  private _ensureReadyPromise?: Promise<void>;\n\n  public constructor(worker: Worker) {\n    this._worker = worker;\n    this._id = 0;\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n  public ensureReady(): Promise<void> {\n    // Ensure we only check once\n    if (this._ensureReadyPromise) {\n      return this._ensureReadyPromise;\n    }\n\n    this._ensureReadyPromise = new Promise((resolve, reject) => {\n      this._worker.addEventListener(\n        'message',\n        ({ data }: MessageEvent) => {\n          if ((data as WorkerResponse).success) {\n            resolve();\n          } else {\n            reject();\n          }\n        },\n        { once: true },\n      );\n\n      this._worker.addEventListener(\n        'error',\n        error => {\n          reject(error);\n        },\n        { once: true },\n      );\n    });\n\n    return this._ensureReadyPromise;\n  }\n\n  /**\n   * Destroy the worker.\n   */\n  public destroy(): void {\n    logInfo('[Replay] Destroying compression worker');\n    this._worker.terminate();\n  }\n\n  /**\n   * Post message to worker and wait for response before resolving promise.\n   */\n  public postMessage<T>(method: WorkerRequest['method'], arg?: WorkerRequest['arg']): Promise<T> {\n    const id = this._getAndIncrementId();\n\n    return new Promise((resolve, reject) => {\n      const listener = ({ data }: MessageEvent): void => {\n        const response = data as WorkerResponse;\n        if (response.method !== method) {\n          return;\n        }\n\n        // There can be multiple listeners for a single method, the id ensures\n        // that the response matches the caller.\n        if (response.id !== id) {\n          return;\n        }\n\n        // At this point, we'll always want to remove listener regardless of result status\n        this._worker.removeEventListener('message', listener);\n\n        if (!response.success) {\n          // TODO: Do some error handling, not sure what\n          DEBUG_BUILD && logger.error('[Replay]', response.response);\n\n          reject(new Error('Error in compression worker'));\n          return;\n        }\n\n        resolve(response.response as T);\n      };\n\n      // Note: we can't use `once` option because it's possible it needs to\n      // listen to multiple messages\n      this._worker.addEventListener('message', listener);\n      this._worker.postMessage({ id, method, arg });\n    });\n  }\n\n  /** Get the current ID and increment it for the next call. */\n  private _getAndIncrementId(): number {\n    return this._id++;\n  }\n}\n","import type { ReplayRecordingData } from '@sentry/types';\n\nimport { logger } from '@sentry/utils';\nimport { REPLAY_MAX_EVENT_BUFFER_SIZE } from '../constants';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { AddEventResult, EventBuffer, EventBufferType, RecordingEvent } from '../types';\nimport { timestampToMs } from '../util/timestamp';\nimport { WorkerHandler } from './WorkerHandler';\nimport { EventBufferSizeExceededError } from './error';\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nexport class EventBufferCompressionWorker implements EventBuffer {\n  /** @inheritdoc */\n  public hasCheckout: boolean;\n\n  private _worker: WorkerHandler;\n  private _earliestTimestamp: number | null;\n  private _totalSize;\n\n  public constructor(worker: Worker) {\n    this._worker = new WorkerHandler(worker);\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n    this.hasCheckout = false;\n  }\n\n  /** @inheritdoc */\n  public get hasEvents(): boolean {\n    return !!this._earliestTimestamp;\n  }\n\n  /** @inheritdoc */\n  public get type(): EventBufferType {\n    return 'worker';\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n  public ensureReady(): Promise<void> {\n    return this._worker.ensureReady();\n  }\n\n  /**\n   * Destroy the event buffer.\n   */\n  public destroy(): void {\n    this._worker.destroy();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfuly received and processed by worker.\n   */\n  public addEvent(event: RecordingEvent): Promise<AddEventResult> {\n    const timestamp = timestampToMs(event.timestamp);\n    if (!this._earliestTimestamp || timestamp < this._earliestTimestamp) {\n      this._earliestTimestamp = timestamp;\n    }\n\n    const data = JSON.stringify(event);\n    this._totalSize += data.length;\n\n    if (this._totalSize > REPLAY_MAX_EVENT_BUFFER_SIZE) {\n      return Promise.reject(new EventBufferSizeExceededError());\n    }\n\n    return this._sendEventToWorker(data);\n  }\n\n  /**\n   * Finish the event buffer and return the compressed data.\n   */\n  public finish(): Promise<ReplayRecordingData> {\n    return this._finishRequest();\n  }\n\n  /** @inheritdoc */\n  public clear(): void {\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n    this.hasCheckout = false;\n\n    // We do not wait on this, as we assume the order of messages is consistent for the worker\n    this._worker.postMessage('clear').then(null, e => {\n      DEBUG_BUILD && logger.warn('[Replay] Sending \"clear\" message to worker failed', e);\n    });\n  }\n\n  /** @inheritdoc */\n  public getEarliestTimestamp(): number | null {\n    return this._earliestTimestamp;\n  }\n\n  /**\n   * Send the event to the worker.\n   */\n  private _sendEventToWorker(data: string): Promise<AddEventResult> {\n    return this._worker.postMessage<void>('addEvent', data);\n  }\n\n  /**\n   * Finish the request and return the compressed data from the worker.\n   */\n  private async _finishRequest(): Promise<Uint8Array> {\n    const response = await this._worker.postMessage<Uint8Array>('finish');\n\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n\n    return response;\n  }\n}\n","import type { ReplayRecordingData } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { AddEventResult, EventBuffer, EventBufferType, RecordingEvent } from '../types';\nimport { logInfo } from '../util/log';\nimport { EventBufferArray } from './EventBufferArray';\nimport { EventBufferCompressionWorker } from './EventBufferCompressionWorker';\n\n/**\n * This proxy will try to use the compression worker, and fall back to use the simple buffer if an error occurs there.\n * This can happen e.g. if the worker cannot be loaded.\n * Exported only for testing.\n */\nexport class EventBufferProxy implements EventBuffer {\n  private _fallback: EventBufferArray;\n  private _compression: EventBufferCompressionWorker;\n  private _used: EventBuffer;\n  private _ensureWorkerIsLoadedPromise: Promise<void>;\n\n  public constructor(worker: Worker) {\n    this._fallback = new EventBufferArray();\n    this._compression = new EventBufferCompressionWorker(worker);\n    this._used = this._fallback;\n\n    this._ensureWorkerIsLoadedPromise = this._ensureWorkerIsLoaded();\n  }\n\n  /** @inheritdoc */\n  public get type(): EventBufferType {\n    return this._used.type;\n  }\n\n  /** @inheritDoc */\n  public get hasEvents(): boolean {\n    return this._used.hasEvents;\n  }\n\n  /** @inheritdoc */\n  public get hasCheckout(): boolean {\n    return this._used.hasCheckout;\n  }\n  /** @inheritdoc */\n  public set hasCheckout(value: boolean) {\n    this._used.hasCheckout = value;\n  }\n\n  /** @inheritDoc */\n  public destroy(): void {\n    this._fallback.destroy();\n    this._compression.destroy();\n  }\n\n  /** @inheritdoc */\n  public clear(): void {\n    return this._used.clear();\n  }\n\n  /** @inheritdoc */\n  public getEarliestTimestamp(): number | null {\n    return this._used.getEarliestTimestamp();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfully added.\n   */\n  public addEvent(event: RecordingEvent): Promise<AddEventResult> {\n    return this._used.addEvent(event);\n  }\n\n  /** @inheritDoc */\n  public async finish(): Promise<ReplayRecordingData> {\n    // Ensure the worker is loaded, so the sent event is compressed\n    await this.ensureWorkerIsLoaded();\n\n    return this._used.finish();\n  }\n\n  /** Ensure the worker has loaded. */\n  public ensureWorkerIsLoaded(): Promise<void> {\n    return this._ensureWorkerIsLoadedPromise;\n  }\n\n  /** Actually check if the worker has been loaded. */\n  private async _ensureWorkerIsLoaded(): Promise<void> {\n    try {\n      await this._compression.ensureReady();\n    } catch (error) {\n      // If the worker fails to load, we fall back to the simple buffer.\n      // Nothing more to do from our side here\n      logInfo('[Replay] Failed to load the compression worker, falling back to simple buffer');\n      return;\n    }\n\n    // Now we need to switch over the array buffer to the compression worker\n    await this._switchToCompressionWorker();\n  }\n\n  /** Switch the used buffer to the compression worker. */\n  private async _switchToCompressionWorker(): Promise<void> {\n    const { events, hasCheckout } = this._fallback;\n\n    const addEventPromises: Promise<void>[] = [];\n    for (const event of events) {\n      addEventPromises.push(this._compression.addEvent(event));\n    }\n\n    this._compression.hasCheckout = hasCheckout;\n\n    // We switch over to the new buffer immediately - any further events will be added\n    // after the previously buffered ones\n    this._used = this._compression;\n\n    // Wait for original events to be re-added before resolving\n    try {\n      await Promise.all(addEventPromises);\n    } catch (error) {\n      DEBUG_BUILD && logger.warn('[Replay] Failed to add events when switching buffers.', error);\n    }\n  }\n}\n","import { getWorkerURL } from '@sentry-internal/replay-worker';\n\nimport type { EventBuffer } from '../types';\nimport { logInfo } from '../util/log';\nimport { EventBufferArray } from './EventBufferArray';\nimport { EventBufferProxy } from './EventBufferProxy';\n\ninterface CreateEventBufferParams {\n  useCompression: boolean;\n  workerUrl?: string;\n}\n\n// Treeshakable guard to remove the code of the included compression worker\ndeclare const __SENTRY_EXCLUDE_REPLAY_WORKER__: boolean;\n\n/**\n * Create an event buffer for replays.\n */\nexport function createEventBuffer({\n  useCompression,\n  workerUrl: customWorkerUrl,\n}: CreateEventBufferParams): EventBuffer {\n  if (\n    useCompression &&\n    // eslint-disable-next-line no-restricted-globals\n    window.Worker\n  ) {\n    const worker = _loadWorker(customWorkerUrl);\n\n    if (worker) {\n      return worker;\n    }\n  }\n\n  logInfo('[Replay] Using simple buffer');\n  return new EventBufferArray();\n}\n\nfunction _loadWorker(customWorkerUrl?: string): EventBufferProxy | void {\n  try {\n    const workerUrl = customWorkerUrl || _getWorkerUrl();\n\n    if (!workerUrl) {\n      return;\n    }\n\n    logInfo(`[Replay] Using compression worker${customWorkerUrl ? ` from ${customWorkerUrl}` : ''}`);\n    const worker = new Worker(workerUrl);\n    return new EventBufferProxy(worker);\n  } catch (error) {\n    logInfo('[Replay] Failed to create compression worker');\n    // Fall back to use simple event buffer array\n  }\n}\n\nfunction _getWorkerUrl(): string {\n  if (typeof __SENTRY_EXCLUDE_REPLAY_WORKER__ === 'undefined' || !__SENTRY_EXCLUDE_REPLAY_WORKER__) {\n    return getWorkerURL();\n  }\n\n  return '';\n}\n","import { WINDOW } from '../constants';\n\n/** If sessionStorage is available. */\nexport function hasSessionStorage(): boolean {\n  try {\n    // This can throw, e.g. when being accessed in a sandboxed iframe\n    return 'sessionStorage' in WINDOW && !!WINDOW.sessionStorage;\n  } catch {\n    return false;\n  }\n}\n","import { REPLAY_SESSION_KEY, WINDOW } from '../../src/constants';\nimport type { ReplayContainer } from '../../src/types';\nimport { hasSessionStorage } from '../util/hasSessionStorage';\n\n/**\n * Removes the session from Session Storage and unsets session in replay instance\n */\nexport function clearSession(replay: ReplayContainer): void {\n  deleteSession();\n  replay.session = undefined;\n}\n\n/**\n * Deletes a session from storage\n */\nfunction deleteSession(): void {\n  if (!hasSessionStorage()) {\n    return;\n  }\n\n  try {\n    WINDOW.sessionStorage.removeItem(REPLAY_SESSION_KEY);\n  } catch {\n    // Ignore potential SecurityError exceptions\n  }\n}\n","/**\n * Given a sample rate, returns true if replay should be sampled.\n *\n * 1.0 = 100% sampling\n * 0.0 = 0% sampling\n */\nexport function isSampled(sampleRate?: number): boolean {\n  if (sampleRate === undefined) {\n    return false;\n  }\n\n  // Math.random() returns a number in range of 0 to 1 (inclusive of 0, but not 1)\n  return Math.random() < sampleRate;\n}\n","import { uuid4 } from '@sentry/utils';\n\nimport type { Sampled, Session } from '../types';\n\n/**\n * Get a session with defaults & applied sampling.\n */\nexport function makeSession(session: Partial<Session> & { sampled: Sampled }): Session {\n  const now = Date.now();\n  const id = session.id || uuid4();\n  // Note that this means we cannot set a started/lastActivity of `0`, but this should not be relevant outside of tests.\n  const started = session.started || now;\n  const lastActivity = session.lastActivity || now;\n  const segmentId = session.segmentId || 0;\n  const sampled = session.sampled;\n  const previousSessionId = session.previousSessionId;\n\n  return {\n    id,\n    started,\n    lastActivity,\n    segmentId,\n    sampled,\n    previousSessionId,\n  };\n}\n","import { REPLAY_SESSION_KEY, WINDOW } from '../constants';\nimport type { Session } from '../types';\nimport { hasSessionStorage } from '../util/hasSessionStorage';\n\n/**\n * Save a session to session storage.\n */\nexport function saveSession(session: Session): void {\n  if (!hasSessionStorage()) {\n    return;\n  }\n\n  try {\n    WINDOW.sessionStorage.setItem(REPLAY_SESSION_KEY, JSON.stringify(session));\n  } catch {\n    // Ignore potential SecurityError exceptions\n  }\n}\n","import type { Sampled, Session, SessionOptions } from '../types';\nimport { isSampled } from '../util/isSampled';\nimport { makeSession } from './Session';\nimport { saveSession } from './saveSession';\n\n/**\n * Get the sampled status for a session based on sample rates & current sampled status.\n */\nexport function getSessionSampleType(sessionSampleRate: number, allowBuffering: boolean): Sampled {\n  return isSampled(sessionSampleRate) ? 'session' : allowBuffering ? 'buffer' : false;\n}\n\n/**\n * Create a new session, which in its current implementation is a Sentry event\n * that all replays will be saved to as attachments. Currently, we only expect\n * one of these Sentry events per \"replay session\".\n */\nexport function createSession(\n  { sessionSampleRate, allowBuffering, stickySession = false }: SessionOptions,\n  { previousSessionId }: { previousSessionId?: string } = {},\n): Session {\n  const sampled = getSessionSampleType(sessionSampleRate, allowBuffering);\n  const session = makeSession({\n    sampled,\n    previousSessionId,\n  });\n\n  if (stickySession) {\n    saveSession(session);\n  }\n\n  return session;\n}\n","import { REPLAY_SESSION_KEY, WINDOW } from '../constants';\nimport type { Session } from '../types';\nimport { hasSessionStorage } from '../util/hasSessionStorage';\nimport { logInfoNextTick } from '../util/log';\nimport { makeSession } from './Session';\n\n/**\n * Fetches a session from storage\n */\nexport function fetchSession(traceInternals?: boolean): Session | null {\n  if (!hasSessionStorage()) {\n    return null;\n  }\n\n  try {\n    // This can throw if cookies are disabled\n    const sessionStringFromStorage = WINDOW.sessionStorage.getItem(REPLAY_SESSION_KEY);\n\n    if (!sessionStringFromStorage) {\n      return null;\n    }\n\n    const sessionObj = JSON.parse(sessionStringFromStorage) as Session;\n\n    logInfoNextTick('[Replay] Loading existing session', traceInternals);\n\n    return makeSession(sessionObj);\n  } catch {\n    return null;\n  }\n}\n","/**\n * Given an initial timestamp and an expiry duration, checks to see if current\n * time should be considered as expired.\n */\nexport function isExpired(\n  initialTime: null | number,\n  expiry: undefined | number,\n  targetTime: number = +new Date(),\n): boolean {\n  // Always expired if < 0\n  if (initialTime === null || expiry === undefined || expiry < 0) {\n    return true;\n  }\n\n  // Never expires if == 0\n  if (expiry === 0) {\n    return false;\n  }\n\n  return initialTime + expiry <= targetTime;\n}\n","import type { Session } from '../types';\nimport { isExpired } from './isExpired';\n\n/**\n * Checks to see if session is expired\n */\nexport function isSessionExpired(\n  session: Session,\n  {\n    maxReplayDuration,\n    sessionIdleExpire,\n    targetTime = Date.now(),\n  }: { maxReplayDuration: number; sessionIdleExpire: number; targetTime?: number },\n): boolean {\n  return (\n    // First, check that maximum session length has not been exceeded\n    isExpired(session.started, maxReplayDuration, targetTime) ||\n    // check that the idle timeout has not been exceeded (i.e. user has\n    // performed an action within the last `sessionIdleExpire` ms)\n    isExpired(session.lastActivity, sessionIdleExpire, targetTime)\n  );\n}\n","import type { Session } from '../types';\nimport { isSessionExpired } from '../util/isSessionExpired';\n\n/** If the session should be refreshed or not. */\nexport function shouldRefreshSession(\n  session: Session,\n  { sessionIdleExpire, maxReplayDuration }: { sessionIdleExpire: number; maxReplayDuration: number },\n): boolean {\n  // If not expired, all good, just keep the session\n  if (!isSessionExpired(session, { sessionIdleExpire, maxReplayDuration })) {\n    return false;\n  }\n\n  // If we are buffering & haven't ever flushed yet, always continue\n  if (session.sampled === 'buffer' && session.segmentId === 0) {\n    return false;\n  }\n\n  return true;\n}\n","import type { Session, SessionOptions } from '../types';\nimport { logInfoNextTick } from '../util/log';\nimport { createSession } from './createSession';\nimport { fetchSession } from './fetchSession';\nimport { shouldRefreshSession } from './shouldRefreshSession';\n\n/**\n * Get or create a session, when initializing the replay.\n * Returns a session that may be unsampled.\n */\nexport function loadOrCreateSession(\n  {\n    traceInternals,\n    sessionIdleExpire,\n    maxReplayDuration,\n    previousSessionId,\n  }: {\n    sessionIdleExpire: number;\n    maxReplayDuration: number;\n    traceInternals?: boolean;\n    previousSessionId?: string;\n  },\n  sessionOptions: SessionOptions,\n): Session {\n  const existingSession = sessionOptions.stickySession && fetchSession(traceInternals);\n\n  // No session exists yet, just create a new one\n  if (!existingSession) {\n    logInfoNextTick('[Replay] Creating new session', traceInternals);\n    return createSession(sessionOptions, { previousSessionId });\n  }\n\n  if (!shouldRefreshSession(existingSession, { sessionIdleExpire, maxReplayDuration })) {\n    return existingSession;\n  }\n\n  logInfoNextTick('[Replay] Session in sessionStorage is expired, creating new one...');\n  return createSession(sessionOptions, { previousSessionId: existingSession.id });\n}\n","import { EventType } from '@sentry-internal/rrweb';\nimport { getClient } from '@sentry/core';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { EventBufferSizeExceededError } from '../eventBuffer/error';\nimport type { AddEventResult, RecordingEvent, ReplayContainer, ReplayFrameEvent, ReplayPluginOptions } from '../types';\nimport { logInfo } from './log';\nimport { timestampToMs } from './timestamp';\n\nfunction isCustomEvent(event: RecordingEvent): event is ReplayFrameEvent {\n  return event.type === EventType.Custom;\n}\n\n/**\n * Add an event to the event buffer.\n * In contrast to `addEvent`, this does not return a promise & does not wait for the adding of the event to succeed/fail.\n * Instead this returns `true` if we tried to add the event, else false.\n * It returns `false` e.g. if we are paused, disabled, or out of the max replay duration.\n *\n * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n */\nexport function addEventSync(replay: ReplayContainer, event: RecordingEvent, isCheckout?: boolean): boolean {\n  if (!shouldAddEvent(replay, event)) {\n    return false;\n  }\n\n  // This should never reject\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  _addEvent(replay, event, isCheckout);\n\n  return true;\n}\n\n/**\n * Add an event to the event buffer.\n * Resolves to `null` if no event was added, else to `void`.\n *\n * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n */\nexport function addEvent(\n  replay: ReplayContainer,\n  event: RecordingEvent,\n  isCheckout?: boolean,\n): Promise<AddEventResult | null> {\n  if (!shouldAddEvent(replay, event)) {\n    return Promise.resolve(null);\n  }\n\n  return _addEvent(replay, event, isCheckout);\n}\n\nasync function _addEvent(\n  replay: ReplayContainer,\n  event: RecordingEvent,\n  isCheckout?: boolean,\n): Promise<AddEventResult | null> {\n  if (!replay.eventBuffer) {\n    return null;\n  }\n\n  try {\n    if (isCheckout && replay.recordingMode === 'buffer') {\n      replay.eventBuffer.clear();\n    }\n\n    if (isCheckout) {\n      replay.eventBuffer.hasCheckout = true;\n    }\n\n    const replayOptions = replay.getOptions();\n\n    const eventAfterPossibleCallback = maybeApplyCallback(event, replayOptions.beforeAddRecordingEvent);\n\n    if (!eventAfterPossibleCallback) {\n      return;\n    }\n\n    return await replay.eventBuffer.addEvent(eventAfterPossibleCallback);\n  } catch (error) {\n    const reason = error && error instanceof EventBufferSizeExceededError ? 'addEventSizeExceeded' : 'addEvent';\n\n    DEBUG_BUILD && logger.error(error);\n    await replay.stop({ reason });\n\n    const client = getClient();\n\n    if (client) {\n      client.recordDroppedEvent('internal_sdk_error', 'replay');\n    }\n  }\n}\n\n/** Exported only for tests. */\nexport function shouldAddEvent(replay: ReplayContainer, event: RecordingEvent): boolean {\n  if (!replay.eventBuffer || replay.isPaused() || !replay.isEnabled()) {\n    return false;\n  }\n\n  const timestampInMs = timestampToMs(event.timestamp);\n\n  // Throw out events that happen more than 5 minutes ago. This can happen if\n  // page has been left open and idle for a long period of time and user\n  // comes back to trigger a new session. The performance entries rely on\n  // `performance.timeOrigin`, which is when the page first opened.\n  if (timestampInMs + replay.timeouts.sessionIdlePause < Date.now()) {\n    return false;\n  }\n\n  // Throw out events that are +60min from the initial timestamp\n  if (timestampInMs > replay.getContext().initialTimestamp + replay.getOptions().maxReplayDuration) {\n    logInfo(\n      `[Replay] Skipping event with timestamp ${timestampInMs} because it is after maxReplayDuration`,\n      replay.getOptions()._experiments.traceInternals,\n    );\n    return false;\n  }\n\n  return true;\n}\n\nfunction maybeApplyCallback(\n  event: RecordingEvent,\n  callback: ReplayPluginOptions['beforeAddRecordingEvent'],\n): RecordingEvent | null | undefined {\n  try {\n    if (typeof callback === 'function' && isCustomEvent(event)) {\n      return callback(event);\n    }\n  } catch (error) {\n    DEBUG_BUILD &&\n      logger.error('[Replay] An error occured in the `beforeAddRecordingEvent` callback, skipping the event...', error);\n    return null;\n  }\n\n  return event;\n}\n","import type { ErrorEvent, Event, FeedbackEvent, ReplayEvent, TransactionEvent } from '@sentry/types';\n\n/** If the event is an error event */\nexport function isErrorEvent(event: Event): event is ErrorEvent {\n  return !event.type;\n}\n\n/** If the event is a transaction event */\nexport function isTransactionEvent(event: Event): event is TransactionEvent {\n  return event.type === 'transaction';\n}\n\n/** If the event is an replay event */\nexport function isReplayEvent(event: Event): event is ReplayEvent {\n  return event.type === 'replay_event';\n}\n\n/** If the event is a feedback event */\nexport function isFeedbackEvent(event: Event): event is FeedbackEvent {\n  return event.type === 'feedback';\n}\n","import { getClient } from '@sentry/core';\nimport type { ErrorEvent, Event, TransactionEvent, Transport, TransportMakeRequestResponse } from '@sentry/types';\n\nimport type { ReplayContainer } from '../types';\nimport { isErrorEvent, isTransactionEvent } from '../util/eventUtils';\n\ntype AfterSendEventCallback = (event: Event, sendResponse: TransportMakeRequestResponse | void) => void;\n\n/**\n * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n */\nexport function handleAfterSendEvent(replay: ReplayContainer): AfterSendEventCallback {\n  // Custom transports may still be returning `Promise<void>`, which means we cannot expect the status code to be available there\n  // TODO (v8): remove this check as it will no longer be necessary\n  const enforceStatusCode = isBaseTransportSend();\n\n  return (event: Event, sendResponse: TransportMakeRequestResponse | void) => {\n    if (!replay.isEnabled() || (!isErrorEvent(event) && !isTransactionEvent(event))) {\n      return;\n    }\n\n    const statusCode = sendResponse && sendResponse.statusCode;\n\n    // We only want to do stuff on successful error sending, otherwise you get error replays without errors attached\n    // If not using the base transport, we allow `undefined` response (as a custom transport may not implement this correctly yet)\n    // If we do use the base transport, we skip if we encountered an non-OK status code\n    if (enforceStatusCode && (!statusCode || statusCode < 200 || statusCode >= 300)) {\n      return;\n    }\n\n    if (isTransactionEvent(event)) {\n      handleTransactionEvent(replay, event);\n      return;\n    }\n\n    handleErrorEvent(replay, event);\n  };\n}\n\nfunction handleTransactionEvent(replay: ReplayContainer, event: TransactionEvent): void {\n  const replayContext = replay.getContext();\n\n  // Collect traceIds in _context regardless of `recordingMode`\n  // In error mode, _context gets cleared on every checkout\n  // We limit to max. 100 transactions linked\n  if (event.contexts && event.contexts.trace && event.contexts.trace.trace_id && replayContext.traceIds.size < 100) {\n    replayContext.traceIds.add(event.contexts.trace.trace_id as string);\n  }\n}\n\nfunction handleErrorEvent(replay: ReplayContainer, event: ErrorEvent): void {\n  const replayContext = replay.getContext();\n\n  // Add error to list of errorIds of replay. This is ok to do even if not\n  // sampled because context will get reset at next checkout.\n  // XXX: There is also a race condition where it's possible to capture an\n  // error to Sentry before Replay SDK has loaded, but response returns after\n  // it was loaded, and this gets called.\n  // We limit to max. 100 errors linked\n  if (event.event_id && replayContext.errorIds.size < 100) {\n    replayContext.errorIds.add(event.event_id);\n  }\n\n  // If error event is tagged with replay id it means it was sampled (when in buffer mode)\n  // Need to be very careful that this does not cause an infinite loop\n  if (replay.recordingMode !== 'buffer' || !event.tags || !event.tags.replayId) {\n    return;\n  }\n\n  const { beforeErrorSampling } = replay.getOptions();\n  if (typeof beforeErrorSampling === 'function' && !beforeErrorSampling(event)) {\n    return;\n  }\n\n  setTimeout(() => {\n    // Capture current event buffer as new replay\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.sendBufferedReplayOrFlush();\n  });\n}\n\nfunction isBaseTransportSend(): boolean {\n  const client = getClient();\n  if (!client) {\n    return false;\n  }\n\n  const transport = client.getTransport();\n  if (!transport) {\n    return false;\n  }\n\n  return (\n    (transport.send as Transport['send'] & { __sentry__baseTransport__?: true }).__sentry__baseTransport__ || false\n  );\n}\n","import type { ErrorEvent, Event } from '@sentry/types';\n\nimport type { ReplayContainer } from '../types';\nimport { createBreadcrumb } from '../util/createBreadcrumb';\nimport { isErrorEvent } from '../util/eventUtils';\nimport { addBreadcrumbEvent } from './util/addBreadcrumbEvent';\n\ntype BeforeSendEventCallback = (event: Event) => void;\n\n/**\n * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n */\nexport function handleBeforeSendEvent(replay: ReplayContainer): BeforeSendEventCallback {\n  return (event: Event) => {\n    if (!replay.isEnabled() || !isErrorEvent(event)) {\n      return;\n    }\n\n    handleHydrationError(replay, event);\n  };\n}\n\nfunction handleHydrationError(replay: ReplayContainer, event: ErrorEvent): void {\n  const exceptionValue = event.exception && event.exception.values && event.exception.values[0].value;\n  if (typeof exceptionValue !== 'string') {\n    return;\n  }\n\n  if (\n    // Only matches errors in production builds of react-dom\n    // Example https://reactjs.org/docs/error-decoder.html?invariant=423\n    exceptionValue.match(/reactjs\\.org\\/docs\\/error-decoder\\.html\\?invariant=(418|419|422|423|425)/) ||\n    // Development builds of react-dom\n    // Error 1: Hydration failed because the initial UI does not match what was rendered on the server.\n    // Error 2: Text content does not match server-rendered HTML. Warning: Text content did not match.\n    exceptionValue.match(/(does not match server-rendered HTML|Hydration failed because)/i)\n  ) {\n    const breadcrumb = createBreadcrumb({\n      category: 'replay.hydrate-error',\n    });\n    addBreadcrumbEvent(replay, breadcrumb);\n  }\n}\n","import type { Event, EventHint } from '@sentry/types';\n\n/**\n * Returns true if we think the given event is an error originating inside of rrweb.\n */\nexport function isRrwebError(event: Event, hint: EventHint): boolean {\n  if (event.type || !event.exception || !event.exception.values || !event.exception.values.length) {\n    return false;\n  }\n\n  // @ts-expect-error this may be set by rrweb when it finds errors\n  if (hint.originalException && hint.originalException.__rrweb__) {\n    return true;\n  }\n\n  return false;\n}\n","import { EventType } from '@sentry-internal/rrweb';\nimport type { FeedbackEvent } from '@sentry/types';\n\nimport type { ReplayBreadcrumbFrameEvent, ReplayContainer } from '../../types';\n\n/**\n * Add a feedback breadcrumb event to replay.\n */\nexport function addFeedbackBreadcrumb(replay: ReplayContainer, event: FeedbackEvent): void {\n  replay.triggerUserActivity();\n  replay.addUpdate(() => {\n    if (!event.timestamp) {\n      // Ignore events that don't have timestamps (this shouldn't happen, more of a typing issue)\n      // Return true here so that we don't flush\n      return true;\n    }\n\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.throttledAddEvent({\n      type: EventType.Custom,\n      timestamp: event.timestamp * 1000,\n      data: {\n        tag: 'breadcrumb',\n        payload: {\n          timestamp: event.timestamp,\n          type: 'default',\n          category: 'sentry.feedback',\n          data: {\n            feedbackId: event.event_id,\n          },\n        },\n      },\n    } as ReplayBreadcrumbFrameEvent);\n\n    return false;\n  });\n}\n","import type { Event } from '@sentry/types';\n\nimport { UNABLE_TO_SEND_REPLAY } from '../../constants';\nimport type { ReplayContainer } from '../../types';\nimport { isSampled } from '../../util/isSampled';\n\n/**\n * Determine if event should be sampled (only applies in buffer mode).\n * When an event is captured by `hanldleGlobalEvent`, when in buffer mode\n * we determine if we want to sample the error or not.\n */\nexport function shouldSampleForBufferEvent(replay: ReplayContainer, event: Event): boolean {\n  if (replay.recordingMode !== 'buffer') {\n    return false;\n  }\n\n  // ignore this error because otherwise we could loop indefinitely with\n  // trying to capture replay and failing\n  if (event.message === UNABLE_TO_SEND_REPLAY) {\n    return false;\n  }\n\n  // Require the event to be an error event & to have an exception\n  if (!event.exception || event.type) {\n    return false;\n  }\n\n  return isSampled(replay.getOptions().errorSampleRate);\n}\n","import type { Event, EventHint } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { ReplayContainer } from '../types';\nimport { isErrorEvent, isFeedbackEvent, isReplayEvent, isTransactionEvent } from '../util/eventUtils';\nimport { isRrwebError } from '../util/isRrwebError';\nimport { handleAfterSendEvent } from './handleAfterSendEvent';\nimport { addFeedbackBreadcrumb } from './util/addFeedbackBreadcrumb';\nimport { shouldSampleForBufferEvent } from './util/shouldSampleForBufferEvent';\n\n/**\n * Returns a listener to be added to `addEventProcessor(listener)`.\n */\nexport function handleGlobalEventListener(\n  replay: ReplayContainer,\n  includeAfterSendEventHandling = false,\n): (event: Event, hint: EventHint) => Event | null {\n  const afterSendHandler = includeAfterSendEventHandling ? handleAfterSendEvent(replay) : undefined;\n\n  return Object.assign(\n    (event: Event, hint: EventHint) => {\n      // Do nothing if replay has been disabled\n      if (!replay.isEnabled()) {\n        return event;\n      }\n\n      if (isReplayEvent(event)) {\n        // Replays have separate set of breadcrumbs, do not include breadcrumbs\n        // from core SDK\n        delete event.breadcrumbs;\n        return event;\n      }\n\n      // We only want to handle errors, transactions, and feedbacks, nothing else\n      if (!isErrorEvent(event) && !isTransactionEvent(event) && !isFeedbackEvent(event)) {\n        return event;\n      }\n\n      // Ensure we do not add replay_id if the session is expired\n      const isSessionActive = replay.checkAndHandleExpiredSession();\n      if (!isSessionActive) {\n        return event;\n      }\n\n      if (isFeedbackEvent(event)) {\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        replay.flush();\n        event.contexts.feedback.replay_id = replay.getSessionId();\n        // Add a replay breadcrumb for this piece of feedback\n        addFeedbackBreadcrumb(replay, event);\n        return event;\n      }\n\n      // Unless `captureExceptions` is enabled, we want to ignore errors coming from rrweb\n      // As there can be a bunch of stuff going wrong in internals there, that we don't want to bubble up to users\n      if (isRrwebError(event, hint) && !replay.getOptions()._experiments.captureExceptions) {\n        DEBUG_BUILD && logger.log('[Replay] Ignoring error from rrweb internals', event);\n        return null;\n      }\n\n      // When in buffer mode, we decide to sample here.\n      // Later, in `handleAfterSendEvent`, if the replayId is set, we know that we sampled\n      // And convert the buffer session to a full session\n      const isErrorEventSampled = shouldSampleForBufferEvent(replay, event);\n\n      // Tag errors if it has been sampled in buffer mode, or if it is session mode\n      // Only tag transactions if in session mode\n      const shouldTagReplayId = isErrorEventSampled || replay.recordingMode === 'session';\n\n      if (shouldTagReplayId) {\n        event.tags = { ...event.tags, replayId: replay.getSessionId() };\n      }\n\n      // In cases where a custom client is used that does not support the new hooks (yet),\n      // we manually call this hook method here\n      if (afterSendHandler) {\n        // Pretend the error had a 200 response so we always capture it\n        afterSendHandler(event, { statusCode: 200 });\n      }\n\n      return event;\n    },\n    { id: 'Replay' },\n  );\n}\n","import { EventType } from '@sentry-internal/rrweb';\n\nimport type { AddEventResult, AllEntryData, ReplayContainer, ReplayPerformanceEntry } from '../types';\n\n/**\n * Create a \"span\" for each performance entry.\n */\nexport function createPerformanceSpans(\n  replay: ReplayContainer,\n  entries: ReplayPerformanceEntry<AllEntryData>[],\n): Promise<AddEventResult | null>[] {\n  return entries.map(({ type, start, end, name, data }) => {\n    const response = replay.throttledAddEvent({\n      type: EventType.Custom,\n      timestamp: start,\n      data: {\n        tag: 'performanceSpan',\n        payload: {\n          op: type,\n          description: name,\n          startTimestamp: start,\n          endTimestamp: end,\n          data,\n        },\n      },\n    });\n\n    // If response is a string, it means its either THROTTLED or SKIPPED\n    return typeof response === 'string' ? Promise.resolve(null) : response;\n  });\n}\n","import type { HandlerDataHistory } from '@sentry/types';\n\nimport type { HistoryData, ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { createPerformanceSpans } from '../util/createPerformanceSpans';\n\nfunction handleHistory(handlerData: HandlerDataHistory): ReplayPerformanceEntry<HistoryData> {\n  const { from, to } = handlerData;\n\n  const now = Date.now() / 1000;\n\n  return {\n    type: 'navigation.push',\n    start: now,\n    end: now,\n    name: to,\n    data: {\n      previous: from,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addHistoryInstrumentationHandler(listener)`.\n */\nexport function handleHistorySpanListener(replay: ReplayContainer): (handlerData: HandlerDataHistory) => void {\n  return (handlerData: HandlerDataHistory) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleHistory(handlerData);\n\n    if (result === null) {\n      return;\n    }\n\n    // Need to collect visited URLs\n    replay.getContext().urls.push(result.name);\n    replay.triggerUserActivity();\n\n    replay.addUpdate(() => {\n      createPerformanceSpans(replay, [result]);\n      // Returning false to flush\n      return false;\n    });\n  };\n}\n","import { getClient, isSentryRequestUrl } from '@sentry/core';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { ReplayContainer } from '../types';\n\n/**\n * Check whether a given request URL should be filtered out. This is so we\n * don't log Sentry ingest requests.\n */\nexport function shouldFilterRequest(replay: ReplayContainer, url: string): boolean {\n  // If we enabled the `traceInternals` experiment, we want to trace everything\n  if (DEBUG_BUILD && replay.getOptions()._experiments.traceInternals) {\n    return false;\n  }\n\n  return isSentryRequestUrl(url, getClient());\n}\n","import type { NetworkRequestData, ReplayContainer, ReplayPerformanceEntry } from '../../types';\nimport { createPerformanceSpans } from '../../util/createPerformanceSpans';\nimport { shouldFilterRequest } from '../../util/shouldFilterRequest';\n\n/** Add a performance entry breadcrumb */\nexport function addNetworkBreadcrumb(\n  replay: ReplayContainer,\n  result: ReplayPerformanceEntry<NetworkRequestData> | null,\n): void {\n  if (!replay.isEnabled()) {\n    return;\n  }\n\n  if (result === null) {\n    return;\n  }\n\n  if (shouldFilterRequest(replay, result.name)) {\n    return;\n  }\n\n  replay.addUpdate(() => {\n    createPerformanceSpans(replay, [result]);\n    // Returning true will cause `addUpdate` to not flush\n    // We do not want network requests to cause a flush. This will prevent\n    // recurring/polling requests from keeping the replay session alive.\n    return true;\n  });\n}\n","import type { HandlerDataFetch } from '@sentry/types';\n\nimport type { NetworkRequestData, ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { addNetworkBreadcrumb } from './util/addNetworkBreadcrumb';\n\n/** only exported for tests */\nexport function handleFetch(handlerData: HandlerDataFetch): null | ReplayPerformanceEntry<NetworkRequestData> {\n  const { startTimestamp, endTimestamp, fetchData, response } = handlerData;\n\n  if (!endTimestamp) {\n    return null;\n  }\n\n  // This is only used as a fallback, so we know the body sizes are never set here\n  const { method, url } = fetchData;\n\n  return {\n    type: 'resource.fetch',\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: url,\n    data: {\n      method,\n      statusCode: response ? (response as Response).status : undefined,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addFetchInstrumentationHandler(listener)`.\n */\nexport function handleFetchSpanListener(replay: ReplayContainer): (handlerData: HandlerDataFetch) => void {\n  return (handlerData: HandlerDataFetch) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleFetch(handlerData);\n\n    addNetworkBreadcrumb(replay, result);\n  };\n}\n","import type { HandlerDataXhr } from '@sentry/types';\nimport { SENTRY_XHR_DATA_KEY } from '@sentry/utils';\n\nimport type { NetworkRequestData, ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { addNetworkBreadcrumb } from './util/addNetworkBreadcrumb';\n\n/** only exported for tests */\nexport function handleXhr(handlerData: HandlerDataXhr): ReplayPerformanceEntry<NetworkRequestData> | null {\n  const { startTimestamp, endTimestamp, xhr } = handlerData;\n\n  const sentryXhrData = xhr[SENTRY_XHR_DATA_KEY];\n\n  if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n    return null;\n  }\n\n  // This is only used as a fallback, so we know the body sizes are never set here\n  const { method, url, status_code: statusCode } = sentryXhrData;\n\n  if (url === undefined) {\n    return null;\n  }\n\n  return {\n    type: 'resource.xhr',\n    name: url,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    data: {\n      method,\n      statusCode,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addXhrInstrumentationHandler(listener)`.\n */\nexport function handleXhrSpanListener(replay: ReplayContainer): (handlerData: HandlerDataXhr) => void {\n  return (handlerData: HandlerDataXhr) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleXhr(handlerData);\n\n    addNetworkBreadcrumb(replay, result);\n  };\n}\n","import type { TextEncoderInternal } from '@sentry/types';\nimport { dropUndefinedKeys, logger, stringMatchesSomePattern } from '@sentry/utils';\n\nimport { NETWORK_BODY_MAX_SIZE, WINDOW } from '../../constants';\nimport { DEBUG_BUILD } from '../../debug-build';\nimport type {\n  NetworkBody,\n  NetworkMetaWarning,\n  NetworkRequestData,\n  ReplayNetworkRequestData,\n  ReplayNetworkRequestOrResponse,\n  ReplayPerformanceEntry,\n} from '../../types';\n\n/** Get the size of a body. */\nexport function getBodySize(\n  body: RequestInit['body'],\n  textEncoder: TextEncoder | TextEncoderInternal,\n): number | undefined {\n  if (!body) {\n    return undefined;\n  }\n\n  try {\n    if (typeof body === 'string') {\n      return textEncoder.encode(body).length;\n    }\n\n    if (body instanceof URLSearchParams) {\n      return textEncoder.encode(body.toString()).length;\n    }\n\n    if (body instanceof FormData) {\n      const formDataStr = _serializeFormData(body);\n      return textEncoder.encode(formDataStr).length;\n    }\n\n    if (body instanceof Blob) {\n      return body.size;\n    }\n\n    if (body instanceof ArrayBuffer) {\n      return body.byteLength;\n    }\n\n    // Currently unhandled types: ArrayBufferView, ReadableStream\n  } catch {\n    // just return undefined\n  }\n\n  return undefined;\n}\n\n/** Convert a Content-Length header to number/undefined.  */\nexport function parseContentLengthHeader(header: string | null | undefined): number | undefined {\n  if (!header) {\n    return undefined;\n  }\n\n  const size = parseInt(header, 10);\n  return isNaN(size) ? undefined : size;\n}\n\n/** Get the string representation of a body. */\nexport function getBodyString(body: unknown): [string | undefined, NetworkMetaWarning?] {\n  try {\n    if (typeof body === 'string') {\n      return [body];\n    }\n\n    if (body instanceof URLSearchParams) {\n      return [body.toString()];\n    }\n\n    if (body instanceof FormData) {\n      return [_serializeFormData(body)];\n    }\n\n    if (!body) {\n      return [undefined];\n    }\n  } catch {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to serialize body', body);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  DEBUG_BUILD && logger.info('[Replay] Skipping network body because of body type', body);\n\n  return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n}\n\n/** Merge a warning into an existing network request/response. */\nexport function mergeWarning(\n  info: ReplayNetworkRequestOrResponse | undefined,\n  warning: NetworkMetaWarning,\n): ReplayNetworkRequestOrResponse {\n  if (!info) {\n    return {\n      headers: {},\n      size: undefined,\n      _meta: {\n        warnings: [warning],\n      },\n    };\n  }\n\n  const newMeta = { ...info._meta };\n  const existingWarnings = newMeta.warnings || [];\n  newMeta.warnings = [...existingWarnings, warning];\n\n  info._meta = newMeta;\n  return info;\n}\n\n/** Convert ReplayNetworkRequestData to a PerformanceEntry. */\nexport function makeNetworkReplayBreadcrumb(\n  type: string,\n  data: ReplayNetworkRequestData | null,\n): ReplayPerformanceEntry<NetworkRequestData> | null {\n  if (!data) {\n    return null;\n  }\n\n  const { startTimestamp, endTimestamp, url, method, statusCode, request, response } = data;\n\n  const result: ReplayPerformanceEntry<NetworkRequestData> = {\n    type,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: url,\n    data: dropUndefinedKeys({\n      method,\n      statusCode,\n      request,\n      response,\n    }),\n  };\n\n  return result;\n}\n\n/** Build the request or response part of a replay network breadcrumb that was skipped. */\nexport function buildSkippedNetworkRequestOrResponse(bodySize: number | undefined): ReplayNetworkRequestOrResponse {\n  return {\n    headers: {},\n    size: bodySize,\n    _meta: {\n      warnings: ['URL_SKIPPED'],\n    },\n  };\n}\n\n/** Build the request or response part of a replay network breadcrumb. */\nexport function buildNetworkRequestOrResponse(\n  headers: Record<string, string>,\n  bodySize: number | undefined,\n  body: string | undefined,\n): ReplayNetworkRequestOrResponse | undefined {\n  if (!bodySize && Object.keys(headers).length === 0) {\n    return undefined;\n  }\n\n  if (!bodySize) {\n    return {\n      headers,\n    };\n  }\n\n  if (!body) {\n    return {\n      headers,\n      size: bodySize,\n    };\n  }\n\n  const info: ReplayNetworkRequestOrResponse = {\n    headers,\n    size: bodySize,\n  };\n\n  const { body: normalizedBody, warnings } = normalizeNetworkBody(body);\n  info.body = normalizedBody;\n  if (warnings && warnings.length > 0) {\n    info._meta = {\n      warnings,\n    };\n  }\n\n  return info;\n}\n\n/** Filter a set of headers */\nexport function getAllowedHeaders(headers: Record<string, string>, allowedHeaders: string[]): Record<string, string> {\n  return Object.keys(headers).reduce((filteredHeaders: Record<string, string>, key: string) => {\n    const normalizedKey = key.toLowerCase();\n    // Avoid putting empty strings into the headers\n    if (allowedHeaders.includes(normalizedKey) && headers[key]) {\n      filteredHeaders[normalizedKey] = headers[key];\n    }\n    return filteredHeaders;\n  }, {});\n}\n\nfunction _serializeFormData(formData: FormData): string {\n  // This is a bit simplified, but gives us a decent estimate\n  // This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'\n  // @ts-expect-error passing FormData to URLSearchParams actually works\n  return new URLSearchParams(formData).toString();\n}\n\nfunction normalizeNetworkBody(body: string | undefined): {\n  body: NetworkBody | undefined;\n  warnings?: NetworkMetaWarning[];\n} {\n  if (!body || typeof body !== 'string') {\n    return {\n      body,\n    };\n  }\n\n  const exceedsSizeLimit = body.length > NETWORK_BODY_MAX_SIZE;\n  const isProbablyJson = _strIsProbablyJson(body);\n\n  if (exceedsSizeLimit) {\n    const truncatedBody = body.slice(0, NETWORK_BODY_MAX_SIZE);\n\n    if (isProbablyJson) {\n      return {\n        body: truncatedBody,\n        warnings: ['MAYBE_JSON_TRUNCATED'],\n      };\n    }\n\n    return {\n      body: `${truncatedBody}…`,\n      warnings: ['TEXT_TRUNCATED'],\n    };\n  }\n\n  if (isProbablyJson) {\n    try {\n      const jsonBody = JSON.parse(body);\n      return {\n        body: jsonBody,\n      };\n    } catch {\n      // fall back to just send the body as string\n    }\n  }\n\n  return {\n    body,\n  };\n}\n\nfunction _strIsProbablyJson(str: string): boolean {\n  const first = str[0];\n  const last = str[str.length - 1];\n\n  // Simple check: If this does not start & end with {} or [], it's not JSON\n  return (first === '[' && last === ']') || (first === '{' && last === '}');\n}\n\n/** Match an URL against a list of strings/Regex. */\nexport function urlMatches(url: string, urls: (string | RegExp)[]): boolean {\n  const fullUrl = getFullUrl(url);\n\n  return stringMatchesSomePattern(fullUrl, urls);\n}\n\n/** exported for tests */\nexport function getFullUrl(url: string, baseURI = WINDOW.document.baseURI): string {\n  // Short circuit for common cases:\n  if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith(WINDOW.location.origin)) {\n    return url;\n  }\n  const fixedUrl = new URL(url, baseURI);\n\n  // If these do not match, we are not dealing with a relative URL, so just return it\n  if (fixedUrl.origin !== new URL(baseURI).origin) {\n    return url;\n  }\n\n  const fullUrl = fixedUrl.href;\n\n  // Remove trailing slashes, if they don't match the original URL\n  if (!url.endsWith('/') && fullUrl.endsWith('/')) {\n    return fullUrl.slice(0, -1);\n  }\n\n  return fullUrl;\n}\n","import type { Breadcrumb, FetchBreadcrumbData, TextEncoderInternal } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../../debug-build';\nimport type {\n  FetchHint,\n  NetworkMetaWarning,\n  ReplayContainer,\n  ReplayNetworkOptions,\n  ReplayNetworkRequestData,\n  ReplayNetworkRequestOrResponse,\n} from '../../types';\nimport { addNetworkBreadcrumb } from './addNetworkBreadcrumb';\nimport {\n  buildNetworkRequestOrResponse,\n  buildSkippedNetworkRequestOrResponse,\n  getAllowedHeaders,\n  getBodySize,\n  getBodyString,\n  makeNetworkReplayBreadcrumb,\n  mergeWarning,\n  parseContentLengthHeader,\n  urlMatches,\n} from './networkUtils';\n\n/**\n * Capture a fetch breadcrumb to a replay.\n * This adds additional data (where approriate).\n */\nexport async function captureFetchBreadcrumbToReplay(\n  breadcrumb: Breadcrumb & { data: FetchBreadcrumbData },\n  hint: Partial<FetchHint>,\n  options: ReplayNetworkOptions & {\n    textEncoder: TextEncoderInternal;\n    replay: ReplayContainer;\n  },\n): Promise<void> {\n  try {\n    const data = await _prepareFetchData(breadcrumb, hint, options);\n\n    // Create a replay performance entry from this breadcrumb\n    const result = makeNetworkReplayBreadcrumb('resource.fetch', data);\n    addNetworkBreadcrumb(options.replay, result);\n  } catch (error) {\n    DEBUG_BUILD && logger.error('[Replay] Failed to capture fetch breadcrumb', error);\n  }\n}\n\n/**\n * Enrich a breadcrumb with additional data.\n * This has to be sync & mutate the given breadcrumb,\n * as the breadcrumb is afterwards consumed by other handlers.\n */\nexport function enrichFetchBreadcrumb(\n  breadcrumb: Breadcrumb & { data: FetchBreadcrumbData },\n  hint: Partial<FetchHint>,\n  options: { textEncoder: TextEncoderInternal },\n): void {\n  const { input, response } = hint;\n\n  const body = input ? _getFetchRequestArgBody(input) : undefined;\n  const reqSize = getBodySize(body, options.textEncoder);\n\n  const resSize = response ? parseContentLengthHeader(response.headers.get('content-length')) : undefined;\n\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\n\nasync function _prepareFetchData(\n  breadcrumb: Breadcrumb & { data: FetchBreadcrumbData },\n  hint: Partial<FetchHint>,\n  options: ReplayNetworkOptions & {\n    textEncoder: TextEncoderInternal;\n  },\n): Promise<ReplayNetworkRequestData> {\n  const now = Date.now();\n  const { startTimestamp = now, endTimestamp = now } = hint;\n\n  const {\n    url,\n    method,\n    status_code: statusCode = 0,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize,\n  } = breadcrumb.data;\n\n  const captureDetails =\n    urlMatches(url, options.networkDetailAllowUrls) && !urlMatches(url, options.networkDetailDenyUrls);\n\n  const request = captureDetails\n    ? _getRequestInfo(options, hint.input, requestBodySize)\n    : buildSkippedNetworkRequestOrResponse(requestBodySize);\n  const response = await _getResponseInfo(captureDetails, options, hint.response, responseBodySize);\n\n  return {\n    startTimestamp,\n    endTimestamp,\n    url,\n    method,\n    statusCode,\n    request,\n    response,\n  };\n}\n\nfunction _getRequestInfo(\n  { networkCaptureBodies, networkRequestHeaders }: ReplayNetworkOptions,\n  input: FetchHint['input'] | undefined,\n  requestBodySize?: number,\n): ReplayNetworkRequestOrResponse | undefined {\n  const headers = input ? getRequestHeaders(input, networkRequestHeaders) : {};\n\n  if (!networkCaptureBodies) {\n    return buildNetworkRequestOrResponse(headers, requestBodySize, undefined);\n  }\n\n  // We only want to transmit string or string-like bodies\n  const requestBody = _getFetchRequestArgBody(input);\n  const [bodyStr, warning] = getBodyString(requestBody);\n  const data = buildNetworkRequestOrResponse(headers, requestBodySize, bodyStr);\n\n  if (warning) {\n    return mergeWarning(data, warning);\n  }\n\n  return data;\n}\n\n/** Exported only for tests. */\nexport async function _getResponseInfo(\n  captureDetails: boolean,\n  {\n    networkCaptureBodies,\n    textEncoder,\n    networkResponseHeaders,\n  }: Pick<ReplayNetworkOptions, 'networkCaptureBodies' | 'networkResponseHeaders'> & {\n    textEncoder: TextEncoderInternal;\n  },\n  response: Response | undefined,\n  responseBodySize?: number,\n): Promise<ReplayNetworkRequestOrResponse | undefined> {\n  if (!captureDetails && responseBodySize !== undefined) {\n    return buildSkippedNetworkRequestOrResponse(responseBodySize);\n  }\n\n  const headers = response ? getAllHeaders(response.headers, networkResponseHeaders) : {};\n\n  if (!response || (!networkCaptureBodies && responseBodySize !== undefined)) {\n    return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);\n  }\n\n  const [bodyText, warning] = await _parseFetchResponseBody(response);\n  const result = getResponseData(bodyText, {\n    networkCaptureBodies,\n    textEncoder,\n    responseBodySize,\n    captureDetails,\n    headers,\n  });\n\n  if (warning) {\n    return mergeWarning(result, warning);\n  }\n\n  return result;\n}\n\nfunction getResponseData(\n  bodyText: string | undefined,\n  {\n    networkCaptureBodies,\n    textEncoder,\n    responseBodySize,\n    captureDetails,\n    headers,\n  }: {\n    captureDetails: boolean;\n    networkCaptureBodies: boolean;\n    responseBodySize: number | undefined;\n    headers: Record<string, string>;\n    textEncoder: TextEncoderInternal;\n  },\n): ReplayNetworkRequestOrResponse | undefined {\n  try {\n    const size =\n      bodyText && bodyText.length && responseBodySize === undefined\n        ? getBodySize(bodyText, textEncoder)\n        : responseBodySize;\n\n    if (!captureDetails) {\n      return buildSkippedNetworkRequestOrResponse(size);\n    }\n\n    if (networkCaptureBodies) {\n      return buildNetworkRequestOrResponse(headers, size, bodyText);\n    }\n\n    return buildNetworkRequestOrResponse(headers, size, undefined);\n  } catch (error) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to serialize response body', error);\n    // fallback\n    return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);\n  }\n}\n\nasync function _parseFetchResponseBody(response: Response): Promise<[string | undefined, NetworkMetaWarning?]> {\n  const res = _tryCloneResponse(response);\n\n  if (!res) {\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  try {\n    const text = await _tryGetResponseText(res);\n    return [text];\n  } catch (error) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to get text body from response', error);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n}\n\nfunction _getFetchRequestArgBody(fetchArgs: unknown[] = []): RequestInit['body'] | undefined {\n  // We only support getting the body from the fetch options\n  if (fetchArgs.length !== 2 || typeof fetchArgs[1] !== 'object') {\n    return undefined;\n  }\n\n  return (fetchArgs[1] as RequestInit).body;\n}\n\nfunction getAllHeaders(headers: Headers, allowedHeaders: string[]): Record<string, string> {\n  const allHeaders: Record<string, string> = {};\n\n  allowedHeaders.forEach(header => {\n    if (headers.get(header)) {\n      allHeaders[header] = headers.get(header) as string;\n    }\n  });\n\n  return allHeaders;\n}\n\nfunction getRequestHeaders(fetchArgs: unknown[], allowedHeaders: string[]): Record<string, string> {\n  if (fetchArgs.length === 1 && typeof fetchArgs[0] !== 'string') {\n    return getHeadersFromOptions(fetchArgs[0] as Request | RequestInit, allowedHeaders);\n  }\n\n  if (fetchArgs.length === 2) {\n    return getHeadersFromOptions(fetchArgs[1] as Request | RequestInit, allowedHeaders);\n  }\n\n  return {};\n}\n\nfunction getHeadersFromOptions(\n  input: Request | RequestInit | undefined,\n  allowedHeaders: string[],\n): Record<string, string> {\n  if (!input) {\n    return {};\n  }\n\n  const headers = input.headers;\n\n  if (!headers) {\n    return {};\n  }\n\n  if (headers instanceof Headers) {\n    return getAllHeaders(headers, allowedHeaders);\n  }\n\n  // We do not support this, as it is not really documented (anymore?)\n  if (Array.isArray(headers)) {\n    return {};\n  }\n\n  return getAllowedHeaders(headers, allowedHeaders);\n}\n\nfunction _tryCloneResponse(response: Response): Response | void {\n  try {\n    // We have to clone this, as the body can only be read once\n    return response.clone();\n  } catch (error) {\n    // this can throw if the response was already consumed before\n    DEBUG_BUILD && logger.warn('[Replay] Failed to clone response body', error);\n  }\n}\n\n/**\n * Get the response body of a fetch request, or timeout after 500ms.\n * Fetch can return a streaming body, that may not resolve (or not for a long time).\n * If that happens, we rather abort after a short time than keep waiting for this.\n */\nfunction _tryGetResponseText(response: Response): Promise<string | undefined> {\n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout(() => reject(new Error('Timeout while trying to read response body')), 500);\n\n    _getResponseText(response)\n      .then(\n        txt => resolve(txt),\n        reason => reject(reason),\n      )\n      .finally(() => clearTimeout(timeout));\n  });\n\n  return _getResponseText(response);\n}\n\nasync function _getResponseText(response: Response): Promise<string> {\n  // Force this to be a promise, just to be safe\n  // eslint-disable-next-line no-return-await\n  return await response.text();\n}\n","import type { Breadcrumb, TextEncoderInternal, XhrBreadcrumbData } from '@sentry/types';\nimport { SENTRY_XHR_DATA_KEY, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../../debug-build';\nimport type {\n  NetworkMetaWarning,\n  ReplayContainer,\n  ReplayNetworkOptions,\n  ReplayNetworkRequestData,\n  XhrHint,\n} from '../../types';\nimport { addNetworkBreadcrumb } from './addNetworkBreadcrumb';\nimport {\n  buildNetworkRequestOrResponse,\n  buildSkippedNetworkRequestOrResponse,\n  getAllowedHeaders,\n  getBodySize,\n  getBodyString,\n  makeNetworkReplayBreadcrumb,\n  mergeWarning,\n  parseContentLengthHeader,\n  urlMatches,\n} from './networkUtils';\n\n/**\n * Capture an XHR breadcrumb to a replay.\n * This adds additional data (where approriate).\n */\nexport async function captureXhrBreadcrumbToReplay(\n  breadcrumb: Breadcrumb & { data: XhrBreadcrumbData },\n  hint: Partial<XhrHint>,\n  options: ReplayNetworkOptions & { replay: ReplayContainer },\n): Promise<void> {\n  try {\n    const data = _prepareXhrData(breadcrumb, hint, options);\n\n    // Create a replay performance entry from this breadcrumb\n    const result = makeNetworkReplayBreadcrumb('resource.xhr', data);\n    addNetworkBreadcrumb(options.replay, result);\n  } catch (error) {\n    DEBUG_BUILD && logger.error('[Replay] Failed to capture xhr breadcrumb', error);\n  }\n}\n\n/**\n * Enrich a breadcrumb with additional data.\n * This has to be sync & mutate the given breadcrumb,\n * as the breadcrumb is afterwards consumed by other handlers.\n */\nexport function enrichXhrBreadcrumb(\n  breadcrumb: Breadcrumb & { data: XhrBreadcrumbData },\n  hint: Partial<XhrHint>,\n  options: { textEncoder: TextEncoderInternal },\n): void {\n  const { xhr, input } = hint;\n\n  if (!xhr) {\n    return;\n  }\n\n  const reqSize = getBodySize(input, options.textEncoder);\n  const resSize = xhr.getResponseHeader('content-length')\n    ? parseContentLengthHeader(xhr.getResponseHeader('content-length'))\n    : _getBodySize(xhr.response, xhr.responseType, options.textEncoder);\n\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\n\nfunction _prepareXhrData(\n  breadcrumb: Breadcrumb & { data: XhrBreadcrumbData },\n  hint: Partial<XhrHint>,\n  options: ReplayNetworkOptions,\n): ReplayNetworkRequestData | null {\n  const now = Date.now();\n  const { startTimestamp = now, endTimestamp = now, input, xhr } = hint;\n\n  const {\n    url,\n    method,\n    status_code: statusCode = 0,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize,\n  } = breadcrumb.data;\n\n  if (!url) {\n    return null;\n  }\n\n  if (!xhr || !urlMatches(url, options.networkDetailAllowUrls) || urlMatches(url, options.networkDetailDenyUrls)) {\n    const request = buildSkippedNetworkRequestOrResponse(requestBodySize);\n    const response = buildSkippedNetworkRequestOrResponse(responseBodySize);\n    return {\n      startTimestamp,\n      endTimestamp,\n      url,\n      method,\n      statusCode,\n      request,\n      response,\n    };\n  }\n\n  const xhrInfo = xhr[SENTRY_XHR_DATA_KEY];\n  const networkRequestHeaders = xhrInfo\n    ? getAllowedHeaders(xhrInfo.request_headers, options.networkRequestHeaders)\n    : {};\n  const networkResponseHeaders = getAllowedHeaders(getResponseHeaders(xhr), options.networkResponseHeaders);\n\n  const [requestBody, requestWarning] = options.networkCaptureBodies ? getBodyString(input) : [undefined];\n  const [responseBody, responseWarning] = options.networkCaptureBodies ? _getXhrResponseBody(xhr) : [undefined];\n\n  const request = buildNetworkRequestOrResponse(networkRequestHeaders, requestBodySize, requestBody);\n  const response = buildNetworkRequestOrResponse(networkResponseHeaders, responseBodySize, responseBody);\n\n  return {\n    startTimestamp,\n    endTimestamp,\n    url,\n    method,\n    statusCode,\n    request: requestWarning ? mergeWarning(request, requestWarning) : request,\n    response: responseWarning ? mergeWarning(response, responseWarning) : response,\n  };\n}\n\nfunction getResponseHeaders(xhr: XMLHttpRequest): Record<string, string> {\n  const headers = xhr.getAllResponseHeaders();\n\n  if (!headers) {\n    return {};\n  }\n\n  return headers.split('\\r\\n').reduce((acc: Record<string, string>, line: string) => {\n    const [key, value] = line.split(': ');\n    acc[key.toLowerCase()] = value;\n    return acc;\n  }, {});\n}\n\nfunction _getXhrResponseBody(xhr: XMLHttpRequest): [string | undefined, NetworkMetaWarning?] {\n  // We collect errors that happen, but only log them if we can't get any response body\n  const errors: unknown[] = [];\n\n  try {\n    return [xhr.responseText];\n  } catch (e) {\n    errors.push(e);\n  }\n\n  // Try to manually parse the response body, if responseText fails\n  try {\n    return _parseXhrResponse(xhr.response, xhr.responseType);\n  } catch (e) {\n    errors.push(e);\n  }\n\n  DEBUG_BUILD && logger.warn('[Replay] Failed to get xhr response body', ...errors);\n\n  return [undefined];\n}\n\n/**\n * Get the string representation of the XHR response.\n * Based on MDN, these are the possible types of the response:\n * string\n * ArrayBuffer\n * Blob\n * Document\n * POJO\n *\n * Exported only for tests.\n */\nexport function _parseXhrResponse(\n  body: XMLHttpRequest['response'],\n  responseType: XMLHttpRequest['responseType'],\n): [string | undefined, NetworkMetaWarning?] {\n  try {\n    if (typeof body === 'string') {\n      return [body];\n    }\n\n    if (body instanceof Document) {\n      return [body.body.outerHTML];\n    }\n\n    if (responseType === 'json' && body && typeof body === 'object') {\n      return [JSON.stringify(body)];\n    }\n\n    if (!body) {\n      return [undefined];\n    }\n  } catch {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to serialize body', body);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  DEBUG_BUILD && logger.info('[Replay] Skipping network body because of body type', body);\n\n  return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n}\n\nfunction _getBodySize(\n  body: XMLHttpRequest['response'],\n  responseType: XMLHttpRequest['responseType'],\n  textEncoder: TextEncoder | TextEncoderInternal,\n): number | undefined {\n  try {\n    const bodyStr = responseType === 'json' && body && typeof body === 'object' ? JSON.stringify(body) : body;\n    return getBodySize(bodyStr, textEncoder);\n  } catch {\n    return undefined;\n  }\n}\n","import { getClient } from '@sentry/core';\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  FetchBreadcrumbData,\n  TextEncoderInternal,\n  XhrBreadcrumbData,\n} from '@sentry/types';\nimport { addFetchInstrumentationHandler, addXhrInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { FetchHint, ReplayContainer, ReplayNetworkOptions, XhrHint } from '../types';\nimport { handleFetchSpanListener } from './handleFetch';\nimport { handleXhrSpanListener } from './handleXhr';\nimport { captureFetchBreadcrumbToReplay, enrichFetchBreadcrumb } from './util/fetchUtils';\nimport { captureXhrBreadcrumbToReplay, enrichXhrBreadcrumb } from './util/xhrUtils';\n\ninterface ExtendedNetworkBreadcrumbsOptions extends ReplayNetworkOptions {\n  replay: ReplayContainer;\n  textEncoder: TextEncoderInternal;\n}\n\n/**\n * This method does two things:\n * - It enriches the regular XHR/fetch breadcrumbs with request/response size data\n * - It captures the XHR/fetch breadcrumbs to the replay\n *   (enriching it with further data that is _not_ added to the regular breadcrumbs)\n */\nexport function handleNetworkBreadcrumbs(replay: ReplayContainer): void {\n  const client = getClient();\n\n  try {\n    const textEncoder = new TextEncoder();\n\n    const {\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders,\n      networkResponseHeaders,\n    } = replay.getOptions();\n\n    const options: ExtendedNetworkBreadcrumbsOptions = {\n      replay,\n      textEncoder,\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders,\n      networkResponseHeaders,\n    };\n\n    if (client && client.on) {\n      client.on('beforeAddBreadcrumb', (breadcrumb, hint) => beforeAddNetworkBreadcrumb(options, breadcrumb, hint));\n    } else {\n      // Fallback behavior\n      addFetchInstrumentationHandler(handleFetchSpanListener(replay));\n      addXhrInstrumentationHandler(handleXhrSpanListener(replay));\n    }\n  } catch {\n    // Do nothing\n  }\n}\n\n/** just exported for tests */\nexport function beforeAddNetworkBreadcrumb(\n  options: ExtendedNetworkBreadcrumbsOptions,\n  breadcrumb: Breadcrumb,\n  hint?: BreadcrumbHint,\n): void {\n  if (!breadcrumb.data) {\n    return;\n  }\n\n  try {\n    if (_isXhrBreadcrumb(breadcrumb) && _isXhrHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      enrichXhrBreadcrumb(breadcrumb, hint, options);\n\n      // This call should not reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      captureXhrBreadcrumbToReplay(breadcrumb, hint, options);\n    }\n\n    if (_isFetchBreadcrumb(breadcrumb) && _isFetchHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      enrichFetchBreadcrumb(breadcrumb, hint, options);\n\n      // This call should not reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      captureFetchBreadcrumbToReplay(breadcrumb, hint, options);\n    }\n  } catch (e) {\n    DEBUG_BUILD && logger.warn('Error when enriching network breadcrumb');\n  }\n}\n\nfunction _isXhrBreadcrumb(breadcrumb: Breadcrumb): breadcrumb is Breadcrumb & { data: XhrBreadcrumbData } {\n  return breadcrumb.category === 'xhr';\n}\n\nfunction _isFetchBreadcrumb(breadcrumb: Breadcrumb): breadcrumb is Breadcrumb & { data: FetchBreadcrumbData } {\n  return breadcrumb.category === 'fetch';\n}\n\nfunction _isXhrHint(hint?: BreadcrumbHint): hint is XhrHint {\n  return hint && hint.xhr;\n}\n\nfunction _isFetchHint(hint?: BreadcrumbHint): hint is FetchHint {\n  return hint && hint.response;\n}\n","import type { Breadcrumb, Scope } from '@sentry/types';\nimport { normalize } from '@sentry/utils';\n\nimport { CONSOLE_ARG_MAX_SIZE } from '../constants';\nimport type { ReplayContainer } from '../types';\nimport type { ReplayFrame } from '../types/replayFrame';\nimport { createBreadcrumb } from '../util/createBreadcrumb';\nimport { addBreadcrumbEvent } from './util/addBreadcrumbEvent';\n\nlet _LAST_BREADCRUMB: null | Breadcrumb = null;\n\ntype BreadcrumbWithCategory = Required<Pick<Breadcrumb, 'category'>>;\n\nfunction isBreadcrumbWithCategory(breadcrumb: Breadcrumb): breadcrumb is BreadcrumbWithCategory {\n  return !!breadcrumb.category;\n}\n\nexport const handleScopeListener: (replay: ReplayContainer) => (scope: Scope) => void =\n  (replay: ReplayContainer) =>\n  (scope: Scope): void => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleScope(scope);\n\n    if (!result) {\n      return;\n    }\n\n    addBreadcrumbEvent(replay, result);\n  };\n\n/**\n * An event handler to handle scope changes.\n */\nexport function handleScope(scope: Scope): Breadcrumb | null {\n  // TODO (v8): Remove this guard. This was put in place because we introduced\n  // Scope.getLastBreadcrumb mid-v7 which caused incompatibilities with older SDKs.\n  // For now, we'll just return null if the method doesn't exist but we should eventually\n  // get rid of this guard.\n  const newBreadcrumb = scope.getLastBreadcrumb && scope.getLastBreadcrumb();\n\n  // Listener can be called when breadcrumbs have not changed, so we store the\n  // reference to the last crumb and only return a crumb if it has changed\n  if (_LAST_BREADCRUMB === newBreadcrumb || !newBreadcrumb) {\n    return null;\n  }\n\n  _LAST_BREADCRUMB = newBreadcrumb;\n\n  if (\n    !isBreadcrumbWithCategory(newBreadcrumb) ||\n    ['fetch', 'xhr', 'sentry.event', 'sentry.transaction'].includes(newBreadcrumb.category) ||\n    newBreadcrumb.category.startsWith('ui.')\n  ) {\n    return null;\n  }\n\n  if (newBreadcrumb.category === 'console') {\n    return normalizeConsoleBreadcrumb(newBreadcrumb);\n  }\n\n  return createBreadcrumb(newBreadcrumb);\n}\n\n/** exported for tests only */\nexport function normalizeConsoleBreadcrumb(\n  breadcrumb: Omit<Breadcrumb, 'category'> & BreadcrumbWithCategory,\n): ReplayFrame {\n  const args = breadcrumb.data && breadcrumb.data.arguments;\n\n  if (!Array.isArray(args) || args.length === 0) {\n    return createBreadcrumb(breadcrumb);\n  }\n\n  let isTruncated = false;\n\n  // Avoid giant args captures\n  const normalizedArgs = args.map(arg => {\n    if (!arg) {\n      return arg;\n    }\n    if (typeof arg === 'string') {\n      if (arg.length > CONSOLE_ARG_MAX_SIZE) {\n        isTruncated = true;\n        return `${arg.slice(0, CONSOLE_ARG_MAX_SIZE)}…`;\n      }\n\n      return arg;\n    }\n    if (typeof arg === 'object') {\n      try {\n        const normalizedArg = normalize(arg, 7);\n        const stringified = JSON.stringify(normalizedArg);\n        if (stringified.length > CONSOLE_ARG_MAX_SIZE) {\n          isTruncated = true;\n          // We use the pretty printed JSON string here as a base\n          return `${JSON.stringify(normalizedArg, null, 2).slice(0, CONSOLE_ARG_MAX_SIZE)}…`;\n        }\n        return normalizedArg;\n      } catch {\n        // fall back to default\n      }\n    }\n\n    return arg;\n  });\n\n  return createBreadcrumb({\n    ...breadcrumb,\n    data: {\n      ...breadcrumb.data,\n      arguments: normalizedArgs,\n      ...(isTruncated ? { _meta: { warnings: ['CONSOLE_ARG_TRUNCATED'] } } : {}),\n    },\n  });\n}\n","import type { BaseClient } from '@sentry/core';\nimport { getCurrentScope } from '@sentry/core';\nimport { addEventProcessor, getClient } from '@sentry/core';\nimport type { Client, DynamicSamplingContext } from '@sentry/types';\nimport { addClickKeypressInstrumentationHandler, addHistoryInstrumentationHandler } from '@sentry/utils';\n\nimport { handleAfterSendEvent } from '../coreHandlers/handleAfterSendEvent';\nimport { handleBeforeSendEvent } from '../coreHandlers/handleBeforeSendEvent';\nimport { handleDomListener } from '../coreHandlers/handleDom';\nimport { handleGlobalEventListener } from '../coreHandlers/handleGlobalEvent';\nimport { handleHistorySpanListener } from '../coreHandlers/handleHistory';\nimport { handleNetworkBreadcrumbs } from '../coreHandlers/handleNetworkBreadcrumbs';\nimport { handleScopeListener } from '../coreHandlers/handleScope';\nimport type { ReplayContainer } from '../types';\n\n/**\n * Add global listeners that cannot be removed.\n */\nexport function addGlobalListeners(replay: ReplayContainer): void {\n  // Listeners from core SDK //\n  const scope = getCurrentScope();\n  const client = getClient();\n\n  scope.addScopeListener(handleScopeListener(replay));\n  addClickKeypressInstrumentationHandler(handleDomListener(replay));\n  addHistoryInstrumentationHandler(handleHistorySpanListener(replay));\n  handleNetworkBreadcrumbs(replay);\n\n  // Tag all (non replay) events that get sent to Sentry with the current\n  // replay ID so that we can reference them later in the UI\n  const eventProcessor = handleGlobalEventListener(replay, !hasHooks(client));\n  if (client && client.addEventProcessor) {\n    client.addEventProcessor(eventProcessor);\n  } else {\n    addEventProcessor(eventProcessor);\n  }\n\n  // If a custom client has no hooks yet, we continue to use the \"old\" implementation\n  if (hasHooks(client)) {\n    client.on('beforeSendEvent', handleBeforeSendEvent(replay));\n    client.on('afterSendEvent', handleAfterSendEvent(replay));\n    client.on('createDsc', (dsc: DynamicSamplingContext) => {\n      const replayId = replay.getSessionId();\n      // We do not want to set the DSC when in buffer mode, as that means the replay has not been sent (yet)\n      if (replayId && replay.isEnabled() && replay.recordingMode === 'session') {\n        // Ensure to check that the session is still active - it could have expired in the meanwhile\n        const isSessionActive = replay.checkAndHandleExpiredSession();\n        if (isSessionActive) {\n          dsc.replay_id = replayId;\n        }\n      }\n    });\n\n    client.on('startTransaction', transaction => {\n      replay.lastTransaction = transaction;\n    });\n\n    // We may be missing the initial startTransaction due to timing issues,\n    // so we capture it on finish again.\n    client.on('finishTransaction', transaction => {\n      replay.lastTransaction = transaction;\n    });\n\n    // We want to flush replay\n    client.on('beforeSendFeedback', (feedbackEvent, options) => {\n      const replayId = replay.getSessionId();\n      if (options && options.includeReplay && replay.isEnabled() && replayId) {\n        // This should never reject\n        if (feedbackEvent.contexts && feedbackEvent.contexts.feedback) {\n          feedbackEvent.contexts.feedback.replay_id = replayId;\n        }\n      }\n    });\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction hasHooks(client: Client | undefined): client is BaseClient<any> {\n  return !!(client && client.on);\n}\n","import { WINDOW } from '../constants';\nimport type { AddEventResult, MemoryData, ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { createPerformanceSpans } from './createPerformanceSpans';\n\ntype ReplayMemoryEntry = ReplayPerformanceEntry<MemoryData> & { data: { memory: MemoryInfo } };\n\ninterface MemoryInfo {\n  jsHeapSizeLimit: number;\n  totalJSHeapSize: number;\n  usedJSHeapSize: number;\n}\n\n/**\n * Create a \"span\" for the total amount of memory being used by JS objects\n * (including v8 internal objects).\n */\nexport async function addMemoryEntry(replay: ReplayContainer): Promise<Array<AddEventResult | null>> {\n  // window.performance.memory is a non-standard API and doesn't work on all browsers, so we try-catch this\n  try {\n    return Promise.all(\n      createPerformanceSpans(replay, [\n        // @ts-expect-error memory doesn't exist on type Performance as the API is non-standard (we check that it exists above)\n        createMemoryEntry(WINDOW.performance.memory),\n      ]),\n    );\n  } catch (error) {\n    // Do nothing\n    return [];\n  }\n}\n\nfunction createMemoryEntry(memoryEntry: MemoryInfo): ReplayMemoryEntry {\n  const { jsHeapSizeLimit, totalJSHeapSize, usedJSHeapSize } = memoryEntry;\n  // we don't want to use `getAbsoluteTime` because it adds the event time to the\n  // time origin, so we get the current timestamp instead\n  const time = Date.now() / 1000;\n  return {\n    type: 'memory',\n    name: 'memory',\n    start: time,\n    end: time,\n    data: {\n      memory: {\n        jsHeapSizeLimit,\n        totalJSHeapSize,\n        usedJSHeapSize,\n      },\n    },\n  };\n}\n","type DebouncedCallback = {\n  (): void | unknown;\n  flush: () => void | unknown;\n  cancel: () => void;\n};\ntype CallbackFunction = () => unknown;\ntype DebounceOptions = { maxWait?: number };\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nexport function debounce(func: CallbackFunction, wait: number, options?: DebounceOptions): DebouncedCallback {\n  let callbackReturnValue: unknown;\n\n  let timerId: ReturnType<typeof setTimeout> | undefined;\n  let maxTimerId: ReturnType<typeof setTimeout> | undefined;\n\n  const maxWait = options && options.maxWait ? Math.max(options.maxWait, wait) : 0;\n\n  function invokeFunc(): unknown {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n\n  function cancelTimers(): void {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n\n  function flush(): unknown {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n\n  function debounced(): unknown {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(invokeFunc, wait);\n\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeout(invokeFunc, maxWait);\n    }\n\n    return callbackReturnValue;\n  }\n\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n","import { EventType } from '@sentry-internal/rrweb';\nimport { logger } from '@sentry/utils';\n\nimport { updateClickDetectorForRecordingEvent } from '../coreHandlers/handleClick';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { saveSession } from '../session/saveSession';\nimport type { RecordingEvent, ReplayContainer, ReplayOptionFrameEvent } from '../types';\nimport { addEventSync } from './addEvent';\nimport { logInfo } from './log';\n\ntype RecordingEmitCallback = (event: RecordingEvent, isCheckout?: boolean) => void;\n\n/**\n * Handler for recording events.\n *\n * Adds to event buffer, and has varying flushing behaviors if the event was a checkout.\n */\nexport function getHandleRecordingEmit(replay: ReplayContainer): RecordingEmitCallback {\n  let hadFirstEvent = false;\n\n  return (event: RecordingEvent, _isCheckout?: boolean) => {\n    // If this is false, it means session is expired, create and a new session and wait for checkout\n    if (!replay.checkAndHandleExpiredSession()) {\n      DEBUG_BUILD && logger.warn('[Replay] Received replay event after session expired.');\n\n      return;\n    }\n\n    // `_isCheckout` is only set when the checkout is due to `checkoutEveryNms`\n    // We also want to treat the first event as a checkout, so we handle this specifically here\n    const isCheckout = _isCheckout || !hadFirstEvent;\n    hadFirstEvent = true;\n\n    if (replay.clickDetector) {\n      updateClickDetectorForRecordingEvent(replay.clickDetector, event);\n    }\n\n    // The handler returns `true` if we do not want to trigger debounced flush, `false` if we want to debounce flush.\n    replay.addUpdate(() => {\n      // The session is always started immediately on pageload/init, but for\n      // error-only replays, it should reflect the most recent checkout\n      // when an error occurs. Clear any state that happens before this current\n      // checkout. This needs to happen before `addEvent()` which updates state\n      // dependent on this reset.\n      if (replay.recordingMode === 'buffer' && isCheckout) {\n        replay.setInitialState();\n      }\n\n      // If the event is not added (e.g. due to being paused, disabled, or out of the max replay duration),\n      // Skip all further steps\n      if (!addEventSync(replay, event, isCheckout)) {\n        // Return true to skip scheduling a debounced flush\n        return true;\n      }\n\n      // Different behavior for full snapshots (type=2), ignore other event types\n      // See https://github.com/rrweb-io/rrweb/blob/d8f9290ca496712aa1e7d472549480c4e7876594/packages/rrweb/src/types.ts#L16\n      if (!isCheckout) {\n        return false;\n      }\n\n      // Additionally, create a meta event that will capture certain SDK settings.\n      // In order to handle buffer mode, this needs to either be done when we\n      // receive checkout events or at flush time.\n      //\n      // `isCheckout` is always true, but want to be explicit that it should\n      // only be added for checkouts\n      addSettingsEvent(replay, isCheckout);\n\n      // If there is a previousSessionId after a full snapshot occurs, then\n      // the replay session was started due to session expiration. The new session\n      // is started before triggering a new checkout and contains the id\n      // of the previous session. Do not immediately flush in this case\n      // to avoid capturing only the checkout and instead the replay will\n      // be captured if they perform any follow-up actions.\n      if (replay.session && replay.session.previousSessionId) {\n        return true;\n      }\n\n      // When in buffer mode, make sure we adjust the session started date to the current earliest event of the buffer\n      // this should usually be the timestamp of the checkout event, but to be safe...\n      if (replay.recordingMode === 'buffer' && replay.session && replay.eventBuffer) {\n        const earliestEvent = replay.eventBuffer.getEarliestTimestamp();\n        if (earliestEvent) {\n          logInfo(\n            `[Replay] Updating session start time to earliest event in buffer to ${new Date(earliestEvent)}`,\n            replay.getOptions()._experiments.traceInternals,\n          );\n\n          replay.session.started = earliestEvent;\n\n          if (replay.getOptions().stickySession) {\n            saveSession(replay.session);\n          }\n        }\n      }\n\n      if (replay.recordingMode === 'session') {\n        // If the full snapshot is due to an initial load, we will not have\n        // a previous session ID. In this case, we want to buffer events\n        // for a set amount of time before flushing. This can help avoid\n        // capturing replays of users that immediately close the window.\n\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        void replay.flush();\n      }\n\n      return true;\n    });\n  };\n}\n\n/**\n * Exported for tests\n */\nexport function createOptionsEvent(replay: ReplayContainer): ReplayOptionFrameEvent {\n  const options = replay.getOptions();\n  return {\n    type: EventType.Custom,\n    timestamp: Date.now(),\n    data: {\n      tag: 'options',\n      payload: {\n        shouldRecordCanvas: replay.isRecordingCanvas(),\n        sessionSampleRate: options.sessionSampleRate,\n        errorSampleRate: options.errorSampleRate,\n        useCompressionOption: options.useCompression,\n        blockAllMedia: options.blockAllMedia,\n        maskAllText: options.maskAllText,\n        maskAllInputs: options.maskAllInputs,\n        useCompression: replay.eventBuffer ? replay.eventBuffer.type === 'worker' : false,\n        networkDetailHasUrls: options.networkDetailAllowUrls.length > 0,\n        networkCaptureBodies: options.networkCaptureBodies,\n        networkRequestHasHeaders: options.networkRequestHeaders.length > 0,\n        networkResponseHasHeaders: options.networkResponseHeaders.length > 0,\n      },\n    },\n  };\n}\n\n/**\n * Add a \"meta\" event that contains a simplified view on current configuration\n * options. This should only be included on the first segment of a recording.\n */\nfunction addSettingsEvent(replay: ReplayContainer, isCheckout?: boolean): void {\n  // Only need to add this event when sending the first segment\n  if (!isCheckout || !replay.session || replay.session.segmentId !== 0) {\n    return;\n  }\n\n  addEventSync(replay, createOptionsEvent(replay), false);\n}\n","import type { DsnComponents, ReplayEnvelope, ReplayEvent, ReplayRecordingData } from '@sentry/types';\nimport { createEnvelope, createEventEnvelopeHeaders, getSdkMetadataForEnvelopeHeader } from '@sentry/utils';\n\n/**\n * Create a replay envelope ready to be sent.\n * This includes both the replay event, as well as the recording data.\n */\nexport function createReplayEnvelope(\n  replayEvent: ReplayEvent,\n  recordingData: ReplayRecordingData,\n  dsn: DsnComponents,\n  tunnel?: string,\n): ReplayEnvelope {\n  return createEnvelope<ReplayEnvelope>(\n    createEventEnvelopeHeaders(replayEvent, getSdkMetadataForEnvelopeHeader(replayEvent), tunnel, dsn),\n    [\n      [{ type: 'replay_event' }, replayEvent],\n      [\n        {\n          type: 'replay_recording',\n          // If string then we need to encode to UTF8, otherwise will have\n          // wrong size. TextEncoder has similar browser support to\n          // MutationObserver, although it does not accept IE11.\n          length:\n            typeof recordingData === 'string' ? new TextEncoder().encode(recordingData).length : recordingData.length,\n        },\n        recordingData,\n      ],\n    ],\n  );\n}\n","import type { ReplayRecordingData } from '@sentry/types';\n\n/**\n * Prepare the recording data ready to be sent.\n */\nexport function prepareRecordingData({\n  recordingData,\n  headers,\n}: {\n  recordingData: ReplayRecordingData;\n  headers: Record<string, unknown>;\n}): ReplayRecordingData {\n  let payloadWithSequence;\n\n  // XXX: newline is needed to separate sequence id from events\n  const replayHeaders = `${JSON.stringify(headers)}\n`;\n\n  if (typeof recordingData === 'string') {\n    payloadWithSequence = `${replayHeaders}${recordingData}`;\n  } else {\n    const enc = new TextEncoder();\n    // XXX: newline is needed to separate sequence id from events\n    const sequence = enc.encode(replayHeaders);\n    // Merge the two Uint8Arrays\n    payloadWithSequence = new Uint8Array(sequence.length + recordingData.length);\n    payloadWithSequence.set(sequence);\n    payloadWithSequence.set(recordingData, sequence.length);\n  }\n\n  return payloadWithSequence;\n}\n","import type { IntegrationIndex, Scope } from '@sentry/core';\nimport { getIsolationScope } from '@sentry/core';\nimport { prepareEvent } from '@sentry/core';\nimport type { Client, EventHint, ReplayEvent } from '@sentry/types';\n\n/**\n * Prepare a replay event & enrich it with the SDK metadata.\n */\nexport async function prepareReplayEvent({\n  client,\n  scope,\n  replayId: event_id,\n  event,\n}: {\n  client: Client & { _integrations?: IntegrationIndex };\n  scope: Scope;\n  replayId: string;\n  event: ReplayEvent;\n}): Promise<ReplayEvent | null> {\n  const integrations =\n    typeof client._integrations === 'object' && client._integrations !== null && !Array.isArray(client._integrations)\n      ? Object.keys(client._integrations)\n      : undefined;\n\n  const eventHint: EventHint = { event_id, integrations };\n\n  if (client.emit) {\n    client.emit('preprocessEvent', event, eventHint);\n  }\n\n  const preparedEvent = (await prepareEvent(\n    client.getOptions(),\n    event,\n    eventHint,\n    scope,\n    client,\n    getIsolationScope(),\n  )) as ReplayEvent | null;\n\n  // If e.g. a global event processor returned null\n  if (!preparedEvent) {\n    return null;\n  }\n\n  // This normally happens in browser client \"_prepareEvent\"\n  // but since we do not use this private method from the client, but rather the plain import\n  // we need to do this manually.\n  preparedEvent.platform = preparedEvent.platform || 'javascript';\n\n  // extract the SDK name because `client._prepareEvent` doesn't add it to the event\n  const metadata = client.getSdkMetadata && client.getSdkMetadata();\n  const { name, version } = (metadata && metadata.sdk) || {};\n\n  preparedEvent.sdk = {\n    ...preparedEvent.sdk,\n    name: name || 'sentry.javascript.unknown',\n    version: version || '0.0.0',\n  };\n\n  return preparedEvent;\n}\n","import { getClient, getCurrentScope } from '@sentry/core';\nimport type { ReplayEvent, TransportMakeRequestResponse } from '@sentry/types';\nimport type { RateLimits } from '@sentry/utils';\nimport { isRateLimited, updateRateLimits } from '@sentry/utils';\n\nimport { REPLAY_EVENT_NAME, UNABLE_TO_SEND_REPLAY } from '../constants';\nimport type { SendReplayData } from '../types';\nimport { createReplayEnvelope } from './createReplayEnvelope';\nimport { logInfo } from './log';\nimport { prepareRecordingData } from './prepareRecordingData';\nimport { prepareReplayEvent } from './prepareReplayEvent';\n\n/**\n * Send replay attachment using `fetch()`\n */\nexport async function sendReplayRequest({\n  recordingData,\n  replayId,\n  segmentId: segment_id,\n  eventContext,\n  timestamp,\n  session,\n}: SendReplayData): Promise<void | TransportMakeRequestResponse> {\n  const preparedRecordingData = prepareRecordingData({\n    recordingData,\n    headers: {\n      segment_id,\n    },\n  });\n\n  const { urls, errorIds, traceIds, initialTimestamp } = eventContext;\n\n  const client = getClient();\n  const scope = getCurrentScope();\n  const transport = client && client.getTransport();\n  const dsn = client && client.getDsn();\n\n  if (!client || !transport || !dsn || !session.sampled) {\n    return;\n  }\n\n  const baseEvent: ReplayEvent = {\n    type: REPLAY_EVENT_NAME,\n    replay_start_timestamp: initialTimestamp / 1000,\n    timestamp: timestamp / 1000,\n    error_ids: errorIds,\n    trace_ids: traceIds,\n    urls,\n    replay_id: replayId,\n    segment_id,\n    replay_type: session.sampled,\n  };\n\n  const replayEvent = await prepareReplayEvent({ scope, client, replayId, event: baseEvent });\n\n  if (!replayEvent) {\n    // Taken from baseclient's `_processEvent` method, where this is handled for errors/transactions\n    client.recordDroppedEvent('event_processor', 'replay', baseEvent);\n    logInfo('An event processor returned `null`, will not send event.');\n    return;\n  }\n\n  /*\n  For reference, the fully built event looks something like this:\n  {\n      \"type\": \"replay_event\",\n      \"timestamp\": 1670837008.634,\n      \"error_ids\": [\n          \"errorId\"\n      ],\n      \"trace_ids\": [\n          \"traceId\"\n      ],\n      \"urls\": [\n          \"https://example.com\"\n      ],\n      \"replay_id\": \"eventId\",\n      \"segment_id\": 3,\n      \"replay_type\": \"error\",\n      \"platform\": \"javascript\",\n      \"event_id\": \"eventId\",\n      \"environment\": \"production\",\n      \"sdk\": {\n          \"integrations\": [\n              \"BrowserTracing\",\n              \"Replay\"\n          ],\n          \"name\": \"sentry.javascript.browser\",\n          \"version\": \"7.25.0\"\n      },\n      \"sdkProcessingMetadata\": {},\n      \"contexts\": {\n      },\n  }\n  */\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete replayEvent.sdkProcessingMetadata;\n\n  const envelope = createReplayEnvelope(replayEvent, preparedRecordingData, dsn, client.getOptions().tunnel);\n\n  let response: void | TransportMakeRequestResponse;\n\n  try {\n    response = await transport.send(envelope);\n  } catch (err) {\n    const error = new Error(UNABLE_TO_SEND_REPLAY);\n\n    try {\n      // In case browsers don't allow this property to be writable\n      // @ts-expect-error This needs lib es2022 and newer\n      error.cause = err;\n    } catch {\n      // nothing to do\n    }\n    throw error;\n  }\n\n  // TODO (v8): we can remove this guard once transport.send's type signature doesn't include void anymore\n  if (!response) {\n    return response;\n  }\n\n  // If the status code is invalid, we want to immediately stop & not retry\n  if (typeof response.statusCode === 'number' && (response.statusCode < 200 || response.statusCode >= 300)) {\n    throw new TransportStatusCodeError(response.statusCode);\n  }\n\n  const rateLimits = updateRateLimits({}, response);\n  if (isRateLimited(rateLimits, 'replay')) {\n    throw new RateLimitError(rateLimits);\n  }\n\n  return response;\n}\n\n/**\n * This error indicates that the transport returned an invalid status code.\n */\nexport class TransportStatusCodeError extends Error {\n  public constructor(statusCode: number) {\n    super(`Transport returned status code ${statusCode}`);\n  }\n}\n\n/**\n * This error indicates that we hit a rate limit API error.\n */\nexport class RateLimitError extends Error {\n  public rateLimits: RateLimits;\n\n  public constructor(rateLimits: RateLimits) {\n    super('Rate limit hit');\n    this.rateLimits = rateLimits;\n  }\n}\n","import { captureException, setContext } from '@sentry/core';\n\nimport { RETRY_BASE_INTERVAL, RETRY_MAX_COUNT, UNABLE_TO_SEND_REPLAY } from '../constants';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { SendReplayData } from '../types';\nimport { RateLimitError, TransportStatusCodeError, sendReplayRequest } from './sendReplayRequest';\n\n/**\n * Finalize and send the current replay event to Sentry\n */\nexport async function sendReplay(\n  replayData: SendReplayData,\n  retryConfig = {\n    count: 0,\n    interval: RETRY_BASE_INTERVAL,\n  },\n): Promise<unknown> {\n  const { recordingData, options } = replayData;\n\n  // short circuit if there's no events to upload (this shouldn't happen as _runFlush makes this check)\n  if (!recordingData.length) {\n    return;\n  }\n\n  try {\n    await sendReplayRequest(replayData);\n    return true;\n  } catch (err) {\n    if (err instanceof TransportStatusCodeError || err instanceof RateLimitError) {\n      throw err;\n    }\n\n    // Capture error for every failed replay\n    setContext('Replays', {\n      _retryCount: retryConfig.count,\n    });\n\n    if (DEBUG_BUILD && options._experiments && options._experiments.captureExceptions) {\n      captureException(err);\n    }\n\n    // If an error happened here, it's likely that uploading the attachment\n    // failed, we'll can retry with the same events payload\n    if (retryConfig.count >= RETRY_MAX_COUNT) {\n      const error = new Error(`${UNABLE_TO_SEND_REPLAY} - max retries exceeded`);\n\n      try {\n        // In case browsers don't allow this property to be writable\n        // @ts-expect-error This needs lib es2022 and newer\n        error.cause = err;\n      } catch {\n        // nothing to do\n      }\n\n      throw error;\n    }\n\n    // will retry in intervals of 5, 10, 30\n    retryConfig.interval *= ++retryConfig.count;\n\n    return new Promise((resolve, reject) => {\n      setTimeout(async () => {\n        try {\n          await sendReplay(replayData, retryConfig);\n          resolve(true);\n        } catch (err) {\n          reject(err);\n        }\n      }, retryConfig.interval);\n    });\n  }\n}\n","export const THROTTLED = '__THROTTLED';\nexport const SKIPPED = '__SKIPPED';\n\n/**\n * Create a throttled function off a given function.\n * When calling the throttled function, it will call the original function only\n * if it hasn't been called more than `maxCount` times in the last `durationSeconds`.\n *\n * Returns `THROTTLED` if throttled for the first time, after that `SKIPPED`,\n * or else the return value of the original function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function throttle<T extends (...rest: any[]) => any>(\n  fn: T,\n  maxCount: number,\n  durationSeconds: number,\n): (...rest: Parameters<T>) => ReturnType<T> | typeof THROTTLED | typeof SKIPPED {\n  const counter = new Map<number, number>();\n\n  const _cleanup = (now: number): void => {\n    const threshold = now - durationSeconds;\n    counter.forEach((_value, key) => {\n      if (key < threshold) {\n        counter.delete(key);\n      }\n    });\n  };\n\n  const _getTotalCount = (): number => {\n    return [...counter.values()].reduce((a, b) => a + b, 0);\n  };\n\n  let isThrottled = false;\n\n  return (...rest: Parameters<T>): ReturnType<T> | typeof THROTTLED | typeof SKIPPED => {\n    // Date in second-precision, which we use as basis for the throttling\n    const now = Math.floor(Date.now() / 1000);\n\n    // First, make sure to delete any old entries\n    _cleanup(now);\n\n    // If already over limit, do nothing\n    if (_getTotalCount() >= maxCount) {\n      const wasThrottled = isThrottled;\n      isThrottled = true;\n      return wasThrottled ? SKIPPED : THROTTLED;\n    }\n\n    isThrottled = false;\n    const count = counter.get(now) || 0;\n    counter.set(now, count + 1);\n\n    return fn(...rest);\n  };\n}\n","/* eslint-disable max-lines */ // TODO: We might want to split this file up\nimport { EventType, record } from '@sentry-internal/rrweb';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  captureException,\n  getClient,\n  getCurrentScope,\n  spanToJSON,\n} from '@sentry/core';\nimport type { ReplayRecordingMode, Transaction } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport {\n  BUFFER_CHECKOUT_TIME,\n  SESSION_IDLE_EXPIRE_DURATION,\n  SESSION_IDLE_PAUSE_DURATION,\n  SLOW_CLICK_SCROLL_TIMEOUT,\n  SLOW_CLICK_THRESHOLD,\n  WINDOW,\n} from './constants';\nimport { ClickDetector } from './coreHandlers/handleClick';\nimport { handleKeyboardEvent } from './coreHandlers/handleKeyboardEvent';\nimport { setupPerformanceObserver } from './coreHandlers/performanceObserver';\nimport { DEBUG_BUILD } from './debug-build';\nimport { createEventBuffer } from './eventBuffer';\nimport { clearSession } from './session/clearSession';\nimport { loadOrCreateSession } from './session/loadOrCreateSession';\nimport { saveSession } from './session/saveSession';\nimport { shouldRefreshSession } from './session/shouldRefreshSession';\n\nimport type {\n  AddEventResult,\n  AddUpdateCallback,\n  AllPerformanceEntry,\n  AllPerformanceEntryData,\n  EventBuffer,\n  InternalEventContext,\n  PopEventContext,\n  RecordingEvent,\n  RecordingOptions,\n  ReplayBreadcrumbFrame,\n  ReplayCanvasIntegrationOptions,\n  ReplayContainer as ReplayContainerInterface,\n  ReplayPerformanceEntry,\n  ReplayPluginOptions,\n  SendBufferedReplayOptions,\n  Session,\n  SlowClickConfig,\n  Timeouts,\n} from './types';\nimport { ReplayEventTypeCustom } from './types';\nimport { addEvent, addEventSync } from './util/addEvent';\nimport { addGlobalListeners } from './util/addGlobalListeners';\nimport { addMemoryEntry } from './util/addMemoryEntry';\nimport { createBreadcrumb } from './util/createBreadcrumb';\nimport { createPerformanceEntries } from './util/createPerformanceEntries';\nimport { createPerformanceSpans } from './util/createPerformanceSpans';\nimport { debounce } from './util/debounce';\nimport { getHandleRecordingEmit } from './util/handleRecordingEmit';\nimport { isExpired } from './util/isExpired';\nimport { isSessionExpired } from './util/isSessionExpired';\nimport { logInfo, logInfoNextTick } from './util/log';\nimport { sendReplay } from './util/sendReplay';\nimport type { SKIPPED } from './util/throttle';\nimport { THROTTLED, throttle } from './util/throttle';\n\n/**\n * The main replay container class, which holds all the state and methods for recording and sending replays.\n */\nexport class ReplayContainer implements ReplayContainerInterface {\n  public eventBuffer: EventBuffer | null;\n\n  public performanceEntries: AllPerformanceEntry[];\n\n  public replayPerformanceEntries: ReplayPerformanceEntry<AllPerformanceEntryData>[];\n\n  public session: Session | undefined;\n\n  public clickDetector: ClickDetector | undefined;\n\n  /**\n   * Recording can happen in one of three modes:\n   *   - session: Record the whole session, sending it continuously\n   *   - buffer: Always keep the last 60s of recording, requires:\n   *     - having replaysOnErrorSampleRate > 0 to capture replay when an error occurs\n   *     - or calling `flush()` to send the replay\n   */\n  public recordingMode: ReplayRecordingMode;\n\n  /**\n   * The current or last active transcation.\n   * This is only available when performance is enabled.\n   */\n  public lastTransaction?: Transaction;\n\n  /**\n   * These are here so we can overwrite them in tests etc.\n   * @hidden\n   */\n  public readonly timeouts: Timeouts;\n\n  private _throttledAddEvent: (\n    event: RecordingEvent,\n    isCheckout?: boolean,\n  ) => typeof THROTTLED | typeof SKIPPED | Promise<AddEventResult | null>;\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n  private readonly _recordingOptions: RecordingOptions;\n\n  private readonly _options: ReplayPluginOptions;\n\n  private _performanceCleanupCallback?: () => void;\n\n  private _debouncedFlush: ReturnType<typeof debounce>;\n  private _flushLock: Promise<unknown> | undefined;\n\n  /**\n   * Timestamp of the last user activity. This lives across sessions.\n   */\n  private _lastActivity: number;\n\n  /**\n   * Is the integration currently active?\n   */\n  private _isEnabled: boolean;\n\n  /**\n   * Paused is a state where:\n   * - DOM Recording is not listening at all\n   * - Nothing will be added to event buffer (e.g. core SDK events)\n   */\n  private _isPaused: boolean;\n\n  /**\n   * Have we attached listeners to the core SDK?\n   * Note we have to track this as there is no way to remove instrumentation handlers.\n   */\n  private _hasInitializedCoreListeners: boolean;\n\n  /**\n   * Function to stop recording\n   */\n  private _stopRecording: ReturnType<typeof record> | undefined;\n\n  private _context: InternalEventContext;\n\n  /**\n   * Internal use for canvas recording options\n   */\n  private _canvas: ReplayCanvasIntegrationOptions | undefined;\n\n  public constructor({\n    options,\n    recordingOptions,\n  }: {\n    options: ReplayPluginOptions;\n    recordingOptions: RecordingOptions;\n  }) {\n    this.eventBuffer = null;\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n    this.recordingMode = 'session';\n    this.timeouts = {\n      sessionIdlePause: SESSION_IDLE_PAUSE_DURATION,\n      sessionIdleExpire: SESSION_IDLE_EXPIRE_DURATION,\n    } as const;\n    this._lastActivity = Date.now();\n    this._isEnabled = false;\n    this._isPaused = false;\n    this._hasInitializedCoreListeners = false;\n    this._context = {\n      errorIds: new Set(),\n      traceIds: new Set(),\n      urls: [],\n      initialTimestamp: Date.now(),\n      initialUrl: '',\n    };\n\n    this._recordingOptions = recordingOptions;\n    this._options = options;\n\n    this._debouncedFlush = debounce(() => this._flush(), this._options.flushMinDelay, {\n      maxWait: this._options.flushMaxDelay,\n    });\n\n    this._throttledAddEvent = throttle(\n      (event: RecordingEvent, isCheckout?: boolean) => addEvent(this, event, isCheckout),\n      // Max 300 events...\n      300,\n      // ... per 5s\n      5,\n    );\n\n    const { slowClickTimeout, slowClickIgnoreSelectors } = this.getOptions();\n\n    const slowClickConfig: SlowClickConfig | undefined = slowClickTimeout\n      ? {\n          threshold: Math.min(SLOW_CLICK_THRESHOLD, slowClickTimeout),\n          timeout: slowClickTimeout,\n          scrollTimeout: SLOW_CLICK_SCROLL_TIMEOUT,\n          ignoreSelector: slowClickIgnoreSelectors ? slowClickIgnoreSelectors.join(',') : '',\n        }\n      : undefined;\n\n    if (slowClickConfig) {\n      this.clickDetector = new ClickDetector(this, slowClickConfig);\n    }\n  }\n\n  /** Get the event context. */\n  public getContext(): InternalEventContext {\n    return this._context;\n  }\n\n  /** If recording is currently enabled. */\n  public isEnabled(): boolean {\n    return this._isEnabled;\n  }\n\n  /** If recording is currently paused. */\n  public isPaused(): boolean {\n    return this._isPaused;\n  }\n\n  /**\n   * Determine if canvas recording is enabled\n   */\n  public isRecordingCanvas(): boolean {\n    return Boolean(this._canvas);\n  }\n\n  /** Get the replay integration options. */\n  public getOptions(): ReplayPluginOptions {\n    return this._options;\n  }\n\n  /**\n   * Initializes the plugin based on sampling configuration. Should not be\n   * called outside of constructor.\n   */\n  public initializeSampling(previousSessionId?: string): void {\n    const { errorSampleRate, sessionSampleRate } = this._options;\n\n    // If neither sample rate is > 0, then do nothing - user will need to call one of\n    // `start()` or `startBuffering` themselves.\n    if (errorSampleRate <= 0 && sessionSampleRate <= 0) {\n      return;\n    }\n\n    // Otherwise if there is _any_ sample rate set, try to load an existing\n    // session, or create a new one.\n    this._initializeSessionForSampling(previousSessionId);\n\n    if (!this.session) {\n      // This should not happen, something wrong has occurred\n      this._handleException(new Error('Unable to initialize and create session'));\n      return;\n    }\n\n    if (this.session.sampled === false) {\n      // This should only occur if `errorSampleRate` is 0 and was unsampled for\n      // session-based replay. In this case there is nothing to do.\n      return;\n    }\n\n    // If segmentId > 0, it means we've previously already captured this session\n    // In this case, we still want to continue in `session` recording mode\n    this.recordingMode = this.session.sampled === 'buffer' && this.session.segmentId === 0 ? 'buffer' : 'session';\n\n    logInfoNextTick(\n      `[Replay] Starting replay in ${this.recordingMode} mode`,\n      this._options._experiments.traceInternals,\n    );\n\n    this._initializeRecording();\n  }\n\n  /**\n   * Start a replay regardless of sampling rate. Calling this will always\n   * create a new session. Will throw an error if replay is already in progress.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * _performanceObserver, Recording, Sentry SDK, etc)\n   */\n  public start(): void {\n    if (this._isEnabled && this.recordingMode === 'session') {\n      throw new Error('Replay recording is already in progress');\n    }\n\n    if (this._isEnabled && this.recordingMode === 'buffer') {\n      throw new Error('Replay buffering is in progress, call `flush()` to save the replay');\n    }\n\n    logInfoNextTick('[Replay] Starting replay in session mode', this._options._experiments.traceInternals);\n\n    // Required as user activity is initially set in\n    // constructor, so if `start()` is called after\n    // session idle expiration, a replay will not be\n    // created due to an idle timeout.\n    this._updateUserActivity();\n\n    const session = loadOrCreateSession(\n      {\n        maxReplayDuration: this._options.maxReplayDuration,\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        traceInternals: this._options._experiments.traceInternals,\n      },\n      {\n        stickySession: this._options.stickySession,\n        // This is intentional: create a new session-based replay when calling `start()`\n        sessionSampleRate: 1,\n        allowBuffering: false,\n      },\n    );\n\n    this.session = session;\n\n    this._initializeRecording();\n  }\n\n  /**\n   * Start replay buffering. Buffers until `flush()` is called or, if\n   * `replaysOnErrorSampleRate` > 0, an error occurs.\n   */\n  public startBuffering(): void {\n    if (this._isEnabled) {\n      throw new Error('Replay recording is already in progress');\n    }\n\n    logInfoNextTick('[Replay] Starting replay in buffer mode', this._options._experiments.traceInternals);\n\n    const session = loadOrCreateSession(\n      {\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration,\n        traceInternals: this._options._experiments.traceInternals,\n      },\n      {\n        stickySession: this._options.stickySession,\n        sessionSampleRate: 0,\n        allowBuffering: true,\n      },\n    );\n\n    this.session = session;\n\n    this.recordingMode = 'buffer';\n    this._initializeRecording();\n  }\n\n  /**\n   * Start recording.\n   *\n   * Note that this will cause a new DOM checkout\n   */\n  public startRecording(): void {\n    try {\n      const canvasOptions = this._canvas;\n\n      this._stopRecording = record({\n        ...this._recordingOptions,\n        // When running in error sampling mode, we need to overwrite `checkoutEveryNms`\n        // Without this, it would record forever, until an error happens, which we don't want\n        // instead, we'll always keep the last 60 seconds of replay before an error happened\n        ...(this.recordingMode === 'buffer' && { checkoutEveryNms: BUFFER_CHECKOUT_TIME }),\n        emit: getHandleRecordingEmit(this),\n        onMutation: this._onMutationHandler,\n        ...(canvasOptions\n          ? {\n              recordCanvas: canvasOptions.recordCanvas,\n              getCanvasManager: canvasOptions.getCanvasManager,\n              sampling: canvasOptions.sampling,\n              dataURLOptions: canvasOptions.dataURLOptions,\n            }\n          : {}),\n      });\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Stops the recording, if it was running.\n   *\n   * Returns true if it was previously stopped, or is now stopped,\n   * otherwise false.\n   */\n  public stopRecording(): boolean {\n    try {\n      if (this._stopRecording) {\n        this._stopRecording();\n        this._stopRecording = undefined;\n      }\n\n      return true;\n    } catch (err) {\n      this._handleException(err);\n      return false;\n    }\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n  public async stop({ forceFlush = false, reason }: { forceFlush?: boolean; reason?: string } = {}): Promise<void> {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    // We can't move `_isEnabled` after awaiting a flush, otherwise we can\n    // enter into an infinite loop when `stop()` is called while flushing.\n    this._isEnabled = false;\n\n    try {\n      logInfo(\n        `[Replay] Stopping Replay${reason ? ` triggered by ${reason}` : ''}`,\n        this._options._experiments.traceInternals,\n      );\n\n      this._removeListeners();\n      this.stopRecording();\n\n      this._debouncedFlush.cancel();\n      // See comment above re: `_isEnabled`, we \"force\" a flush, ignoring the\n      // `_isEnabled` state of the plugin since it was disabled above.\n      if (forceFlush) {\n        await this._flush({ force: true });\n      }\n\n      // After flush, destroy event buffer\n      this.eventBuffer && this.eventBuffer.destroy();\n      this.eventBuffer = null;\n\n      // Clear session from session storage, note this means if a new session\n      // is started after, it will not have `previousSessionId`\n      clearSession(this);\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Pause some replay functionality. See comments for `_isPaused`.\n   * This differs from stop as this only stops DOM recording, it is\n   * not as thorough of a shutdown as `stop()`.\n   */\n  public pause(): void {\n    if (this._isPaused) {\n      return;\n    }\n\n    this._isPaused = true;\n    this.stopRecording();\n\n    logInfo('[Replay] Pausing replay', this._options._experiments.traceInternals);\n  }\n\n  /**\n   * Resumes recording, see notes for `pause().\n   *\n   * Note that calling `startRecording()` here will cause a\n   * new DOM checkout.`\n   */\n  public resume(): void {\n    if (!this._isPaused || !this._checkSession()) {\n      return;\n    }\n\n    this._isPaused = false;\n    this.startRecording();\n\n    logInfo('[Replay] Resuming replay', this._options._experiments.traceInternals);\n  }\n\n  /**\n   * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n   * Unless `continueRecording` is false, the replay will continue to record and\n   * behave as a \"session\"-based replay.\n   *\n   * Otherwise, queue up a flush.\n   */\n  public async sendBufferedReplayOrFlush({ continueRecording = true }: SendBufferedReplayOptions = {}): Promise<void> {\n    if (this.recordingMode === 'session') {\n      return this.flushImmediate();\n    }\n\n    const activityTime = Date.now();\n\n    logInfo('[Replay] Converting buffer to session', this._options._experiments.traceInternals);\n\n    // Allow flush to complete before resuming as a session recording, otherwise\n    // the checkout from `startRecording` may be included in the payload.\n    // Prefer to keep the error replay as a separate (and smaller) segment\n    // than the session replay.\n    await this.flushImmediate();\n\n    const hasStoppedRecording = this.stopRecording();\n\n    if (!continueRecording || !hasStoppedRecording) {\n      return;\n    }\n\n    // To avoid race conditions where this is called multiple times, we check here again that we are still buffering\n    if ((this.recordingMode as ReplayRecordingMode) === 'session') {\n      return;\n    }\n\n    // Re-start recording in session-mode\n    this.recordingMode = 'session';\n\n    // Once this session ends, we do not want to refresh it\n    if (this.session) {\n      this._updateUserActivity(activityTime);\n      this._updateSessionActivity(activityTime);\n      this._maybeSaveSession();\n    }\n\n    this.startRecording();\n  }\n\n  /**\n   * We want to batch uploads of replay events. Save events only if\n   * `<flushMinDelay>` milliseconds have elapsed since the last event\n   * *OR* if `<flushMaxDelay>` milliseconds have elapsed.\n   *\n   * Accepts a callback to perform side-effects and returns true to stop batch\n   * processing and hand back control to caller.\n   */\n  public addUpdate(cb: AddUpdateCallback): void {\n    // We need to always run `cb` (e.g. in the case of `this.recordingMode == 'buffer'`)\n    const cbResult = cb();\n\n    // If this option is turned on then we will only want to call `flush`\n    // explicitly\n    if (this.recordingMode === 'buffer') {\n      return;\n    }\n\n    // If callback is true, we do not want to continue with flushing -- the\n    // caller will need to handle it.\n    if (cbResult === true) {\n      return;\n    }\n\n    // addUpdate is called quite frequently - use _debouncedFlush so that it\n    // respects the flush delays and does not flush immediately\n    this._debouncedFlush();\n  }\n\n  /**\n   * Updates the user activity timestamp and resumes recording. This should be\n   * called in an event handler for a user action that we consider as the user\n   * being \"active\" (e.g. a mouse click).\n   */\n  public triggerUserActivity(): void {\n    this._updateUserActivity();\n\n    // This case means that recording was once stopped due to inactivity.\n    // Ensure that recording is resumed.\n    if (!this._stopRecording) {\n      // Create a new session, otherwise when the user action is flushed, it\n      // will get rejected due to an expired session.\n      if (!this._checkSession()) {\n        return;\n      }\n\n      // Note: This will cause a new DOM checkout\n      this.resume();\n      return;\n    }\n\n    // Otherwise... recording was never suspended, continue as normalish\n    this.checkAndHandleExpiredSession();\n\n    this._updateSessionActivity();\n  }\n\n  /**\n   * Updates the user activity timestamp *without* resuming\n   * recording. Some user events (e.g. keydown) can be create\n   * low-value replays that only contain the keypress as a\n   * breadcrumb. Instead this would require other events to\n   * create a new replay after a session has expired.\n   */\n  public updateUserActivity(): void {\n    this._updateUserActivity();\n    this._updateSessionActivity();\n  }\n\n  /**\n   * Only flush if `this.recordingMode === 'session'`\n   */\n  public conditionalFlush(): Promise<void> {\n    if (this.recordingMode === 'buffer') {\n      return Promise.resolve();\n    }\n\n    return this.flushImmediate();\n  }\n\n  /**\n   * Flush using debounce flush\n   */\n  public flush(): Promise<void> {\n    return this._debouncedFlush() as Promise<void>;\n  }\n\n  /**\n   * Always flush via `_debouncedFlush` so that we do not have flushes triggered\n   * from calling both `flush` and `_debouncedFlush`. Otherwise, there could be\n   * cases of mulitple flushes happening closely together.\n   */\n  public flushImmediate(): Promise<void> {\n    this._debouncedFlush();\n    // `.flush` is provided by the debounced function, analogously to lodash.debounce\n    return this._debouncedFlush.flush() as Promise<void>;\n  }\n\n  /**\n   * Cancels queued up flushes.\n   */\n  public cancelFlush(): void {\n    this._debouncedFlush.cancel();\n  }\n\n  /** Get the current sesion (=replay) ID */\n  public getSessionId(): string | undefined {\n    return this.session && this.session.id;\n  }\n\n  /**\n   * Checks if recording should be stopped due to user inactivity. Otherwise\n   * check if session is expired and create a new session if so. Triggers a new\n   * full snapshot on new session.\n   *\n   * Returns true if session is not expired, false otherwise.\n   * @hidden\n   */\n  public checkAndHandleExpiredSession(): boolean | void {\n    // Prevent starting a new session if the last user activity is older than\n    // SESSION_IDLE_PAUSE_DURATION. Otherwise non-user activity can trigger a new\n    // session+recording. This creates noisy replays that do not have much\n    // content in them.\n    if (\n      this._lastActivity &&\n      isExpired(this._lastActivity, this.timeouts.sessionIdlePause) &&\n      this.session &&\n      this.session.sampled === 'session'\n    ) {\n      // Pause recording only for session-based replays. Otherwise, resuming\n      // will create a new replay and will conflict with users who only choose\n      // to record error-based replays only. (e.g. the resumed replay will not\n      // contain a reference to an error)\n      this.pause();\n      return;\n    }\n\n    // --- There is recent user activity --- //\n    // This will create a new session if expired, based on expiry length\n    if (!this._checkSession()) {\n      // Check session handles the refreshing itself\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Capture some initial state that can change throughout the lifespan of the\n   * replay. This is required because otherwise they would be captured at the\n   * first flush.\n   */\n  public setInitialState(): void {\n    const urlPath = `${WINDOW.location.pathname}${WINDOW.location.hash}${WINDOW.location.search}`;\n    const url = `${WINDOW.location.origin}${urlPath}`;\n\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n\n    // Reset _context as well\n    this._clearContext();\n\n    this._context.initialUrl = url;\n    this._context.initialTimestamp = Date.now();\n    this._context.urls.push(url);\n  }\n\n  /**\n   * Add a breadcrumb event, that may be throttled.\n   * If it was throttled, we add a custom breadcrumb to indicate that.\n   */\n  public throttledAddEvent(\n    event: RecordingEvent,\n    isCheckout?: boolean,\n  ): typeof THROTTLED | typeof SKIPPED | Promise<AddEventResult | null> {\n    const res = this._throttledAddEvent(event, isCheckout);\n\n    // If this is THROTTLED, it means we have throttled the event for the first time\n    // In this case, we want to add a breadcrumb indicating that something was skipped\n    if (res === THROTTLED) {\n      const breadcrumb = createBreadcrumb({\n        category: 'replay.throttled',\n      });\n\n      this.addUpdate(() => {\n        // Return `false` if the event _was_ added, as that means we schedule a flush\n        return !addEventSync(this, {\n          type: ReplayEventTypeCustom,\n          timestamp: breadcrumb.timestamp || 0,\n          data: {\n            tag: 'breadcrumb',\n            payload: breadcrumb,\n            metric: true,\n          },\n        });\n      });\n    }\n\n    return res;\n  }\n\n  /**\n   * This will get the parametrized route name of the current page.\n   * This is only available if performance is enabled, and if an instrumented router is used.\n   */\n  public getCurrentRoute(): string | undefined {\n    // eslint-disable-next-line deprecation/deprecation\n    const lastTransaction = this.lastTransaction || getCurrentScope().getTransaction();\n\n    const attributes = (lastTransaction && spanToJSON(lastTransaction).data) || {};\n    const source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n    if (!lastTransaction || !source || !['route', 'custom'].includes(source)) {\n      return undefined;\n    }\n\n    return spanToJSON(lastTransaction).description;\n  }\n\n  /**\n   * Initialize and start all listeners to varying events (DOM,\n   * Performance Observer, Recording, Sentry SDK, etc)\n   */\n  private _initializeRecording(): void {\n    this.setInitialState();\n\n    // this method is generally called on page load or manually - in both cases\n    // we should treat it as an activity\n    this._updateSessionActivity();\n\n    this.eventBuffer = createEventBuffer({\n      useCompression: this._options.useCompression,\n      workerUrl: this._options.workerUrl,\n    });\n\n    this._removeListeners();\n    this._addListeners();\n\n    // Need to set as enabled before we start recording, as `record()` can trigger a flush with a new checkout\n    this._isEnabled = true;\n    this._isPaused = false;\n\n    this.startRecording();\n  }\n\n  /** A wrapper to conditionally capture exceptions. */\n  private _handleException(error: unknown): void {\n    DEBUG_BUILD && logger.error('[Replay]', error);\n\n    if (DEBUG_BUILD && this._options._experiments && this._options._experiments.captureExceptions) {\n      captureException(error);\n    }\n  }\n\n  /**\n   * Loads (or refreshes) the current session.\n   */\n  private _initializeSessionForSampling(previousSessionId?: string): void {\n    // Whenever there is _any_ error sample rate, we always allow buffering\n    // Because we decide on sampling when an error occurs, we need to buffer at all times if sampling for errors\n    const allowBuffering = this._options.errorSampleRate > 0;\n\n    const session = loadOrCreateSession(\n      {\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration,\n        traceInternals: this._options._experiments.traceInternals,\n        previousSessionId,\n      },\n      {\n        stickySession: this._options.stickySession,\n        sessionSampleRate: this._options.sessionSampleRate,\n        allowBuffering,\n      },\n    );\n\n    this.session = session;\n  }\n\n  /**\n   * Checks and potentially refreshes the current session.\n   * Returns false if session is not recorded.\n   */\n  private _checkSession(): boolean {\n    // If there is no session yet, we do not want to refresh anything\n    // This should generally not happen, but to be safe....\n    if (!this.session) {\n      return false;\n    }\n\n    const currentSession = this.session;\n\n    if (\n      shouldRefreshSession(currentSession, {\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration,\n      })\n    ) {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._refreshSession(currentSession);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Refresh a session with a new one.\n   * This stops the current session (without forcing a flush, as that would never work since we are expired),\n   * and then does a new sampling based on the refreshed session.\n   */\n  private async _refreshSession(session: Session): Promise<void> {\n    if (!this._isEnabled) {\n      return;\n    }\n    await this.stop({ reason: 'refresh session' });\n    this.initializeSampling(session.id);\n  }\n\n  /**\n   * Adds listeners to record events for the replay\n   */\n  private _addListeners(): void {\n    try {\n      WINDOW.document.addEventListener('visibilitychange', this._handleVisibilityChange);\n      WINDOW.addEventListener('blur', this._handleWindowBlur);\n      WINDOW.addEventListener('focus', this._handleWindowFocus);\n      WINDOW.addEventListener('keydown', this._handleKeyboardEvent);\n\n      if (this.clickDetector) {\n        this.clickDetector.addListeners();\n      }\n\n      // There is no way to remove these listeners, so ensure they are only added once\n      if (!this._hasInitializedCoreListeners) {\n        addGlobalListeners(this);\n\n        this._hasInitializedCoreListeners = true;\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n\n    this._performanceCleanupCallback = setupPerformanceObserver(this);\n  }\n\n  /**\n   * Cleans up listeners that were created in `_addListeners`\n   */\n  private _removeListeners(): void {\n    try {\n      WINDOW.document.removeEventListener('visibilitychange', this._handleVisibilityChange);\n\n      WINDOW.removeEventListener('blur', this._handleWindowBlur);\n      WINDOW.removeEventListener('focus', this._handleWindowFocus);\n      WINDOW.removeEventListener('keydown', this._handleKeyboardEvent);\n\n      if (this.clickDetector) {\n        this.clickDetector.removeListeners();\n      }\n\n      if (this._performanceCleanupCallback) {\n        this._performanceCleanupCallback();\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Handle when visibility of the page content changes. Opening a new tab will\n   * cause the state to change to hidden because of content of current page will\n   * be hidden. Likewise, moving a different window to cover the contents of the\n   * page will also trigger a change to a hidden state.\n   */\n  private _handleVisibilityChange: () => void = () => {\n    if (WINDOW.document.visibilityState === 'visible') {\n      this._doChangeToForegroundTasks();\n    } else {\n      this._doChangeToBackgroundTasks();\n    }\n  };\n\n  /**\n   * Handle when page is blurred\n   */\n  private _handleWindowBlur: () => void = () => {\n    const breadcrumb = createBreadcrumb({\n      category: 'ui.blur',\n    });\n\n    // Do not count blur as a user action -- it's part of the process of them\n    // leaving the page\n    this._doChangeToBackgroundTasks(breadcrumb);\n  };\n\n  /**\n   * Handle when page is focused\n   */\n  private _handleWindowFocus: () => void = () => {\n    const breadcrumb = createBreadcrumb({\n      category: 'ui.focus',\n    });\n\n    // Do not count focus as a user action -- instead wait until they focus and\n    // interactive with page\n    this._doChangeToForegroundTasks(breadcrumb);\n  };\n\n  /** Ensure page remains active when a key is pressed. */\n  private _handleKeyboardEvent: (event: KeyboardEvent) => void = (event: KeyboardEvent) => {\n    handleKeyboardEvent(this, event);\n  };\n\n  /**\n   * Tasks to run when we consider a page to be hidden (via blurring and/or visibility)\n   */\n  private _doChangeToBackgroundTasks(breadcrumb?: ReplayBreadcrumbFrame): void {\n    if (!this.session) {\n      return;\n    }\n\n    const expired = isSessionExpired(this.session, {\n      maxReplayDuration: this._options.maxReplayDuration,\n      sessionIdleExpire: this.timeouts.sessionIdleExpire,\n    });\n\n    if (expired) {\n      return;\n    }\n\n    if (breadcrumb) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n\n    // Send replay when the page/tab becomes hidden. There is no reason to send\n    // replay if it becomes visible, since no actions we care about were done\n    // while it was hidden\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    void this.conditionalFlush();\n  }\n\n  /**\n   * Tasks to run when we consider a page to be visible (via focus and/or visibility)\n   */\n  private _doChangeToForegroundTasks(breadcrumb?: ReplayBreadcrumbFrame): void {\n    if (!this.session) {\n      return;\n    }\n\n    const isSessionActive = this.checkAndHandleExpiredSession();\n\n    if (!isSessionActive) {\n      // If the user has come back to the page within SESSION_IDLE_PAUSE_DURATION\n      // ms, we will re-use the existing session, otherwise create a new\n      // session\n      logInfo('[Replay] Document has become active, but session has expired');\n      return;\n    }\n\n    if (breadcrumb) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n  }\n\n  /**\n   * Update user activity (across session lifespans)\n   */\n  private _updateUserActivity(_lastActivity: number = Date.now()): void {\n    this._lastActivity = _lastActivity;\n  }\n\n  /**\n   * Updates the session's last activity timestamp\n   */\n  private _updateSessionActivity(_lastActivity: number = Date.now()): void {\n    if (this.session) {\n      this.session.lastActivity = _lastActivity;\n      this._maybeSaveSession();\n    }\n  }\n\n  /**\n   * Helper to create (and buffer) a replay breadcrumb from a core SDK breadcrumb\n   */\n  private _createCustomBreadcrumb(breadcrumb: ReplayBreadcrumbFrame): void {\n    this.addUpdate(() => {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.throttledAddEvent({\n        type: EventType.Custom,\n        timestamp: breadcrumb.timestamp || 0,\n        data: {\n          tag: 'breadcrumb',\n          payload: breadcrumb,\n        },\n      });\n    });\n  }\n\n  /**\n   * Observed performance events are added to `this.performanceEntries`. These\n   * are included in the replay event before it is finished and sent to Sentry.\n   */\n  private _addPerformanceEntries(): Promise<Array<AddEventResult | null>> {\n    const performanceEntries = createPerformanceEntries(this.performanceEntries).concat(this.replayPerformanceEntries);\n\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n\n    return Promise.all(createPerformanceSpans(this, performanceEntries));\n  }\n\n  /**\n   * Clear _context\n   */\n  private _clearContext(): void {\n    // XXX: `initialTimestamp` and `initialUrl` do not get cleared\n    this._context.errorIds.clear();\n    this._context.traceIds.clear();\n    this._context.urls = [];\n  }\n\n  /** Update the initial timestamp based on the buffer content. */\n  private _updateInitialTimestampFromEventBuffer(): void {\n    const { session, eventBuffer } = this;\n    if (!session || !eventBuffer) {\n      return;\n    }\n\n    // we only ever update this on the initial segment\n    if (session.segmentId) {\n      return;\n    }\n\n    const earliestEvent = eventBuffer.getEarliestTimestamp();\n    if (earliestEvent && earliestEvent < this._context.initialTimestamp) {\n      this._context.initialTimestamp = earliestEvent;\n    }\n  }\n\n  /**\n   * Return and clear _context\n   */\n  private _popEventContext(): PopEventContext {\n    const _context = {\n      initialTimestamp: this._context.initialTimestamp,\n      initialUrl: this._context.initialUrl,\n      errorIds: Array.from(this._context.errorIds),\n      traceIds: Array.from(this._context.traceIds),\n      urls: this._context.urls,\n    };\n\n    this._clearContext();\n\n    return _context;\n  }\n\n  /**\n   * Flushes replay event buffer to Sentry.\n   *\n   * Performance events are only added right before flushing - this is\n   * due to the buffered performance observer events.\n   *\n   * Should never be called directly, only by `flush`\n   */\n  private async _runFlush(): Promise<void> {\n    const replayId = this.getSessionId();\n\n    if (!this.session || !this.eventBuffer || !replayId) {\n      DEBUG_BUILD && logger.error('[Replay] No session or eventBuffer found to flush.');\n      return;\n    }\n\n    await this._addPerformanceEntries();\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer || !this.eventBuffer.hasEvents) {\n      return;\n    }\n\n    // Only attach memory event if eventBuffer is not empty\n    await addMemoryEntry(this);\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer) {\n      return;\n    }\n\n    // if this changed in the meanwhile, e.g. because the session was refreshed or similar, we abort here\n    if (replayId !== this.getSessionId()) {\n      return;\n    }\n\n    try {\n      // This uses the data from the eventBuffer, so we need to call this before `finish()\n      this._updateInitialTimestampFromEventBuffer();\n\n      const timestamp = Date.now();\n\n      // Check total duration again, to avoid sending outdated stuff\n      // We leave 30s wiggle room to accomodate late flushing etc.\n      // This _could_ happen when the browser is suspended during flushing, in which case we just want to stop\n      if (timestamp - this._context.initialTimestamp > this._options.maxReplayDuration + 30_000) {\n        throw new Error('Session is too long, not sending replay');\n      }\n\n      const eventContext = this._popEventContext();\n      // Always increment segmentId regardless of outcome of sending replay\n      const segmentId = this.session.segmentId++;\n      this._maybeSaveSession();\n\n      // Note this empties the event buffer regardless of outcome of sending replay\n      const recordingData = await this.eventBuffer.finish();\n\n      await sendReplay({\n        replayId,\n        recordingData,\n        segmentId,\n        eventContext,\n        session: this.session,\n        options: this.getOptions(),\n        timestamp,\n      });\n    } catch (err) {\n      this._handleException(err);\n\n      // This means we retried 3 times and all of them failed,\n      // or we ran into a problem we don't want to retry, like rate limiting.\n      // In this case, we want to completely stop the replay - otherwise, we may get inconsistent segments\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.stop({ reason: 'sendReplay' });\n\n      const client = getClient();\n\n      if (client) {\n        client.recordDroppedEvent('send_error', 'replay');\n      }\n    }\n  }\n\n  /**\n   * Flush recording data to Sentry. Creates a lock so that only a single flush\n   * can be active at a time. Do not call this directly.\n   */\n  private _flush = async ({\n    force = false,\n  }: {\n    /**\n     * If true, flush while ignoring the `_isEnabled` state of\n     * Replay integration. (By default, flush is noop if integration\n     * is stopped).\n     */\n    force?: boolean;\n  } = {}): Promise<void> => {\n    if (!this._isEnabled && !force) {\n      // This can happen if e.g. the replay was stopped because of exceeding the retry limit\n      return;\n    }\n\n    if (!this.checkAndHandleExpiredSession()) {\n      DEBUG_BUILD && logger.error('[Replay] Attempting to finish replay event after session expired.');\n      return;\n    }\n\n    if (!this.session) {\n      // should never happen, as we would have bailed out before\n      return;\n    }\n\n    const start = this.session.started;\n    const now = Date.now();\n    const duration = now - start;\n\n    // A flush is about to happen, cancel any queued flushes\n    this._debouncedFlush.cancel();\n\n    // If session is too short, or too long (allow some wiggle room over maxReplayDuration), do not send it\n    // This _should_ not happen, but it may happen if flush is triggered due to a page activity change or similar\n    const tooShort = duration < this._options.minReplayDuration;\n    const tooLong = duration > this._options.maxReplayDuration + 5_000;\n    if (tooShort || tooLong) {\n      logInfo(\n        `[Replay] Session duration (${Math.floor(duration / 1000)}s) is too ${\n          tooShort ? 'short' : 'long'\n        }, not sending replay.`,\n        this._options._experiments.traceInternals,\n      );\n\n      if (tooShort) {\n        this._debouncedFlush();\n      }\n      return;\n    }\n\n    const eventBuffer = this.eventBuffer;\n    if (eventBuffer && this.session.segmentId === 0 && !eventBuffer.hasCheckout) {\n      logInfo('[Replay] Flushing initial segment without checkout.', this._options._experiments.traceInternals);\n      // TODO FN: Evaluate if we want to stop here, or remove this again?\n    }\n\n    // this._flushLock acts as a lock so that future calls to `_flush()`\n    // will be blocked until this promise resolves\n    if (!this._flushLock) {\n      this._flushLock = this._runFlush();\n      await this._flushLock;\n      this._flushLock = undefined;\n      return;\n    }\n\n    // Wait for previous flush to finish, then call the debounced `_flush()`.\n    // It's possible there are other flush requests queued and waiting for it\n    // to resolve. We want to reduce all outstanding requests (as well as any\n    // new flush requests that occur within a second of the locked flush\n    // completing) into a single flush.\n\n    try {\n      await this._flushLock;\n    } catch (err) {\n      DEBUG_BUILD && logger.error(err);\n    } finally {\n      this._debouncedFlush();\n    }\n  };\n\n  /** Save the session, if it is sticky */\n  private _maybeSaveSession(): void {\n    if (this.session && this._options.stickySession) {\n      saveSession(this.session);\n    }\n  }\n\n  /** Handler for rrweb.record.onMutation */\n  private _onMutationHandler = (mutations: unknown[]): boolean => {\n    const count = mutations.length;\n\n    const mutationLimit = this._options.mutationLimit;\n    const mutationBreadcrumbLimit = this._options.mutationBreadcrumbLimit;\n    const overMutationLimit = mutationLimit && count > mutationLimit;\n\n    // Create a breadcrumb if a lot of mutations happen at the same time\n    // We can show this in the UI as an information with potential performance improvements\n    if (count > mutationBreadcrumbLimit || overMutationLimit) {\n      const breadcrumb = createBreadcrumb({\n        category: 'replay.mutations',\n        data: {\n          count,\n          limit: overMutationLimit,\n        },\n      });\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n\n    // Stop replay if over the mutation limit\n    if (overMutationLimit) {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.stop({ reason: 'mutationLimit', forceFlush: this.recordingMode === 'session' });\n      return false;\n    }\n\n    // `true` means we use the regular mutation handling by rrweb\n    return true;\n  };\n}\n","import { consoleSandbox } from '@sentry/utils';\n\nimport type { DeprecatedPrivacyOptions, ReplayIntegrationPrivacyOptions } from '../types';\n\ntype GetPrivacyOptions = Required<Omit<ReplayIntegrationPrivacyOptions, 'maskFn'>> &\n  Omit<DeprecatedPrivacyOptions, 'maskInputOptions'>;\ninterface GetPrivacyReturn {\n  maskTextSelector: string;\n  unmaskTextSelector: string;\n  blockSelector: string;\n  unblockSelector: string;\n  ignoreSelector: string;\n\n  blockClass?: RegExp;\n  maskTextClass?: RegExp;\n}\n\nfunction getOption(\n  selectors: string[],\n  defaultSelectors: string[],\n  deprecatedClassOption?: string | RegExp,\n  deprecatedSelectorOption?: string,\n): string {\n  const deprecatedSelectors = typeof deprecatedSelectorOption === 'string' ? deprecatedSelectorOption.split(',') : [];\n\n  const allSelectors = [\n    ...selectors,\n    // @deprecated\n    ...deprecatedSelectors,\n\n    // sentry defaults\n    ...defaultSelectors,\n  ];\n\n  // @deprecated\n  if (typeof deprecatedClassOption !== 'undefined') {\n    // NOTE: No support for RegExp\n    if (typeof deprecatedClassOption === 'string') {\n      allSelectors.push(`.${deprecatedClassOption}`);\n    }\n\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Replay] You are using a deprecated configuration item for privacy. Read the documentation on how to use the new privacy configuration.',\n      );\n    });\n  }\n\n  return allSelectors.join(',');\n}\n\n/**\n * Returns privacy related configuration for use in rrweb\n */\nexport function getPrivacyOptions({\n  mask,\n  unmask,\n  block,\n  unblock,\n  ignore,\n\n  // eslint-disable-next-line deprecation/deprecation\n  blockClass,\n  // eslint-disable-next-line deprecation/deprecation\n  blockSelector,\n  // eslint-disable-next-line deprecation/deprecation\n  maskTextClass,\n  // eslint-disable-next-line deprecation/deprecation\n  maskTextSelector,\n  // eslint-disable-next-line deprecation/deprecation\n  ignoreClass,\n}: GetPrivacyOptions): GetPrivacyReturn {\n  const defaultBlockedElements = ['base[href=\"/\"]'];\n\n  const maskSelector = getOption(mask, ['.sentry-mask', '[data-sentry-mask]'], maskTextClass, maskTextSelector);\n  const unmaskSelector = getOption(unmask, ['.sentry-unmask', '[data-sentry-unmask]']);\n\n  const options: GetPrivacyReturn = {\n    // We are making the decision to make text and input selectors the same\n    maskTextSelector: maskSelector,\n    unmaskTextSelector: unmaskSelector,\n\n    blockSelector: getOption(\n      block,\n      ['.sentry-block', '[data-sentry-block]', ...defaultBlockedElements],\n      blockClass,\n      blockSelector,\n    ),\n    unblockSelector: getOption(unblock, ['.sentry-unblock', '[data-sentry-unblock]']),\n    ignoreSelector: getOption(ignore, ['.sentry-ignore', '[data-sentry-ignore]', 'input[type=\"file\"]'], ignoreClass),\n  };\n\n  if (blockClass instanceof RegExp) {\n    options.blockClass = blockClass;\n  }\n\n  if (maskTextClass instanceof RegExp) {\n    options.maskTextClass = maskTextClass;\n  }\n\n  return options;\n}\n","import type { getPrivacyOptions } from './getPrivacyOptions';\n\ninterface MaskAttributeParams {\n  maskAttributes: string[];\n  maskAllText: boolean;\n  privacyOptions: ReturnType<typeof getPrivacyOptions>;\n  key: string;\n  value: string;\n  el: HTMLElement;\n}\n\n/**\n * Masks an attribute if necessary, otherwise return attribute value as-is.\n */\nexport function maskAttribute({\n  el,\n  key,\n  maskAttributes,\n  maskAllText,\n  privacyOptions,\n  value,\n}: MaskAttributeParams): string {\n  // We only mask attributes if `maskAllText` is true\n  if (!maskAllText) {\n    return value;\n  }\n\n  // unmaskTextSelector takes precendence\n  if (privacyOptions.unmaskTextSelector && el.matches(privacyOptions.unmaskTextSelector)) {\n    return value;\n  }\n\n  if (\n    maskAttributes.includes(key) ||\n    // Need to mask `value` attribute for `<input>` if it's a button-like\n    // type\n    (key === 'value' && el.tagName === 'INPUT' && ['submit', 'button'].includes(el.getAttribute('type') || ''))\n  ) {\n    return value.replace(/[\\S]/g, '*');\n  }\n\n  return value;\n}\n","import { getClient } from '@sentry/core';\nimport type { BrowserClientReplayOptions, Integration, IntegrationFn } from '@sentry/types';\nimport { consoleSandbox, dropUndefinedKeys, isBrowser } from '@sentry/utils';\n\nimport {\n  DEFAULT_FLUSH_MAX_DELAY,\n  DEFAULT_FLUSH_MIN_DELAY,\n  MAX_REPLAY_DURATION,\n  MIN_REPLAY_DURATION,\n  MIN_REPLAY_DURATION_LIMIT,\n} from './constants';\nimport { ReplayContainer } from './replay';\nimport type {\n  RecordingOptions,\n  ReplayCanvasIntegrationOptions,\n  ReplayConfiguration,\n  ReplayPluginOptions,\n  SendBufferedReplayOptions,\n} from './types';\nimport { getPrivacyOptions } from './util/getPrivacyOptions';\nimport { maskAttribute } from './util/maskAttribute';\n\nconst MEDIA_SELECTORS =\n  'img,image,svg,video,object,picture,embed,map,audio,link[rel=\"icon\"],link[rel=\"apple-touch-icon\"]';\n\nconst DEFAULT_NETWORK_HEADERS = ['content-length', 'content-type', 'accept'];\n\nlet _initialized = false;\n\ntype InitialReplayPluginOptions = Omit<ReplayPluginOptions, 'sessionSampleRate' | 'errorSampleRate'> &\n  Partial<Pick<ReplayPluginOptions, 'sessionSampleRate' | 'errorSampleRate'>>;\n\nexport const replayIntegration = ((options?: ReplayConfiguration) => {\n  // eslint-disable-next-line deprecation/deprecation\n  return new Replay(options);\n}) satisfies IntegrationFn;\n\n/**\n * The main replay integration class, to be passed to `init({  integrations: [] })`.\n * @deprecated Use `replayIntegration()` instead.\n */\nexport class Replay implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Replay';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n  private readonly _recordingOptions: RecordingOptions;\n\n  /**\n   * Initial options passed to the replay integration, merged with default values.\n   * Note: `sessionSampleRate` and `errorSampleRate` are not required here, as they\n   * can only be finally set when setupOnce() is called.\n   *\n   * @private\n   */\n  private readonly _initialOptions: InitialReplayPluginOptions;\n\n  private _replay?: ReplayContainer;\n\n  public constructor({\n    flushMinDelay = DEFAULT_FLUSH_MIN_DELAY,\n    flushMaxDelay = DEFAULT_FLUSH_MAX_DELAY,\n    minReplayDuration = MIN_REPLAY_DURATION,\n    maxReplayDuration = MAX_REPLAY_DURATION,\n    stickySession = true,\n    useCompression = true,\n    workerUrl,\n    _experiments = {},\n    sessionSampleRate,\n    errorSampleRate,\n    maskAllText = true,\n    maskAllInputs = true,\n    blockAllMedia = true,\n\n    mutationBreadcrumbLimit = 750,\n    mutationLimit = 10_000,\n\n    slowClickTimeout = 7_000,\n    slowClickIgnoreSelectors = [],\n\n    networkDetailAllowUrls = [],\n    networkDetailDenyUrls = [],\n    networkCaptureBodies = true,\n    networkRequestHeaders = [],\n    networkResponseHeaders = [],\n\n    mask = [],\n    maskAttributes = ['title', 'placeholder'],\n    unmask = [],\n    block = [],\n    unblock = [],\n    ignore = [],\n    maskFn,\n\n    beforeAddRecordingEvent,\n    beforeErrorSampling,\n\n    // eslint-disable-next-line deprecation/deprecation\n    blockClass,\n    // eslint-disable-next-line deprecation/deprecation\n    blockSelector,\n    // eslint-disable-next-line deprecation/deprecation\n    maskInputOptions,\n    // eslint-disable-next-line deprecation/deprecation\n    maskTextClass,\n    // eslint-disable-next-line deprecation/deprecation\n    maskTextSelector,\n    // eslint-disable-next-line deprecation/deprecation\n    ignoreClass,\n  }: ReplayConfiguration = {}) {\n    // eslint-disable-next-line deprecation/deprecation\n    this.name = Replay.id;\n\n    const privacyOptions = getPrivacyOptions({\n      mask,\n      unmask,\n      block,\n      unblock,\n      ignore,\n      blockClass,\n      blockSelector,\n      maskTextClass,\n      maskTextSelector,\n      ignoreClass,\n    });\n\n    this._recordingOptions = {\n      maskAllInputs,\n      maskAllText,\n      maskInputOptions: { ...(maskInputOptions || {}), password: true },\n      maskTextFn: maskFn,\n      maskInputFn: maskFn,\n      maskAttributeFn: (key: string, value: string, el: HTMLElement): string =>\n        maskAttribute({\n          maskAttributes,\n          maskAllText,\n          privacyOptions,\n          key,\n          value,\n          el,\n        }),\n\n      ...privacyOptions,\n\n      // Our defaults\n      slimDOMOptions: 'all',\n      inlineStylesheet: true,\n      // Disable inline images as it will increase segment/replay size\n      inlineImages: false,\n      // collect fonts, but be aware that `sentry.io` needs to be an allowed\n      // origin for playback\n      collectFonts: true,\n      errorHandler: (err: Error & { __rrweb__?: boolean }) => {\n        try {\n          err.__rrweb__ = true;\n        } catch (error) {\n          // ignore errors here\n          // this can happen if the error is frozen or does not allow mutation for other reasons\n        }\n      },\n    };\n\n    this._initialOptions = {\n      flushMinDelay,\n      flushMaxDelay,\n      minReplayDuration: Math.min(minReplayDuration, MIN_REPLAY_DURATION_LIMIT),\n      maxReplayDuration: Math.min(maxReplayDuration, MAX_REPLAY_DURATION),\n      stickySession,\n      sessionSampleRate,\n      errorSampleRate,\n      useCompression,\n      workerUrl,\n      blockAllMedia,\n      maskAllInputs,\n      maskAllText,\n      mutationBreadcrumbLimit,\n      mutationLimit,\n      slowClickTimeout,\n      slowClickIgnoreSelectors,\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders: _getMergedNetworkHeaders(networkRequestHeaders),\n      networkResponseHeaders: _getMergedNetworkHeaders(networkResponseHeaders),\n      beforeAddRecordingEvent,\n      beforeErrorSampling,\n\n      _experiments,\n    };\n\n    if (typeof sessionSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(\n        `[Replay] You are passing \\`sessionSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysSessionSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysSessionSampleRate: ${sessionSampleRate} })`,\n      );\n\n      this._initialOptions.sessionSampleRate = sessionSampleRate;\n    }\n\n    if (typeof errorSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(\n        `[Replay] You are passing \\`errorSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysOnErrorSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysOnErrorSampleRate: ${errorSampleRate} })`,\n      );\n\n      this._initialOptions.errorSampleRate = errorSampleRate;\n    }\n\n    if (this._initialOptions.blockAllMedia) {\n      // `blockAllMedia` is a more user friendly option to configure blocking\n      // embedded media elements\n      this._recordingOptions.blockSelector = !this._recordingOptions.blockSelector\n        ? MEDIA_SELECTORS\n        : `${this._recordingOptions.blockSelector},${MEDIA_SELECTORS}`;\n    }\n\n    if (this._isInitialized && isBrowser()) {\n      throw new Error('Multiple Sentry Session Replay instances are not supported');\n    }\n\n    this._isInitialized = true;\n  }\n\n  /** If replay has already been initialized */\n  protected get _isInitialized(): boolean {\n    return _initialized;\n  }\n\n  /** Update _isInitialized */\n  protected set _isInitialized(value: boolean) {\n    _initialized = value;\n  }\n\n  /**\n   * Setup and initialize replay container\n   */\n  public setupOnce(): void {\n    if (!isBrowser()) {\n      return;\n    }\n\n    this._setup();\n\n    // Once upon a time, we tried to create a transaction in `setupOnce` and it would\n    // potentially create a transaction before some native SDK integrations have run\n    // and applied their own global event processor. An example is:\n    // https://github.com/getsentry/sentry-javascript/blob/b47ceafbdac7f8b99093ce6023726ad4687edc48/packages/browser/src/integrations/useragent.ts\n    //\n    // So we call `this._initialize()` in next event loop as a workaround to wait for other\n    // global event processors to finish. This is no longer needed, but keeping it\n    // here to avoid any future issues.\n    setTimeout(() => this._initialize());\n  }\n\n  /**\n   * Start a replay regardless of sampling rate. Calling this will always\n   * create a new session. Will throw an error if replay is already in progress.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * PerformanceObserver, Recording, Sentry SDK, etc)\n   */\n  public start(): void {\n    if (!this._replay) {\n      return;\n    }\n\n    this._replay.start();\n  }\n\n  /**\n   * Start replay buffering. Buffers until `flush()` is called or, if\n   * `replaysOnErrorSampleRate` > 0, until an error occurs.\n   */\n  public startBuffering(): void {\n    if (!this._replay) {\n      return;\n    }\n\n    this._replay.startBuffering();\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n  public stop(): Promise<void> {\n    if (!this._replay) {\n      return Promise.resolve();\n    }\n\n    return this._replay.stop({ forceFlush: this._replay.recordingMode === 'session' });\n  }\n\n  /**\n   * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n   * Unless `continueRecording` is false, the replay will continue to record and\n   * behave as a \"session\"-based replay.\n   *\n   * Otherwise, queue up a flush.\n   */\n  public flush(options?: SendBufferedReplayOptions): Promise<void> {\n    if (!this._replay || !this._replay.isEnabled()) {\n      return Promise.resolve();\n    }\n\n    return this._replay.sendBufferedReplayOrFlush(options);\n  }\n\n  /**\n   * Get the current session ID.\n   */\n  public getReplayId(): string | undefined {\n    if (!this._replay || !this._replay.isEnabled()) {\n      return;\n    }\n\n    return this._replay.getSessionId();\n  }\n\n  /**\n   * Initializes replay.\n   */\n  protected _initialize(): void {\n    if (!this._replay) {\n      return;\n    }\n\n    // We have to run this in _initialize, because this runs in setTimeout\n    // So when this runs all integrations have been added\n    // Before this, we cannot access integrations on the client,\n    // so we need to mutate the options here\n    this._maybeLoadFromReplayCanvasIntegration();\n\n    this._replay.initializeSampling();\n  }\n\n  /** Setup the integration. */\n  private _setup(): void {\n    // Client is not available in constructor, so we need to wait until setupOnce\n    const finalOptions = loadReplayOptionsFromClient(this._initialOptions);\n\n    this._replay = new ReplayContainer({\n      options: finalOptions,\n      recordingOptions: this._recordingOptions,\n    });\n  }\n\n  /** Get canvas options from ReplayCanvas integration, if it is also added. */\n  private _maybeLoadFromReplayCanvasIntegration(): void {\n    // To save bundle size, we skip checking for stuff here\n    // and instead just try-catch everything - as generally this should all be defined\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n    try {\n      const client = getClient()!;\n      const canvasIntegration = client.getIntegrationByName!('ReplayCanvas') as Integration & {\n        getOptions(): ReplayCanvasIntegrationOptions;\n      };\n      if (!canvasIntegration) {\n        return;\n      }\n\n      this._replay!['_canvas'] = canvasIntegration.getOptions();\n    } catch {\n      // ignore errors here\n    }\n    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n  }\n}\n\n/** Parse Replay-related options from SDK options */\nfunction loadReplayOptionsFromClient(initialOptions: InitialReplayPluginOptions): ReplayPluginOptions {\n  const client = getClient();\n  const opt = client && (client.getOptions() as BrowserClientReplayOptions);\n\n  const finalOptions = { sessionSampleRate: 0, errorSampleRate: 0, ...dropUndefinedKeys(initialOptions) };\n\n  if (!opt) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('SDK client is not available.');\n    });\n    return finalOptions;\n  }\n\n  if (\n    initialOptions.sessionSampleRate == null && // TODO remove once deprecated rates are removed\n    initialOptions.errorSampleRate == null && // TODO remove once deprecated rates are removed\n    opt.replaysSessionSampleRate == null &&\n    opt.replaysOnErrorSampleRate == null\n  ) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Replay is disabled because neither `replaysSessionSampleRate` nor `replaysOnErrorSampleRate` are set.',\n      );\n    });\n  }\n\n  if (typeof opt.replaysSessionSampleRate === 'number') {\n    finalOptions.sessionSampleRate = opt.replaysSessionSampleRate;\n  }\n\n  if (typeof opt.replaysOnErrorSampleRate === 'number') {\n    finalOptions.errorSampleRate = opt.replaysOnErrorSampleRate;\n  }\n\n  return finalOptions;\n}\n\nfunction _getMergedNetworkHeaders(headers: string[]): string[] {\n  return [...DEFAULT_NETWORK_HEADERS, ...headers.map(header => header.toLowerCase())];\n}\n","import { getClient } from '@sentry/core';\nimport type { replayIntegration } from '../integration';\n\n/**\n * This is a small utility to get a type-safe instance of the Replay integration.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function getReplay(): ReturnType<typeof replayIntegration> | undefined {\n  const client = getClient();\n  return (\n    client && client.getIntegrationByName && client.getIntegrationByName<ReturnType<typeof replayIntegration>>('Replay')\n  );\n}\n","// eslint-disable-next-line deprecation/deprecation\nimport { Replay as InternalReplay, replayIntegration as internalReplayIntegration } from './integration';\nimport type {\n  CanvasManagerInterface as InternalCanvasManagerInterface,\n  CanvasManagerOptions as InternalCanvasManagerOptions,\n  ReplayBreadcrumbFrame as InternalReplayBreadcrumbFrame,\n  ReplayBreadcrumbFrameEvent as InternalReplayBreadcrumbFrameEvent,\n  ReplayConfiguration as InternalReplayConfiguration,\n  ReplayEventType as InternalReplayEventType,\n  ReplayEventWithTime as InternalReplayEventWithTime,\n  ReplayFrame as InternalReplayFrame,\n  ReplayFrameEvent as InternalReplayFrameEvent,\n  ReplayOptionFrameEvent as InternalReplayOptionFrameEvent,\n  ReplaySpanFrame as InternalReplaySpanFrame,\n  ReplaySpanFrameEvent as InternalReplaySpanFrameEvent,\n} from './types';\nimport { getReplay as internalGetReplay } from './util/getReplay';\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\nconst getReplay = internalGetReplay;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\nconst replayIntegration = internalReplayIntegration;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\n// eslint-disable-next-line deprecation/deprecation\nclass Replay extends InternalReplay {}\n\n// eslint-disable-next-line deprecation/deprecation\nexport { replayIntegration, getReplay, Replay, internalReplayIntegration, internalGetReplay, InternalReplay };\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\ntype ReplayConfiguration = InternalReplayConfiguration;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\ntype ReplayEventType = InternalReplayEventType;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\ntype ReplayEventWithTime = InternalReplayEventWithTime;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\ntype ReplayBreadcrumbFrame = InternalReplayBreadcrumbFrame;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\ntype ReplayBreadcrumbFrameEvent = InternalReplayBreadcrumbFrameEvent;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\ntype ReplayOptionFrameEvent = InternalReplayOptionFrameEvent;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\ntype ReplayFrame = InternalReplayFrame;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\ntype ReplayFrameEvent = InternalReplayFrameEvent;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\ntype ReplaySpanFrame = InternalReplaySpanFrame;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\ntype ReplaySpanFrameEvent = InternalReplaySpanFrameEvent;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\ntype CanvasManagerInterface = InternalCanvasManagerInterface;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\ntype CanvasManagerOptions = InternalCanvasManagerOptions;\n\nexport type {\n  // eslint-disable-next-line deprecation/deprecation\n  CanvasManagerInterface,\n  // eslint-disable-next-line deprecation/deprecation\n  CanvasManagerOptions,\n  // eslint-disable-next-line deprecation/deprecation\n  ReplayBreadcrumbFrame,\n  // eslint-disable-next-line deprecation/deprecation\n  ReplayBreadcrumbFrameEvent,\n  // eslint-disable-next-line deprecation/deprecation\n  ReplayConfiguration,\n  // eslint-disable-next-line deprecation/deprecation\n  ReplayEventType,\n  // eslint-disable-next-line deprecation/deprecation\n  ReplayEventWithTime,\n  // eslint-disable-next-line deprecation/deprecation\n  ReplayFrame,\n  // eslint-disable-next-line deprecation/deprecation\n  ReplayFrameEvent,\n  // eslint-disable-next-line deprecation/deprecation\n  ReplayOptionFrameEvent,\n  // eslint-disable-next-line deprecation/deprecation\n  ReplaySpanFrame,\n  // eslint-disable-next-line deprecation/deprecation\n  ReplaySpanFrameEvent,\n  InternalCanvasManagerInterface,\n  InternalCanvasManagerOptions,\n  InternalReplayBreadcrumbFrame,\n  InternalReplayBreadcrumbFrameEvent,\n  InternalReplayConfiguration,\n  InternalReplayEventType,\n  InternalReplayEventWithTime,\n  InternalReplayFrame,\n  InternalReplayFrameEvent,\n  InternalReplayOptionFrameEvent,\n  InternalReplaySpanFrame,\n  InternalReplaySpanFrameEvent,\n};\n\n// TODO (v8): Remove deprecated types\nexport * from './types/deprecated';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}