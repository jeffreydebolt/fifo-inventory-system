{"ast":null,"code":"import { tracingContextFromHeaders, logger, dropUndefinedKeys, addNonEnumerableProperty } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { getCurrentHub, runWithAsyncContext, getIsolationScope } from '../hub.js';\nimport { spanToJSON, spanIsSampled, spanTimeInputToSeconds } from '../utils/spanUtils.js';\nimport './errors.js';\nimport './spanstatus.js';\nimport { getDynamicSamplingContextFromSpan } from './dynamicSamplingContext.js';\nimport { getCurrentScope, withScope } from '../exports.js';\nimport { handleCallbackErrors } from '../utils/handleCallbackErrors.js';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled.js';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n *\n * This function is meant to be used internally and may break at any time. Use at your own risk.\n *\n * @internal\n * @private\n *\n * @deprecated Use `startSpan` instead.\n */\nfunction trace(context, callback) {\n  let onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  let afterFinish = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => {};\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = getCurrentHub();\n  const scope = getCurrentScope();\n  // eslint-disable-next-line deprecation/deprecation\n  const parentSpan = scope.getSpan();\n  const spanContext = normalizeContext(context);\n  const activeSpan = createChildSpanOrTransaction(hub, {\n    parentSpan,\n    spanContext,\n    forceTransaction: false,\n    scope\n  });\n\n  // eslint-disable-next-line deprecation/deprecation\n  scope.setSpan(activeSpan);\n  return handleCallbackErrors(() => callback(activeSpan), error => {\n    activeSpan && activeSpan.setStatus('internal_error');\n    onError(error, activeSpan);\n  }, () => {\n    activeSpan && activeSpan.end();\n    // eslint-disable-next-line deprecation/deprecation\n    scope.setSpan(parentSpan);\n    afterFinish();\n  });\n}\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nfunction startSpan(context, callback) {\n  const spanContext = normalizeContext(context);\n  return runWithAsyncContext(() => {\n    return withScope(context.scope, scope => {\n      // eslint-disable-next-line deprecation/deprecation\n      const hub = getCurrentHub();\n      // eslint-disable-next-line deprecation/deprecation\n      const parentSpan = scope.getSpan();\n      const shouldSkipSpan = context.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan ? undefined : createChildSpanOrTransaction(hub, {\n        parentSpan,\n        spanContext,\n        forceTransaction: context.forceTransaction,\n        scope\n      });\n      return handleCallbackErrors(() => callback(activeSpan), () => {\n        // Only update the span status if it hasn't been changed yet\n        if (activeSpan) {\n          const {\n            status\n          } = spanToJSON(activeSpan);\n          if (!status || status === 'ok') {\n            activeSpan.setStatus('internal_error');\n          }\n        }\n      }, () => activeSpan && activeSpan.end());\n    });\n  });\n}\n\n/**\n * @deprecated Use {@link startSpan} instead.\n */\nconst startActiveSpan = startSpan;\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nfunction startSpanManual(context, callback) {\n  const spanContext = normalizeContext(context);\n  return runWithAsyncContext(() => {\n    return withScope(context.scope, scope => {\n      // eslint-disable-next-line deprecation/deprecation\n      const hub = getCurrentHub();\n      // eslint-disable-next-line deprecation/deprecation\n      const parentSpan = scope.getSpan();\n      const shouldSkipSpan = context.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan ? undefined : createChildSpanOrTransaction(hub, {\n        parentSpan,\n        spanContext,\n        forceTransaction: context.forceTransaction,\n        scope\n      });\n      function finishAndSetSpan() {\n        activeSpan && activeSpan.end();\n      }\n      return handleCallbackErrors(() => callback(activeSpan, finishAndSetSpan), () => {\n        // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n        if (activeSpan && activeSpan.isRecording()) {\n          const {\n            status\n          } = spanToJSON(activeSpan);\n          if (!status || status === 'ok') {\n            activeSpan.setStatus('internal_error');\n          }\n        }\n      });\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate` or `tracesSampler`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nfunction startInactiveSpan(context) {\n  if (!hasTracingEnabled()) {\n    return undefined;\n  }\n  const spanContext = normalizeContext(context);\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = getCurrentHub();\n  const parentSpan = context.scope ?\n  // eslint-disable-next-line deprecation/deprecation\n  context.scope.getSpan() : getActiveSpan();\n  const shouldSkipSpan = context.onlyIfParent && !parentSpan;\n  if (shouldSkipSpan) {\n    return undefined;\n  }\n  const scope = context.scope || getCurrentScope();\n\n  // Even though we don't actually want to make this span active on the current scope,\n  // we need to make it active on a temporary scope that we use for event processing\n  // as otherwise, it won't pick the correct span for the event when processing it\n  const temporaryScope = scope.clone();\n  return createChildSpanOrTransaction(hub, {\n    parentSpan,\n    spanContext,\n    forceTransaction: context.forceTransaction,\n    scope: temporaryScope\n  });\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentScope().getSpan();\n}\nconst continueTrace = (_ref, callback) => {\n  let {\n    sentryTrace,\n    baggage\n  } = _ref;\n  // TODO(v8): Change this function so it doesn't do anything besides setting the propagation context on the current scope:\n  /*\n    return withScope((scope) => {\n      const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n      scope.setPropagationContext(propagationContext);\n      return callback();\n    })\n  */\n\n  const currentScope = getCurrentScope();\n\n  // eslint-disable-next-line deprecation/deprecation\n  const {\n    traceparentData,\n    dynamicSamplingContext,\n    propagationContext\n  } = tracingContextFromHeaders(sentryTrace, baggage);\n  currentScope.setPropagationContext(propagationContext);\n  if (DEBUG_BUILD && traceparentData) {\n    logger.log(`[Tracing] Continuing trace ${traceparentData.traceId}.`);\n  }\n  const transactionContext = {\n    ...traceparentData,\n    metadata: dropUndefinedKeys({\n      dynamicSamplingContext\n    })\n  };\n  if (!callback) {\n    return transactionContext;\n  }\n  return runWithAsyncContext(() => {\n    return callback(transactionContext);\n  });\n};\nfunction createChildSpanOrTransaction(\n// eslint-disable-next-line deprecation/deprecation\nhub, _ref2) {\n  let {\n    parentSpan,\n    spanContext,\n    forceTransaction,\n    scope\n  } = _ref2;\n  if (!hasTracingEnabled()) {\n    return undefined;\n  }\n  const isolationScope = getIsolationScope();\n  let span;\n  if (parentSpan && !forceTransaction) {\n    // eslint-disable-next-line deprecation/deprecation\n    span = parentSpan.startChild(spanContext);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = getDynamicSamplingContextFromSpan(parentSpan);\n    const {\n      traceId,\n      spanId: parentSpanId\n    } = parentSpan.spanContext();\n    const sampled = spanIsSampled(parentSpan);\n\n    // eslint-disable-next-line deprecation/deprecation\n    span = hub.startTransaction({\n      traceId,\n      parentSpanId,\n      parentSampled: sampled,\n      ...spanContext,\n      metadata: {\n        dynamicSamplingContext: dsc,\n        // eslint-disable-next-line deprecation/deprecation\n        ...spanContext.metadata\n      }\n    });\n  } else {\n    const {\n      traceId,\n      dsc,\n      parentSpanId,\n      sampled\n    } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext()\n    };\n\n    // eslint-disable-next-line deprecation/deprecation\n    span = hub.startTransaction({\n      traceId,\n      parentSpanId,\n      parentSampled: sampled,\n      ...spanContext,\n      metadata: {\n        dynamicSamplingContext: dsc,\n        // eslint-disable-next-line deprecation/deprecation\n        ...spanContext.metadata\n      }\n    });\n  }\n\n  // We always set this as active span on the scope\n  // In the case of this being an inactive span, we ensure to pass a detached scope in here in the first place\n  // But by having this here, we can ensure that the lookup through `getCapturedScopesOnSpan` results in the correct scope & span combo\n  // eslint-disable-next-line deprecation/deprecation\n  scope.setSpan(span);\n  setCapturedScopesOnSpan(span, scope, isolationScope);\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to TransactionContext.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n *\n * Eventually the StartSpanOptions will be more aligned with OpenTelemetry.\n */\nfunction normalizeContext(context) {\n  if (context.startTime) {\n    const ctx = {\n      ...context\n    };\n    ctx.startTimestamp = spanTimeInputToSeconds(context.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n  return context;\n}\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\nfunction setCapturedScopesOnSpan(span, scope, isolationScope) {\n  if (span) {\n    addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nfunction getCapturedScopesOnSpan(span) {\n  return {\n    scope: span[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: span[ISOLATION_SCOPE_ON_START_SPAN_FIELD]\n  };\n}\nexport { continueTrace, getActiveSpan, getCapturedScopesOnSpan, startActiveSpan, startInactiveSpan, startSpan, startSpanManual, trace };","map":{"version":3,"names":["trace","context","callback","onError","arguments","length","undefined","afterFinish","hub","getCurrentHub","scope","getCurrentScope","parentSpan","getSpan","spanContext","normalizeContext","activeSpan","createChildSpanOrTransaction","forceTransaction","setSpan","handleCallbackErrors","error","setStatus","end","startSpan","runWithAsyncContext","withScope","shouldSkipSpan","onlyIfParent","status","spanToJSON","startActiveSpan","startSpanManual","finishAndSetSpan","isRecording","startInactiveSpan","hasTracingEnabled","getActiveSpan","temporaryScope","clone","continueTrace","_ref","sentryTrace","baggage","currentScope","traceparentData","dynamicSamplingContext","propagationContext","tracingContextFromHeaders","setPropagationContext","DEBUG_BUILD","logger","log","traceId","transactionContext","metadata","dropUndefinedKeys","_ref2","isolationScope","getIsolationScope","span","startChild","dsc","getDynamicSamplingContextFromSpan","spanId","parentSpanId","sampled","spanIsSampled","startTransaction","parentSampled","getPropagationContext","setCapturedScopesOnSpan","startTime","ctx","startTimestamp","spanTimeInputToSeconds","SCOPE_ON_START_SPAN_FIELD","ISOLATION_SCOPE_ON_START_SPAN_FIELD","addNonEnumerableProperty","getCapturedScopesOnSpan"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/@sentry/src/tracing/trace.ts"],"sourcesContent":["import type { Scope, Span, SpanTimeInput, StartSpanOptions, TransactionContext } from '@sentry/types';\n\nimport { addNonEnumerableProperty, dropUndefinedKeys, logger, tracingContextFromHeaders } from '@sentry/utils';\nimport { getDynamicSamplingContextFromSpan } from '.';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { getCurrentScope, withScope } from '../exports';\nimport type { Hub } from '../hub';\nimport { runWithAsyncContext } from '../hub';\nimport { getIsolationScope } from '../hub';\nimport { getCurrentHub } from '../hub';\nimport type { Scope as ScopeClass } from '../scope';\nimport { handleCallbackErrors } from '../utils/handleCallbackErrors';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled';\nimport { spanIsSampled, spanTimeInputToSeconds, spanToJSON } from '../utils/spanUtils';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n *\n * This function is meant to be used internally and may break at any time. Use at your own risk.\n *\n * @internal\n * @private\n *\n * @deprecated Use `startSpan` instead.\n */\nexport function trace<T>(\n  context: TransactionContext,\n  callback: (span?: Span) => T,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onError: (error: unknown, span?: Span) => void = () => {},\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  afterFinish: () => void = () => {},\n): T {\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = getCurrentHub();\n  const scope = getCurrentScope();\n  // eslint-disable-next-line deprecation/deprecation\n  const parentSpan = scope.getSpan();\n\n  const spanContext = normalizeContext(context);\n  const activeSpan = createChildSpanOrTransaction(hub, {\n    parentSpan,\n    spanContext,\n    forceTransaction: false,\n    scope,\n  });\n\n  // eslint-disable-next-line deprecation/deprecation\n  scope.setSpan(activeSpan);\n\n  return handleCallbackErrors(\n    () => callback(activeSpan),\n    error => {\n      activeSpan && activeSpan.setStatus('internal_error');\n      onError(error, activeSpan);\n    },\n    () => {\n      activeSpan && activeSpan.end();\n      // eslint-disable-next-line deprecation/deprecation\n      scope.setSpan(parentSpan);\n      afterFinish();\n    },\n  );\n}\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nexport function startSpan<T>(context: StartSpanOptions, callback: (span: Span | undefined) => T): T {\n  const spanContext = normalizeContext(context);\n\n  return runWithAsyncContext(() => {\n    return withScope(context.scope, scope => {\n      // eslint-disable-next-line deprecation/deprecation\n      const hub = getCurrentHub();\n      // eslint-disable-next-line deprecation/deprecation\n      const parentSpan = scope.getSpan();\n\n      const shouldSkipSpan = context.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? undefined\n        : createChildSpanOrTransaction(hub, {\n            parentSpan,\n            spanContext,\n            forceTransaction: context.forceTransaction,\n            scope,\n          });\n\n      return handleCallbackErrors(\n        () => callback(activeSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet\n          if (activeSpan) {\n            const { status } = spanToJSON(activeSpan);\n            if (!status || status === 'ok') {\n              activeSpan.setStatus('internal_error');\n            }\n          }\n        },\n        () => activeSpan && activeSpan.end(),\n      );\n    });\n  });\n}\n\n/**\n * @deprecated Use {@link startSpan} instead.\n */\nexport const startActiveSpan = startSpan;\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nexport function startSpanManual<T>(\n  context: StartSpanOptions,\n  callback: (span: Span | undefined, finish: () => void) => T,\n): T {\n  const spanContext = normalizeContext(context);\n\n  return runWithAsyncContext(() => {\n    return withScope(context.scope, scope => {\n      // eslint-disable-next-line deprecation/deprecation\n      const hub = getCurrentHub();\n      // eslint-disable-next-line deprecation/deprecation\n      const parentSpan = scope.getSpan();\n\n      const shouldSkipSpan = context.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? undefined\n        : createChildSpanOrTransaction(hub, {\n            parentSpan,\n            spanContext,\n            forceTransaction: context.forceTransaction,\n            scope,\n          });\n\n      function finishAndSetSpan(): void {\n        activeSpan && activeSpan.end();\n      }\n\n      return handleCallbackErrors(\n        () => callback(activeSpan, finishAndSetSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          if (activeSpan && activeSpan.isRecording()) {\n            const { status } = spanToJSON(activeSpan);\n            if (!status || status === 'ok') {\n              activeSpan.setStatus('internal_error');\n            }\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate` or `tracesSampler`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nexport function startInactiveSpan(context: StartSpanOptions): Span | undefined {\n  if (!hasTracingEnabled()) {\n    return undefined;\n  }\n\n  const spanContext = normalizeContext(context);\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = getCurrentHub();\n  const parentSpan = context.scope\n    ? // eslint-disable-next-line deprecation/deprecation\n      context.scope.getSpan()\n    : getActiveSpan();\n\n  const shouldSkipSpan = context.onlyIfParent && !parentSpan;\n\n  if (shouldSkipSpan) {\n    return undefined;\n  }\n\n  const scope = context.scope || getCurrentScope();\n\n  // Even though we don't actually want to make this span active on the current scope,\n  // we need to make it active on a temporary scope that we use for event processing\n  // as otherwise, it won't pick the correct span for the event when processing it\n  const temporaryScope = (scope as ScopeClass).clone();\n\n  return createChildSpanOrTransaction(hub, {\n    parentSpan,\n    spanContext,\n    forceTransaction: context.forceTransaction,\n    scope: temporaryScope,\n  });\n}\n\n/**\n * Returns the currently active span.\n */\nexport function getActiveSpan(): Span | undefined {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentScope().getSpan();\n}\n\ninterface ContinueTrace {\n  /**\n   * Continue a trace from `sentry-trace` and `baggage` values.\n   * These values can be obtained from incoming request headers,\n   * or in the browser from `<meta name=\"sentry-trace\">` and `<meta name=\"baggage\">` HTML tags.\n   *\n   * @deprecated Use the version of this function taking a callback as second parameter instead:\n   *\n   * ```\n   * Sentry.continueTrace(sentryTrace: '...', baggage: '...' }, () => {\n   *    // ...\n   * })\n   * ```\n   *\n   */\n  ({\n    sentryTrace,\n    baggage,\n  }: {\n    // eslint-disable-next-line deprecation/deprecation\n    sentryTrace: Parameters<typeof tracingContextFromHeaders>[0];\n    // eslint-disable-next-line deprecation/deprecation\n    baggage: Parameters<typeof tracingContextFromHeaders>[1];\n  }): Partial<TransactionContext>;\n\n  /**\n   * Continue a trace from `sentry-trace` and `baggage` values.\n   * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n   * and `<meta name=\"baggage\">` HTML tags.\n   *\n   * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n   * be attached to the incoming trace.\n   *\n   * Deprecation notice: In the next major version of the SDK the provided callback will not receive a transaction\n   * context argument.\n   */\n  <V>(\n    {\n      sentryTrace,\n      baggage,\n    }: {\n      // eslint-disable-next-line deprecation/deprecation\n      sentryTrace: Parameters<typeof tracingContextFromHeaders>[0];\n      // eslint-disable-next-line deprecation/deprecation\n      baggage: Parameters<typeof tracingContextFromHeaders>[1];\n    },\n    // TODO(v8): Remove parameter from this callback.\n    callback: (transactionContext: Partial<TransactionContext>) => V,\n  ): V;\n}\n\nexport const continueTrace: ContinueTrace = <V>(\n  {\n    sentryTrace,\n    baggage,\n  }: {\n    // eslint-disable-next-line deprecation/deprecation\n    sentryTrace: Parameters<typeof tracingContextFromHeaders>[0];\n    // eslint-disable-next-line deprecation/deprecation\n    baggage: Parameters<typeof tracingContextFromHeaders>[1];\n  },\n  callback?: (transactionContext: Partial<TransactionContext>) => V,\n): V | Partial<TransactionContext> => {\n  // TODO(v8): Change this function so it doesn't do anything besides setting the propagation context on the current scope:\n  /*\n    return withScope((scope) => {\n      const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n      scope.setPropagationContext(propagationContext);\n      return callback();\n    })\n  */\n\n  const currentScope = getCurrentScope();\n\n  // eslint-disable-next-line deprecation/deprecation\n  const { traceparentData, dynamicSamplingContext, propagationContext } = tracingContextFromHeaders(\n    sentryTrace,\n    baggage,\n  );\n\n  currentScope.setPropagationContext(propagationContext);\n\n  if (DEBUG_BUILD && traceparentData) {\n    logger.log(`[Tracing] Continuing trace ${traceparentData.traceId}.`);\n  }\n\n  const transactionContext: Partial<TransactionContext> = {\n    ...traceparentData,\n    metadata: dropUndefinedKeys({\n      dynamicSamplingContext,\n    }),\n  };\n\n  if (!callback) {\n    return transactionContext;\n  }\n\n  return runWithAsyncContext(() => {\n    return callback(transactionContext);\n  });\n};\n\nfunction createChildSpanOrTransaction(\n  // eslint-disable-next-line deprecation/deprecation\n  hub: Hub,\n  {\n    parentSpan,\n    spanContext,\n    forceTransaction,\n    scope,\n  }: {\n    parentSpan: Span | undefined;\n    spanContext: TransactionContext;\n    forceTransaction?: boolean;\n    scope: Scope;\n  },\n): Span | undefined {\n  if (!hasTracingEnabled()) {\n    return undefined;\n  }\n\n  const isolationScope = getIsolationScope();\n\n  let span: Span | undefined;\n  if (parentSpan && !forceTransaction) {\n    // eslint-disable-next-line deprecation/deprecation\n    span = parentSpan.startChild(spanContext);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = getDynamicSamplingContextFromSpan(parentSpan);\n    const { traceId, spanId: parentSpanId } = parentSpan.spanContext();\n    const sampled = spanIsSampled(parentSpan);\n\n    // eslint-disable-next-line deprecation/deprecation\n    span = hub.startTransaction({\n      traceId,\n      parentSpanId,\n      parentSampled: sampled,\n      ...spanContext,\n      metadata: {\n        dynamicSamplingContext: dsc,\n        // eslint-disable-next-line deprecation/deprecation\n        ...spanContext.metadata,\n      },\n    });\n  } else {\n    const { traceId, dsc, parentSpanId, sampled } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext(),\n    };\n\n    // eslint-disable-next-line deprecation/deprecation\n    span = hub.startTransaction({\n      traceId,\n      parentSpanId,\n      parentSampled: sampled,\n      ...spanContext,\n      metadata: {\n        dynamicSamplingContext: dsc,\n        // eslint-disable-next-line deprecation/deprecation\n        ...spanContext.metadata,\n      },\n    });\n  }\n\n  // We always set this as active span on the scope\n  // In the case of this being an inactive span, we ensure to pass a detached scope in here in the first place\n  // But by having this here, we can ensure that the lookup through `getCapturedScopesOnSpan` results in the correct scope & span combo\n  // eslint-disable-next-line deprecation/deprecation\n  scope.setSpan(span);\n\n  setCapturedScopesOnSpan(span, scope, isolationScope);\n\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to TransactionContext.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n *\n * Eventually the StartSpanOptions will be more aligned with OpenTelemetry.\n */\nfunction normalizeContext(context: StartSpanOptions): TransactionContext {\n  if (context.startTime) {\n    const ctx: TransactionContext & { startTime?: SpanTimeInput } = { ...context };\n    ctx.startTimestamp = spanTimeInputToSeconds(context.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n\n  return context;\n}\n\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\ntype SpanWithScopes = Span & {\n  [SCOPE_ON_START_SPAN_FIELD]?: Scope;\n  [ISOLATION_SCOPE_ON_START_SPAN_FIELD]?: Scope;\n};\n\nfunction setCapturedScopesOnSpan(span: Span | undefined, scope: Scope, isolationScope: Scope): void {\n  if (span) {\n    addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nexport function getCapturedScopesOnSpan(span: Span): { scope?: Scope; isolationScope?: Scope } {\n  return {\n    scope: (span as SpanWithScopes)[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: (span as SpanWithScopes)[ISOLATION_SCOPE_ON_START_SPAN_FIELD],\n  };\n}\n"],"mappings":";;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,KAAKA,CACnBC,OAAO,EACPC,QAAQ,EAKL;EAAA,IAHHC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA0C,MAAM,EAAE;EAAA,IAEzDG,WAAW,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAe,MAAM,EAAE;EAEpC;EACE,MAAMI,GAAA,GAAMC,aAAa,EAAE;EAC3B,MAAMC,KAAA,GAAQC,eAAe,EAAE;EACjC;EACE,MAAMC,UAAW,GAAEF,KAAK,CAACG,OAAO,EAAE;EAElC,MAAMC,WAAY,GAAEC,gBAAgB,CAACd,OAAO,CAAC;EAC7C,MAAMe,UAAW,GAAEC,4BAA4B,CAACT,GAAG,EAAE;IACnDI,UAAU;IACVE,WAAW;IACXI,gBAAgB,EAAE,KAAK;IACvBR;EACJ,CAAG,CAAC;;EAEJ;EACEA,KAAK,CAACS,OAAO,CAACH,UAAU,CAAC;EAEzB,OAAOI,oBAAoB,CACzB,MAAMlB,QAAQ,CAACc,UAAU,CAAC,EAC1BK,KAAA,IAAS;IACPL,UAAA,IAAcA,UAAU,CAACM,SAAS,CAAC,gBAAgB,CAAC;IACpDnB,OAAO,CAACkB,KAAK,EAAEL,UAAU,CAAC;EAChC,CAAK,EACD,MAAM;IACJA,UAAA,IAAcA,UAAU,CAACO,GAAG,EAAE;IACpC;IACMb,KAAK,CAACS,OAAO,CAACP,UAAU,CAAC;IACzBL,WAAW,EAAE;EACnB,CACA,CAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASiB,SAASA,CAAIvB,OAAO,EAAoBC,QAAQ,EAAoC;EAClG,MAAMY,WAAY,GAAEC,gBAAgB,CAACd,OAAO,CAAC;EAE7C,OAAOwB,mBAAmB,CAAC,MAAM;IAC/B,OAAOC,SAAS,CAACzB,OAAO,CAACS,KAAK,EAAEA,KAAA,IAAS;MAC7C;MACM,MAAMF,GAAA,GAAMC,aAAa,EAAE;MACjC;MACM,MAAMG,UAAW,GAAEF,KAAK,CAACG,OAAO,EAAE;MAElC,MAAMc,cAAA,GAAiB1B,OAAO,CAAC2B,YAAa,IAAG,CAAChB,UAAU;MAC1D,MAAMI,UAAA,GAAaW,cAAA,GACfrB,SAAA,GACAW,4BAA4B,CAACT,GAAG,EAAE;QAChCI,UAAU;QACVE,WAAW;QACXI,gBAAgB,EAAEjB,OAAO,CAACiB,gBAAgB;QAC1CR;MACZ,CAAW,CAAC;MAEN,OAAOU,oBAAoB,CACzB,MAAMlB,QAAQ,CAACc,UAAU,CAAC,EAC1B,MAAM;QACd;QACU,IAAIA,UAAU,EAAE;UACd,MAAM;YAAEa;UAAO,IAAIC,UAAU,CAACd,UAAU,CAAC;UACzC,IAAI,CAACa,MAAA,IAAUA,MAAO,KAAI,IAAI,EAAE;YAC9Bb,UAAU,CAACM,SAAS,CAAC,gBAAgB,CAAC;UACpD;QACA;MACA,CAAS,EACD,MAAMN,UAAA,IAAcA,UAAU,CAACO,GAAG,EAC1C,CAAO;IACP,CAAK,CAAC;EACN,CAAG,CAAC;AACJ;;AAEA;AACA;AACA;AACO,MAAMQ,eAAgB,GAAEP,SAAA;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASQ,eAAeA,CAC7B/B,OAAO,EACPC,QAAQ,EACL;EACH,MAAMY,WAAY,GAAEC,gBAAgB,CAACd,OAAO,CAAC;EAE7C,OAAOwB,mBAAmB,CAAC,MAAM;IAC/B,OAAOC,SAAS,CAACzB,OAAO,CAACS,KAAK,EAAEA,KAAA,IAAS;MAC7C;MACM,MAAMF,GAAA,GAAMC,aAAa,EAAE;MACjC;MACM,MAAMG,UAAW,GAAEF,KAAK,CAACG,OAAO,EAAE;MAElC,MAAMc,cAAA,GAAiB1B,OAAO,CAAC2B,YAAa,IAAG,CAAChB,UAAU;MAC1D,MAAMI,UAAA,GAAaW,cAAA,GACfrB,SAAA,GACAW,4BAA4B,CAACT,GAAG,EAAE;QAChCI,UAAU;QACVE,WAAW;QACXI,gBAAgB,EAAEjB,OAAO,CAACiB,gBAAgB;QAC1CR;MACZ,CAAW,CAAC;MAEN,SAASuB,gBAAgBA,CAAA,EAAS;QAChCjB,UAAA,IAAcA,UAAU,CAACO,GAAG,EAAE;MACtC;MAEM,OAAOH,oBAAoB,CACzB,MAAMlB,QAAQ,CAACc,UAAU,EAAEiB,gBAAgB,CAAC,EAC5C,MAAM;QACd;QACU,IAAIjB,UAAW,IAAGA,UAAU,CAACkB,WAAW,EAAE,EAAE;UAC1C,MAAM;YAAEL;UAAO,IAAIC,UAAU,CAACd,UAAU,CAAC;UACzC,IAAI,CAACa,MAAA,IAAUA,MAAO,KAAI,IAAI,EAAE;YAC9Bb,UAAU,CAACM,SAAS,CAAC,gBAAgB,CAAC;UACpD;QACA;MACA,CACA,CAAO;IACP,CAAK,CAAC;EACN,CAAG,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASa,iBAAiBA,CAAClC,OAAO,EAAsC;EAC7E,IAAI,CAACmC,iBAAiB,EAAE,EAAE;IACxB,OAAO9B,SAAS;EACpB;EAEE,MAAMQ,WAAY,GAAEC,gBAAgB,CAACd,OAAO,CAAC;EAC/C;EACE,MAAMO,GAAA,GAAMC,aAAa,EAAE;EAC3B,MAAMG,UAAA,GAAaX,OAAO,CAACS,KAAA;EAC7B;EACMT,OAAO,CAACS,KAAK,CAACG,OAAO,EAAC,GACtBwB,aAAa,EAAE;EAEnB,MAAMV,cAAA,GAAiB1B,OAAO,CAAC2B,YAAa,IAAG,CAAChB,UAAU;EAE1D,IAAIe,cAAc,EAAE;IAClB,OAAOrB,SAAS;EACpB;EAEE,MAAMI,KAAA,GAAQT,OAAO,CAACS,KAAM,IAAGC,eAAe,EAAE;;EAElD;EACA;EACA;EACE,MAAM2B,cAAA,GAAkB5B,KAAA,CAAqB6B,KAAK,EAAE;EAEpD,OAAOtB,4BAA4B,CAACT,GAAG,EAAE;IACvCI,UAAU;IACVE,WAAW;IACXI,gBAAgB,EAAEjB,OAAO,CAACiB,gBAAgB;IAC1CR,KAAK,EAAE4B;EACX,CAAG,CAAC;AACJ;;AAEA;AACA;AACA;AACO,SAASD,aAAaA,CAAA,EAAqB;EAClD;EACE,OAAO1B,eAAe,EAAE,CAACE,OAAO,EAAE;AACpC;AAqDO,MAAM2B,aAAa,GAAkBA,CAAAC,IAAA,EAU1CvC,QAAQ,KAC4B;EAAA,IAVpC;IACEwC,WAAW;IACXC;EACJ,CAAG,GAAAF,IAAA;EAQH;EACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,MAAMG,YAAA,GAAejC,eAAe,EAAE;;EAExC;EACE,MAAM;IAAEkC,eAAe;IAAEC,sBAAsB;IAAEC;EAAA,CAAqB,GAAEC,yBAAyB,CAC/FN,WAAW,EACXC,OACJ,CAAG;EAEDC,YAAY,CAACK,qBAAqB,CAACF,kBAAkB,CAAC;EAEtD,IAAIG,WAAY,IAAGL,eAAe,EAAE;IAClCM,MAAM,CAACC,GAAG,CAAC,8BAA8BP,eAAe,CAACQ,OAAO,GAAG,CAAC;EACxE;EAEE,MAAMC,kBAAkB,GAAgC;IACtD,GAAGT,eAAe;IAClBU,QAAQ,EAAEC,iBAAiB,CAAC;MAC1BV;IACN,CAAK;EACL,CAAG;EAED,IAAI,CAAC5C,QAAQ,EAAE;IACb,OAAOoD,kBAAkB;EAC7B;EAEE,OAAO7B,mBAAmB,CAAC,MAAM;IAC/B,OAAOvB,QAAQ,CAACoD,kBAAkB,CAAC;EACvC,CAAG,CAAC;AACJ;AAEA,SAASrC,4BAA4BA;AACrC;AACET,GAAG,EAAAiD,KAAA,EAYe;EAAA,IAXlB;IACE7C,UAAU;IACVE,WAAW;IACXI,gBAAgB;IAChBR;EACJ,CAAG,GAAA+C,KAAA;EAOD,IAAI,CAACrB,iBAAiB,EAAE,EAAE;IACxB,OAAO9B,SAAS;EACpB;EAEE,MAAMoD,cAAA,GAAiBC,iBAAiB,EAAE;EAE1C,IAAIC,IAAI;EACR,IAAIhD,UAAA,IAAc,CAACM,gBAAgB,EAAE;IACvC;IACI0C,IAAA,GAAOhD,UAAU,CAACiD,UAAU,CAAC/C,WAAW,CAAC;EAC7C,CAAI,MAAK,IAAIF,UAAU,EAAE;IACzB;IACI,MAAMkD,GAAI,GAAEC,iCAAiC,CAACnD,UAAU,CAAC;IACzD,MAAM;MAAEyC,OAAO;MAAEW,MAAM,EAAEC;IAAa,IAAIrD,UAAU,CAACE,WAAW,EAAE;IAClE,MAAMoD,OAAQ,GAAEC,aAAa,CAACvD,UAAU,CAAC;;IAE7C;IACIgD,IAAK,GAAEpD,GAAG,CAAC4D,gBAAgB,CAAC;MAC1Bf,OAAO;MACPY,YAAY;MACZI,aAAa,EAAEH,OAAO;MACtB,GAAGpD,WAAW;MACdyC,QAAQ,EAAE;QACRT,sBAAsB,EAAEgB,GAAG;QACnC;QACQ,GAAGhD,WAAW,CAACyC;MACvB;IACA,CAAK,CAAC;EACN,OAAS;IACL,MAAM;MAAEF,OAAO;MAAES,GAAG;MAAEG,YAAY;MAAEC;IAAQ,IAAI;MAC9C,GAAGR,cAAc,CAACY,qBAAqB,EAAE;MACzC,GAAG5D,KAAK,CAAC4D,qBAAqB;IACpC,CAAK;;IAEL;IACIV,IAAK,GAAEpD,GAAG,CAAC4D,gBAAgB,CAAC;MAC1Bf,OAAO;MACPY,YAAY;MACZI,aAAa,EAAEH,OAAO;MACtB,GAAGpD,WAAW;MACdyC,QAAQ,EAAE;QACRT,sBAAsB,EAAEgB,GAAG;QACnC;QACQ,GAAGhD,WAAW,CAACyC;MACvB;IACA,CAAK,CAAC;EACN;;EAEA;EACA;EACA;EACA;EACE7C,KAAK,CAACS,OAAO,CAACyC,IAAI,CAAC;EAEnBW,uBAAuB,CAACX,IAAI,EAAElD,KAAK,EAAEgD,cAAc,CAAC;EAEpD,OAAOE,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS7C,gBAAgBA,CAACd,OAAO,EAAwC;EACvE,IAAIA,OAAO,CAACuE,SAAS,EAAE;IACrB,MAAMC,GAAG,GAAuD;MAAE,GAAGxE;IAAA,CAAS;IAC9EwE,GAAG,CAACC,cAAe,GAAEC,sBAAsB,CAAC1E,OAAO,CAACuE,SAAS,CAAC;IAC9D,OAAOC,GAAG,CAACD,SAAS;IACpB,OAAOC,GAAG;EACd;EAEE,OAAOxE,OAAO;AAChB;AAEA,MAAM2E,yBAAA,GAA4B,cAAc;AAChD,MAAMC,mCAAA,GAAsC,uBAAuB;AAOnE,SAASN,uBAAuBA,CAACX,IAAI,EAAoBlD,KAAK,EAASgD,cAAc,EAAe;EAClG,IAAIE,IAAI,EAAE;IACRkB,wBAAwB,CAAClB,IAAI,EAAEiB,mCAAmC,EAAEnB,cAAc,CAAC;IACnFoB,wBAAwB,CAAClB,IAAI,EAAEgB,yBAAyB,EAAElE,KAAK,CAAC;EACpE;AACA;;AAEA;AACA;AACA;AACO,SAASqE,uBAAuBA,CAACnB,IAAI,EAAmD;EAC7F,OAAO;IACLlD,KAAK,EAAGkD,IAAA,CAAwBgB,yBAAyB,CAAC;IAC1DlB,cAAc,EAAGE,IAAA,CAAwBiB,mCAAmC;EAChF,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}