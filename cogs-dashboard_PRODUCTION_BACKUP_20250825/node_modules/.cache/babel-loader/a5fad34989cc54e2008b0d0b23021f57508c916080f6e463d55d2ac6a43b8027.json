{"ast":null,"code":"import { defineIntegration, convertIntegrationFnToClass } from '@sentry/core';\nimport { relative, basename } from '@sentry/utils';\nconst INTEGRATION_NAME = 'RewriteFrames';\nconst _rewriteFramesIntegration = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const root = options.root;\n  const prefix = options.prefix || 'app:///';\n  const iteratee = options.iteratee || (frame => {\n    if (!frame.filename) {\n      return frame;\n    }\n    // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\\`\n    const isWindowsFrame = /^[a-zA-Z]:\\\\/.test(frame.filename) ||\n    // or the presence of a backslash without a forward slash (which are not allowed on Windows)\n    frame.filename.includes('\\\\') && !frame.filename.includes('/');\n    // Check if the frame filename begins with `/`\n    const startsWithSlash = /^\\//.test(frame.filename);\n    if (isWindowsFrame || startsWithSlash) {\n      const filename = isWindowsFrame ? frame.filename.replace(/^[a-zA-Z]:/, '') // remove Windows-style prefix\n      .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n      : frame.filename;\n      const base = root ? relative(root, filename) : basename(filename);\n      frame.filename = `${prefix}${base}`;\n    }\n    return frame;\n  });\n\n  /** Process an exception event. */\n  function _processExceptionsEvent(event) {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception.values.map(value => ({\n            ...value,\n            ...(value.stacktrace && {\n              stacktrace: _processStacktrace(value.stacktrace)\n            })\n          }))\n        }\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** Process a stack trace. */\n  function _processStacktrace(stacktrace) {\n    return {\n      ...stacktrace,\n      frames: stacktrace && stacktrace.frames && stacktrace.frames.map(f => iteratee(f))\n    };\n  }\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {},\n    // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(originalEvent) {\n      let processedEvent = originalEvent;\n      if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n        processedEvent = _processExceptionsEvent(processedEvent);\n      }\n      return processedEvent;\n    }\n  };\n};\nconst rewriteFramesIntegration = defineIntegration(_rewriteFramesIntegration);\n\n/**\n * Rewrite event frames paths.\n * @deprecated Use `rewriteFramesIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst RewriteFrames = convertIntegrationFnToClass(INTEGRATION_NAME, rewriteFramesIntegration);\nexport { RewriteFrames, rewriteFramesIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","_rewriteFramesIntegration","options","arguments","length","undefined","root","prefix","iteratee","frame","filename","isWindowsFrame","test","includes","startsWithSlash","replace","base","relative","basename","_processExceptionsEvent","event","exception","values","map","value","stacktrace","_processStacktrace","_oO","frames","f","name","setupOnce","processEvent","originalEvent","processedEvent","Array","isArray","rewriteFramesIntegration","defineIntegration","RewriteFrames","convertIntegrationFnToClass"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/rewriteframes.ts"],"sourcesContent":["import { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport type { Event, Integration, IntegrationClass, IntegrationFn, StackFrame, Stacktrace } from '@sentry/types';\nimport { basename, relative } from '@sentry/utils';\n\ntype StackFrameIteratee = (frame: StackFrame) => StackFrame;\n\nconst INTEGRATION_NAME = 'RewriteFrames';\n\ninterface RewriteFramesOptions {\n  root?: string;\n  prefix?: string;\n  iteratee?: StackFrameIteratee;\n}\n\nconst _rewriteFramesIntegration = ((options: RewriteFramesOptions = {}) => {\n  const root = options.root;\n  const prefix = options.prefix || 'app:///';\n\n  const iteratee: StackFrameIteratee =\n    options.iteratee ||\n    ((frame: StackFrame) => {\n      if (!frame.filename) {\n        return frame;\n      }\n      // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\\`\n      const isWindowsFrame =\n        /^[a-zA-Z]:\\\\/.test(frame.filename) ||\n        // or the presence of a backslash without a forward slash (which are not allowed on Windows)\n        (frame.filename.includes('\\\\') && !frame.filename.includes('/'));\n      // Check if the frame filename begins with `/`\n      const startsWithSlash = /^\\//.test(frame.filename);\n      if (isWindowsFrame || startsWithSlash) {\n        const filename = isWindowsFrame\n          ? frame.filename\n              .replace(/^[a-zA-Z]:/, '') // remove Windows-style prefix\n              .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n          : frame.filename;\n        const base = root ? relative(root, filename) : basename(filename);\n        frame.filename = `${prefix}${base}`;\n      }\n      return frame;\n    });\n\n  /** Process an exception event. */\n  function _processExceptionsEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception!.values!.map(value => ({\n            ...value,\n            ...(value.stacktrace && { stacktrace: _processStacktrace(value.stacktrace) }),\n          })),\n        },\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** Process a stack trace. */\n  function _processStacktrace(stacktrace?: Stacktrace): Stacktrace {\n    return {\n      ...stacktrace,\n      frames: stacktrace && stacktrace.frames && stacktrace.frames.map(f => iteratee(f)),\n    };\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(originalEvent) {\n      let processedEvent = originalEvent;\n\n      if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n        processedEvent = _processExceptionsEvent(processedEvent);\n      }\n\n      return processedEvent;\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const rewriteFramesIntegration = defineIntegration(_rewriteFramesIntegration);\n\n/**\n * Rewrite event frames paths.\n * @deprecated Use `rewriteFramesIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const RewriteFrames = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  rewriteFramesIntegration,\n) as IntegrationClass<Integration & { processEvent: (event: Event) => Event }> & {\n  new (options?: { root?: string; prefix?: string; iteratee?: StackFrameIteratee }): Integration;\n};\n"],"mappings":";;AAMA,MAAMA,gBAAA,GAAmB,eAAe;AAQxC,MAAMC,yBAAA,GAA6B,SAAAA,CAAA,EAAwC;EAAA,IAAvCC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyB,EAAE;EACpE,MAAMG,IAAA,GAAOJ,OAAO,CAACI,IAAI;EACzB,MAAMC,MAAO,GAAEL,OAAO,CAACK,MAAA,IAAU,SAAS;EAE1C,MAAMC,QAAQ,GACZN,OAAO,CAACM,QAAS,KACfC,KAAK,IAAiB;IACtB,IAAI,CAACA,KAAK,CAACC,QAAQ,EAAE;MACnB,OAAOD,KAAK;IACpB;IACA;IACM,MAAME,cAAe,GACnB,cAAc,CAACC,IAAI,CAACH,KAAK,CAACC,QAAQ,CAAE;IAC5C;IACSD,KAAK,CAACC,QAAQ,CAACG,QAAQ,CAAC,IAAI,KAAK,CAACJ,KAAK,CAACC,QAAQ,CAACG,QAAQ,CAAC,GAAG,CAAE;IACxE;IACM,MAAMC,eAAgB,GAAE,KAAK,CAACF,IAAI,CAACH,KAAK,CAACC,QAAQ,CAAC;IAClD,IAAIC,cAAe,IAAGG,eAAe,EAAE;MACrC,MAAMJ,QAAA,GAAWC,cAAA,GACbF,KAAK,CAACC,QAAA,CACHK,OAAO,CAAC,YAAY,EAAE,EAAE;MAAA,CACxBA,OAAO,CAAC,KAAK,EAAE,GAAG;MAAA,EACrBN,KAAK,CAACC,QAAQ;MAClB,MAAMM,IAAA,GAAOV,IAAA,GAAOW,QAAQ,CAACX,IAAI,EAAEI,QAAQ,CAAE,GAAEQ,QAAQ,CAACR,QAAQ,CAAC;MACjED,KAAK,CAACC,QAAS,GAAE,GAACH,MAAA,GAAAS,IAAA;IACA;IACA,OAAAP,KAAA;EACA;;EAEA;EACA,SAAAU,wBAAAC,KAAA;IACA;MACA;QACA,GAAAA,KAAA;QACAC,SAAA;UACA,GAAAD,KAAA,CAAAC,SAAA;UACA;UACA;UACAC,MAAA,EAAAF,KAAA,CAAAC,SAAA,CAAAC,MAAA,CAAAC,GAAA,CAAAC,KAAA;YACA,GAAAA,KAAA;YACA,IAAAA,KAAA,CAAAC,UAAA;cAAAA,UAAA,EAAAC,kBAAA,CAAAF,KAAA,CAAAC,UAAA;YAAA;UACA;QACA;MACA;IACA,SAAAE,GAAA;MACA,OAAAP,KAAA;IACA;EACA;;EAEA;EACA,SAAAM,mBAAAD,UAAA;IACA;MACA,GAAAA,UAAA;MACAG,MAAA,EAAAH,UAAA,IAAAA,UAAA,CAAAG,MAAA,IAAAH,UAAA,CAAAG,MAAA,CAAAL,GAAA,CAAAM,CAAA,IAAArB,QAAA,CAAAqB,CAAA;IACA;EACA;EAEA;IACAC,IAAA,EAAA9B,gBAAA;IACA;IACA+B,UAAA;IAAA;IACAC,aAAAC,aAAA;MACA,IAAAC,cAAA,GAAAD,aAAA;MAEA,IAAAA,aAAA,CAAAZ,SAAA,IAAAc,KAAA,CAAAC,OAAA,CAAAH,aAAA,CAAAZ,SAAA,CAAAC,MAAA;QACAY,cAAA,GAAAf,uBAAA,CAAAe,cAAA;MACA;MAEA,OAAAA,cAAA;IACA;EACA;AACA;AAEA,MAAAG,wBAAA,GAAAC,iBAAA,CAAArC,yBAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAAsC,aAAA,GAAAC,2BAAA,CACAxC,gBAAA,EACAqC,wBACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}