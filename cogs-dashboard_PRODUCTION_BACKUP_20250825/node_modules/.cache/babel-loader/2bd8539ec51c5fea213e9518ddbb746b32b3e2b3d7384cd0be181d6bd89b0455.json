{"ast":null,"code":"import { defineIntegration, convertIntegrationFnToClass, getClient, withScope, captureMessage, captureException } from '@sentry/core';\nimport { CONSOLE_LEVELS, GLOBAL_OBJ, addConsoleInstrumentationHandler, severityLevelFromString, addExceptionMechanism, safeJoin } from '@sentry/utils';\nconst INTEGRATION_NAME = 'CaptureConsole';\nconst _captureConsoleIntegration = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const levels = options.levels || CONSOLE_LEVELS;\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {},\n    // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (!('console' in GLOBAL_OBJ)) {\n        return;\n      }\n      addConsoleInstrumentationHandler(_ref => {\n        let {\n          args,\n          level\n        } = _ref;\n        if (getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n        consoleHandler(args, level);\n      });\n    }\n  };\n};\nconst captureConsoleIntegration = defineIntegration(_captureConsoleIntegration);\n\n/**\n * Send Console API calls as Sentry Events.\n * @deprecated Use `captureConsoleIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst CaptureConsole = convertIntegrationFnToClass(INTEGRATION_NAME, captureConsoleIntegration);\nfunction consoleHandler(args, level) {\n  const captureContext = {\n    level: severityLevelFromString(level),\n    extra: {\n      arguments: args\n    }\n  };\n  withScope(scope => {\n    scope.addEventProcessor(event => {\n      event.logger = 'console';\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'console'\n      });\n      return event;\n    });\n    if (level === 'assert' && args[0] === false) {\n      const message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n      scope.setExtra('arguments', args.slice(1));\n      captureMessage(message, captureContext);\n      return;\n    }\n    const error = args.find(arg => arg instanceof Error);\n    if (level === 'error' && error) {\n      captureException(error, captureContext);\n      return;\n    }\n    const message = safeJoin(args, ' ');\n    captureMessage(message, captureContext);\n  });\n}\nexport { CaptureConsole, captureConsoleIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","_captureConsoleIntegration","options","arguments","length","undefined","levels","CONSOLE_LEVELS","name","setupOnce","setup","client","GLOBAL_OBJ","addConsoleInstrumentationHandler","_ref","args","level","getClient","includes","consoleHandler","captureConsoleIntegration","defineIntegration","CaptureConsole","convertIntegrationFnToClass","captureContext","severityLevelFromString","extra","withScope","scope","addEventProcessor","event","logger","addExceptionMechanism","handled","type","message","safeJoin","slice","setExtra","captureMessage","error","find","arg","Error","captureException"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/captureconsole.ts"],"sourcesContent":["import {\n  captureException,\n  captureMessage,\n  convertIntegrationFnToClass,\n  defineIntegration,\n  getClient,\n  withScope,\n} from '@sentry/core';\nimport type { CaptureContext, Client, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport {\n  CONSOLE_LEVELS,\n  GLOBAL_OBJ,\n  addConsoleInstrumentationHandler,\n  addExceptionMechanism,\n  safeJoin,\n  severityLevelFromString,\n} from '@sentry/utils';\n\ninterface CaptureConsoleOptions {\n  levels?: string[];\n}\n\nconst INTEGRATION_NAME = 'CaptureConsole';\n\nconst _captureConsoleIntegration = ((options: CaptureConsoleOptions = {}) => {\n  const levels = options.levels || CONSOLE_LEVELS;\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (!('console' in GLOBAL_OBJ)) {\n        return;\n      }\n\n      addConsoleInstrumentationHandler(({ args, level }) => {\n        if (getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n\n        consoleHandler(args, level);\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const captureConsoleIntegration = defineIntegration(_captureConsoleIntegration);\n\n/**\n * Send Console API calls as Sentry Events.\n * @deprecated Use `captureConsoleIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const CaptureConsole = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  captureConsoleIntegration,\n) as IntegrationClass<Integration & { setup: (client: Client) => void }> & {\n  new (options?: { levels?: string[] }): Integration;\n};\n\nfunction consoleHandler(args: unknown[], level: string): void {\n  const captureContext: CaptureContext = {\n    level: severityLevelFromString(level),\n    extra: {\n      arguments: args,\n    },\n  };\n\n  withScope(scope => {\n    scope.addEventProcessor(event => {\n      event.logger = 'console';\n\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'console',\n      });\n\n      return event;\n    });\n\n    if (level === 'assert' && args[0] === false) {\n      const message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n      scope.setExtra('arguments', args.slice(1));\n      captureMessage(message, captureContext);\n      return;\n    }\n\n    const error = args.find(arg => arg instanceof Error);\n    if (level === 'error' && error) {\n      captureException(error, captureContext);\n      return;\n    }\n\n    const message = safeJoin(args, ' ');\n    captureMessage(message, captureContext);\n  });\n}\n"],"mappings":";;AAsBA,MAAMA,gBAAA,GAAmB,gBAAgB;AAEzC,MAAMC,0BAAA,GAA8B,SAAAA,CAAA,EAAyC;EAAA,IAAxCC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA0B,EAAE;EACtE,MAAMG,MAAO,GAAEJ,OAAO,CAACI,MAAA,IAAUC,cAAc;EAE/C,OAAO;IACLC,IAAI,EAAER,gBAAgB;IAC1B;IACIS,SAASA,CAAA,EAAG,EAAE;IAAA;IACdC,KAAKA,CAACC,MAAM,EAAE;MACZ,IAAI,EAAE,aAAaC,UAAU,CAAC,EAAE;QAC9B;MACR;MAEMC,gCAAgC,CAACC,IAAA,IAAqB;QAAA,IAApB;UAAEC,IAAI;UAAEC;QAAA,CAAO,GAAAF,IAAA;QAC/C,IAAIG,SAAS,OAAON,MAAA,IAAU,CAACL,MAAM,CAACY,QAAQ,CAACF,KAAK,CAAC,EAAE;UACrD;QACV;QAEQG,cAAc,CAACJ,IAAI,EAAEC,KAAK,CAAC;MACnC,CAAO,CAAC;IACR;EACA,CAAG;AACH,CAAG;MAEUI,yBAA0B,GAAEC,iBAAiB,CAACpB,0BAA0B;;AAErF;AACA;AACA;AACA;AACA;AACO,MAAMqB,cAAe,GAAEC,2BAA2B,CACvDvB,gBAAgB,EAChBoB,yBACF,CAAE;AAIF,SAASD,cAAcA,CAACJ,IAAI,EAAaC,KAAK,EAAgB;EAC5D,MAAMQ,cAAc,GAAmB;IACrCR,KAAK,EAAES,uBAAuB,CAACT,KAAK,CAAC;IACrCU,KAAK,EAAE;MACLvB,SAAS,EAAEY;IACjB;EACA,CAAG;EAEDY,SAAS,CAACC,KAAA,IAAS;IACjBA,KAAK,CAACC,iBAAiB,CAACC,KAAA,IAAS;MAC/BA,KAAK,CAACC,MAAO,GAAE,SAAS;MAExBC,qBAAqB,CAACF,KAAK,EAAE;QAC3BG,OAAO,EAAE,KAAK;QACdC,IAAI,EAAE;MACd,CAAO,CAAC;MAEF,OAAOJ,KAAK;IAClB,CAAK,CAAC;IAEF,IAAId,KAAM,KAAI,QAAS,IAAGD,IAAI,CAAC,CAAC,MAAM,KAAK,EAAE;MAC3C,MAAMoB,OAAA,GAAU,qBAAqBC,QAAQ,CAACrB,IAAI,CAACsB,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,gBAAgB,EAAC;MACAT,KAAA,CAAAU,QAAA,cAAAvB,IAAA,CAAAsB,KAAA;MACAE,cAAA,CAAAJ,OAAA,EAAAX,cAAA;MACA;IACA;IAEA,MAAAgB,KAAA,GAAAzB,IAAA,CAAA0B,IAAA,CAAAC,GAAA,IAAAA,GAAA,YAAAC,KAAA;IACA,IAAA3B,KAAA,gBAAAwB,KAAA;MACAI,gBAAA,CAAAJ,KAAA,EAAAhB,cAAA;MACA;IACA;IAEA,MAAAW,OAAA,GAAAC,QAAA,CAAArB,IAAA;IACAwB,cAAA,CAAAJ,OAAA,EAAAX,cAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}