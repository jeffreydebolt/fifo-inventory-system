name: API CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'core/**'
      - 'services/**'
      - 'api/**'
      - 'app/**'
      - 'tests/**'
      - 'infra/**'
      - 'requirements.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'core/**'
      - 'services/**'
      - 'api/**'
      - 'app/**'
      - 'tests/**'
      - 'infra/**'
      - 'requirements.txt'
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: fifo_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn pandas python-dotenv pytest pytest-cov
        pip install psycopg2-binary  # For test database
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Set up test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fifo_test
      run: |
        # Run migrations on test database
        psql $DATABASE_URL -f infra/migrations/001_create_multi_tenant_schema.sql

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=core --cov=services --cov=api

    - name: Run integration tests
      env:
        SUPABASE_URL: postgresql://postgres:postgres@localhost:5432/fifo_test
        SUPABASE_SERVICE_ROLE_KEY: test-key
      run: |
        python -m pytest tests/integration/ -v --cov=core --cov=services --cov=api --cov-append

    - name: Generate coverage report
      run: |
        pip install coverage
        coverage report -m
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: fifo-cogs-api

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/fifo-cogs-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name == 'release' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": false}'

    # Alternative: Deploy to Fly.io
    # - name: Deploy to Fly.io
    #   uses: superfly/flyctl-actions/setup-flyctl@master
    #   env:
    #     FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    #   run: flyctl deploy --remote-only