{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ClientContext=/*#__PURE__*/createContext({});export const useClient=()=>{const context=useContext(ClientContext);if(!context){throw new Error('useClient must be used within ClientProvider');}return context;};export const ClientProvider=_ref=>{let{children}=_ref;const[client,setClient]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Check for existing session\nconst storedClient=localStorage.getItem('fifo_client');if(storedClient){try{const clientData=JSON.parse(storedClient);setClient(clientData);}catch(e){localStorage.removeItem('fifo_client');}}setLoading(false);},[]);const login=async(clientId,password)=>{try{// Simple login - in production this would be an API call\nconst response=await fetch('/api/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({client_id:clientId,password})});if(response.ok){const clientData=await response.json();setClient(clientData);localStorage.setItem('fifo_client',JSON.stringify(clientData));return{success:true};}else{const error=await response.text();return{success:false,error};}}catch(err){// Demo: Simple credential check\nconst demoClients={'acme_corp':{password:'test123',company_name:'Acme Corp',email:'test1@acme.com'},'beta_industries':{password:'test456',company_name:'Beta Industries',email:'test2@beta.com'}};const clientData=demoClients[clientId];if(clientData&&password===clientData.password){const loginData={client_id:clientId,company_name:clientData.company_name,email:clientData.email};setClient(loginData);localStorage.setItem('fifo_client',JSON.stringify(loginData));return{success:true};}return{success:false,error:'Invalid credentials'};}};const logout=()=>{setClient(null);localStorage.removeItem('fifo_client');};const value={client,login,logout,loading,isAuthenticated:!!client};return/*#__PURE__*/_jsx(ClientContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","ClientContext","useClient","context","Error","ClientProvider","_ref","children","client","setClient","loading","setLoading","storedClient","localStorage","getItem","clientData","JSON","parse","e","removeItem","login","clientId","password","response","fetch","method","headers","body","stringify","client_id","ok","json","setItem","success","error","text","err","demoClients","company_name","email","loginData","logout","value","isAuthenticated","Provider"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/src/contexts/ClientContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst ClientContext = createContext({});\n\nexport const useClient = () => {\n  const context = useContext(ClientContext);\n  if (!context) {\n    throw new Error('useClient must be used within ClientProvider');\n  }\n  return context;\n};\n\nexport const ClientProvider = ({ children }) => {\n  const [client, setClient] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing session\n    const storedClient = localStorage.getItem('fifo_client');\n    if (storedClient) {\n      try {\n        const clientData = JSON.parse(storedClient);\n        setClient(clientData);\n      } catch (e) {\n        localStorage.removeItem('fifo_client');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (clientId, password) => {\n    try {\n      // Simple login - in production this would be an API call\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ client_id: clientId, password })\n      });\n\n      if (response.ok) {\n        const clientData = await response.json();\n        setClient(clientData);\n        localStorage.setItem('fifo_client', JSON.stringify(clientData));\n        return { success: true };\n      } else {\n        const error = await response.text();\n        return { success: false, error };\n      }\n    } catch (err) {\n      // Demo: Simple credential check\n      const demoClients = {\n        'acme_corp': { password: 'test123', company_name: 'Acme Corp', email: 'test1@acme.com' },\n        'beta_industries': { password: 'test456', company_name: 'Beta Industries', email: 'test2@beta.com' }\n      };\n      \n      const clientData = demoClients[clientId];\n      \n      if (clientData && password === clientData.password) {\n        const loginData = {\n          client_id: clientId,\n          company_name: clientData.company_name,\n          email: clientData.email\n        };\n        setClient(loginData);\n        localStorage.setItem('fifo_client', JSON.stringify(loginData));\n        return { success: true };\n      }\n      \n      return { success: false, error: 'Invalid credentials' };\n    }\n  };\n\n  const logout = () => {\n    setClient(null);\n    localStorage.removeItem('fifo_client');\n  };\n\n  const value = {\n    client,\n    login,\n    logout,\n    loading,\n    isAuthenticated: !!client\n  };\n\n  return (\n    <ClientContext.Provider value={value}>\n      {children}\n    </ClientContext.Provider>\n  );\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}