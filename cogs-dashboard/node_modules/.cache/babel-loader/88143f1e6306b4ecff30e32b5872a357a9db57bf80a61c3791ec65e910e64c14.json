{"ast":null,"code":"import { defineIntegration, convertIntegrationFnToClass } from '@sentry/core';\nimport { isError, normalize, isPlainObject, addNonEnumerableProperty, logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from './debug-build.js';\nconst INTEGRATION_NAME = 'ExtraErrorData';\nconst _extraErrorDataIntegration = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const depth = options.depth || 3;\n\n  // TODO(v8): Flip the default for this option to true\n  const captureErrorCause = options.captureErrorCause || false;\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {},\n    // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event, hint) {\n      return _enhanceEventWithErrorData(event, hint, depth, captureErrorCause);\n    }\n  };\n};\nconst extraErrorDataIntegration = defineIntegration(_extraErrorDataIntegration);\n\n/**\n * Extract additional data for from original exceptions.\n * @deprecated Use `extraErrorDataIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst ExtraErrorData = convertIntegrationFnToClass(INTEGRATION_NAME, extraErrorDataIntegration);\nfunction _enhanceEventWithErrorData(event) {\n  let hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let depth = arguments.length > 2 ? arguments[2] : undefined;\n  let captureErrorCause = arguments.length > 3 ? arguments[3] : undefined;\n  if (!hint.originalException || !isError(hint.originalException)) {\n    return event;\n  }\n  const exceptionName = hint.originalException.name || hint.originalException.constructor.name;\n  const errorData = _extractErrorData(hint.originalException, captureErrorCause);\n  if (errorData) {\n    const contexts = {\n      ...event.contexts\n    };\n    const normalizedErrorData = normalize(errorData, depth);\n    if (isPlainObject(normalizedErrorData)) {\n      // We mark the error data as \"already normalized\" here, because we don't want other normalization procedures to\n      // potentially truncate the data we just already normalized, with a certain depth setting.\n      addNonEnumerableProperty(normalizedErrorData, '__sentry_skip_normalization__', true);\n      contexts[exceptionName] = normalizedErrorData;\n    }\n    return {\n      ...event,\n      contexts\n    };\n  }\n  return event;\n}\n\n/**\n * Extract extra information from the Error object\n */\nfunction _extractErrorData(error, captureErrorCause) {\n  // We are trying to enhance already existing event, so no harm done if it won't succeed\n  try {\n    const nativeKeys = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber', 'toJSON'];\n    const extraErrorInfo = {};\n\n    // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.\n    for (const key of Object.keys(error)) {\n      if (nativeKeys.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = error[key];\n      extraErrorInfo[key] = isError(value) ? value.toString() : value;\n    }\n\n    // Error.cause is a standard property that is non enumerable, we therefore need to access it separately.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n    if (captureErrorCause && error.cause !== undefined) {\n      extraErrorInfo.cause = isError(error.cause) ? error.cause.toString() : error.cause;\n    }\n\n    // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)\n    if (typeof error.toJSON === 'function') {\n      const serializedError = error.toJSON();\n      for (const key of Object.keys(serializedError)) {\n        const value = serializedError[key];\n        extraErrorInfo[key] = isError(value) ? value.toString() : value;\n      }\n    }\n    return extraErrorInfo;\n  } catch (oO) {\n    DEBUG_BUILD && logger.error('Unable to extract extra data from the Error object:', oO);\n  }\n  return null;\n}\nexport { ExtraErrorData, extraErrorDataIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","_extraErrorDataIntegration","options","arguments","length","undefined","depth","captureErrorCause","name","setupOnce","processEvent","event","hint","_enhanceEventWithErrorData","extraErrorDataIntegration","defineIntegration","ExtraErrorData","convertIntegrationFnToClass","originalException","isError","exceptionName","constructor","errorData","_extractErrorData","contexts","normalizedErrorData","normalize","isPlainObject","addNonEnumerableProperty","error","nativeKeys","extraErrorInfo","key","Object","keys","indexOf","value","toString","cause","toJSON","serializedError","oO","DEBUG_BUILD","logger"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/extraerrordata.ts"],"sourcesContent":["import { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport type {\n  Contexts,\n  Event,\n  EventHint,\n  ExtendedError,\n  Integration,\n  IntegrationClass,\n  IntegrationFn,\n} from '@sentry/types';\nimport { addNonEnumerableProperty, isError, isPlainObject, logger, normalize } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from './debug-build';\n\nconst INTEGRATION_NAME = 'ExtraErrorData';\n\ninterface ExtraErrorDataOptions {\n  /**\n   * The object depth up to which to capture data on error objects.\n   */\n  depth: number;\n\n  /**\n   * Whether to capture error causes.\n   *\n   * More information: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n   */\n  captureErrorCause: boolean;\n}\n\nconst _extraErrorDataIntegration = ((options: Partial<ExtraErrorDataOptions> = {}) => {\n  const depth = options.depth || 3;\n\n  // TODO(v8): Flip the default for this option to true\n  const captureErrorCause = options.captureErrorCause || false;\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event, hint) {\n      return _enhanceEventWithErrorData(event, hint, depth, captureErrorCause);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const extraErrorDataIntegration = defineIntegration(_extraErrorDataIntegration);\n\n/**\n * Extract additional data for from original exceptions.\n * @deprecated Use `extraErrorDataIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const ExtraErrorData = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  extraErrorDataIntegration,\n) as IntegrationClass<Integration & { processEvent: (event: Event, hint: EventHint) => Event }> & {\n  new (\n    options?: Partial<{\n      depth: number;\n      captureErrorCause: boolean;\n    }>,\n  ): Integration;\n};\n\nfunction _enhanceEventWithErrorData(\n  event: Event,\n  hint: EventHint = {},\n  depth: number,\n  captureErrorCause: boolean,\n): Event {\n  if (!hint.originalException || !isError(hint.originalException)) {\n    return event;\n  }\n  const exceptionName = (hint.originalException as ExtendedError).name || hint.originalException.constructor.name;\n\n  const errorData = _extractErrorData(hint.originalException as ExtendedError, captureErrorCause);\n\n  if (errorData) {\n    const contexts: Contexts = {\n      ...event.contexts,\n    };\n\n    const normalizedErrorData = normalize(errorData, depth);\n\n    if (isPlainObject(normalizedErrorData)) {\n      // We mark the error data as \"already normalized\" here, because we don't want other normalization procedures to\n      // potentially truncate the data we just already normalized, with a certain depth setting.\n      addNonEnumerableProperty(normalizedErrorData, '__sentry_skip_normalization__', true);\n      contexts[exceptionName] = normalizedErrorData;\n    }\n\n    return {\n      ...event,\n      contexts,\n    };\n  }\n\n  return event;\n}\n\n/**\n * Extract extra information from the Error object\n */\nfunction _extractErrorData(error: ExtendedError, captureErrorCause: boolean): Record<string, unknown> | null {\n  // We are trying to enhance already existing event, so no harm done if it won't succeed\n  try {\n    const nativeKeys = [\n      'name',\n      'message',\n      'stack',\n      'line',\n      'column',\n      'fileName',\n      'lineNumber',\n      'columnNumber',\n      'toJSON',\n    ];\n\n    const extraErrorInfo: Record<string, unknown> = {};\n\n    // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.\n    for (const key of Object.keys(error)) {\n      if (nativeKeys.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = error[key];\n      extraErrorInfo[key] = isError(value) ? value.toString() : value;\n    }\n\n    // Error.cause is a standard property that is non enumerable, we therefore need to access it separately.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n    if (captureErrorCause && error.cause !== undefined) {\n      extraErrorInfo.cause = isError(error.cause) ? error.cause.toString() : error.cause;\n    }\n\n    // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)\n    if (typeof error.toJSON === 'function') {\n      const serializedError = error.toJSON() as Record<string, unknown>;\n\n      for (const key of Object.keys(serializedError)) {\n        const value = serializedError[key];\n        extraErrorInfo[key] = isError(value) ? value.toString() : value;\n      }\n    }\n\n    return extraErrorInfo;\n  } catch (oO) {\n    DEBUG_BUILD && logger.error('Unable to extract extra data from the Error object:', oO);\n  }\n\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}