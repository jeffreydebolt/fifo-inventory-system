{"ast":null,"code":"import { defineIntegration, convertIntegrationFnToClass } from '@sentry/core';\nimport { consoleSandbox } from '@sentry/utils';\nconst INTEGRATION_NAME = 'Debug';\nconst _debugIntegration = (options = {}) => {\n  const _options = {\n    debugger: false,\n    stringify: false,\n    ...options\n  };\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {},\n    // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (!client.on) {\n        return;\n      }\n      client.on('beforeSendEvent', (event, hint) => {\n        if (_options.debugger) {\n          // eslint-disable-next-line no-debugger\n          debugger;\n        }\n\n        /* eslint-disable no-console */\n        consoleSandbox(() => {\n          if (_options.stringify) {\n            console.log(JSON.stringify(event, null, 2));\n            if (hint && Object.keys(hint).length) {\n              console.log(JSON.stringify(hint, null, 2));\n            }\n          } else {\n            console.log(event);\n            if (hint && Object.keys(hint).length) {\n              console.log(hint);\n            }\n          }\n        });\n        /* eslint-enable no-console */\n      });\n    }\n  };\n};\nconst debugIntegration = defineIntegration(_debugIntegration);\n\n/**\n * Integration to debug sent Sentry events.\n * This integration should not be used in production.\n *\n * @deprecated Use `debugIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst Debug = convertIntegrationFnToClass(INTEGRATION_NAME, debugIntegration);\nexport { Debug, debugIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","_debugIntegration","options","_options","debugger","stringify","name","setupOnce","setup","client","on","event","hint","consoleSandbox","console","log","JSON","Object","keys","length","debugIntegration","defineIntegration","Debug","convertIntegrationFnToClass"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/debug.ts"],"sourcesContent":["import { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport type { Client, Event, EventHint, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport { consoleSandbox } from '@sentry/utils';\n\nconst INTEGRATION_NAME = 'Debug';\n\ninterface DebugOptions {\n  /** Controls whether console output created by this integration should be stringified. Default: `false` */\n  stringify?: boolean;\n  /** Controls whether a debugger should be launched before an event is sent. Default: `false` */\n  debugger?: boolean;\n}\n\nconst _debugIntegration = ((options: DebugOptions = {}) => {\n  const _options = {\n    debugger: false,\n    stringify: false,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (!client.on) {\n        return;\n      }\n\n      client.on('beforeSendEvent', (event: Event, hint?: EventHint) => {\n        if (_options.debugger) {\n          // eslint-disable-next-line no-debugger\n          debugger;\n        }\n\n        /* eslint-disable no-console */\n        consoleSandbox(() => {\n          if (_options.stringify) {\n            console.log(JSON.stringify(event, null, 2));\n            if (hint && Object.keys(hint).length) {\n              console.log(JSON.stringify(hint, null, 2));\n            }\n          } else {\n            console.log(event);\n            if (hint && Object.keys(hint).length) {\n              console.log(hint);\n            }\n          }\n        });\n        /* eslint-enable no-console */\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const debugIntegration = defineIntegration(_debugIntegration);\n\n/**\n * Integration to debug sent Sentry events.\n * This integration should not be used in production.\n *\n * @deprecated Use `debugIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Debug = convertIntegrationFnToClass(INTEGRATION_NAME, debugIntegration) as IntegrationClass<\n  Integration & { setup: (client: Client) => void }\n> & {\n  new (options?: {\n    stringify?: boolean;\n    debugger?: boolean;\n  }): Integration;\n};\n"],"mappings":";;AAIA,MAAMA,gBAAA,GAAmB,OAAO;AAShC,MAAMC,iBAAA,GAAqBA,CAACC,OAAO,GAAiB,EAAE,KAAK;EACzD,MAAMC,QAAA,GAAW;IACfC,QAAQ,EAAE,KAAK;IACfC,SAAS,EAAE,KAAK;IAChB,GAAGH;EACP,CAAG;EAED,OAAO;IACLI,IAAI,EAAEN,gBAAgB;IAC1B;IACIO,SAASA,CAAA,EAAG,EAAE;IAAA;IACdC,KAAKA,CAACC,MAAM,EAAE;MACZ,IAAI,CAACA,MAAM,CAACC,EAAE,EAAE;QACd;MACR;MAEMD,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAE,CAACC,KAAK,EAASC,IAAI,KAAiB;QAC/D,IAAIT,QAAQ,CAACC,QAAQ,EAAE;UAC/B;UACU;QACV;;QAEA;QACQS,cAAc,CAAC,MAAM;UACnB,IAAIV,QAAQ,CAACE,SAAS,EAAE;YACtBS,OAAO,CAACC,GAAG,CAACC,IAAI,CAACX,SAAS,CAACM,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAC3C,IAAIC,IAAK,IAAGK,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC,CAACO,MAAM,EAAE;cACpCL,OAAO,CAACC,GAAG,CAACC,IAAI,CAACX,SAAS,CAACO,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YACxD;UACA,OAAiB;YACLE,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;YAClB,IAAIC,IAAK,IAAGK,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC,CAACO,MAAM,EAAE;cACpCL,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;YAC/B;UACA;QACA,CAAS,CAAC;QACV;MACA,CAAO,CAAC;IACR;EACA,CAAG;AACH,CAAG;MAEUQ,gBAAiB,GAAEC,iBAAiB,CAACpB,iBAAiB;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMqB,KAAA,GAAQC,2BAA2B,CAACvB,gBAAgB,EAAEoB,gBAAgB,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}