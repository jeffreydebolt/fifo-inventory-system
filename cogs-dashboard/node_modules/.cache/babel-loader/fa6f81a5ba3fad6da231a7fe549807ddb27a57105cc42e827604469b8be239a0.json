{"ast":null,"code":"import api from'./api';export const runsService={// Get all runs for a tenant\nasync getRuns(tenantId){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const response=await api.get('/api/v1/runs',{params:{tenant_id:tenantId,...params}});return response.data;},// Get a specific run\nasync getRun(runId){const response=await api.get(`/api/v1/runs/${runId}`);return response.data;},// Create and execute a new run\nasync createRun(data){const response=await api.post('/api/v1/runs',data);return response.data;},// Rollback a run\nasync rollbackRun(runId){const response=await api.post(`/api/v1/runs/${runId}/rollback`);return response.data;},// Get journal entry for a run\nasync getJournalEntry(runId){let format=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'csv';const response=await api.get(`/api/v1/runs/${runId}/journal-entry`,{params:{format}});return response.data;},// Upload lots file\nasync uploadLots(tenantId,file){const formData=new FormData();formData.append('tenant_id',tenantId);formData.append('file',file);const response=await api.post('/api/v1/files/lots',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},// Upload sales file\nasync uploadSales(tenantId,file){const formData=new FormData();formData.append('tenant_id',tenantId);formData.append('file',file);const response=await api.post('/api/v1/files/sales',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},// Get CSV templates\nasync getLotsTemplate(){const response=await api.get('/api/v1/files/templates/lots',{responseType:'blob'});return response.data;},async getSalesTemplate(){const response=await api.get('/api/v1/files/templates/sales',{responseType:'blob'});return response.data;}};","map":{"version":3,"names":["api","runsService","getRuns","tenantId","params","arguments","length","undefined","response","get","tenant_id","data","getRun","runId","createRun","post","rollbackRun","getJournalEntry","format","uploadLots","file","formData","FormData","append","headers","uploadSales","getLotsTemplate","responseType","getSalesTemplate"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/src/services/runs.js"],"sourcesContent":["import api from './api';\n\nexport const runsService = {\n  // Get all runs for a tenant\n  async getRuns(tenantId, params = {}) {\n    const response = await api.get('/api/v1/runs', {\n      params: { tenant_id: tenantId, ...params }\n    });\n    return response.data;\n  },\n\n  // Get a specific run\n  async getRun(runId) {\n    const response = await api.get(`/api/v1/runs/${runId}`);\n    return response.data;\n  },\n\n  // Create and execute a new run\n  async createRun(data) {\n    const response = await api.post('/api/v1/runs', data);\n    return response.data;\n  },\n\n  // Rollback a run\n  async rollbackRun(runId) {\n    const response = await api.post(`/api/v1/runs/${runId}/rollback`);\n    return response.data;\n  },\n\n  // Get journal entry for a run\n  async getJournalEntry(runId, format = 'csv') {\n    const response = await api.get(`/api/v1/runs/${runId}/journal-entry`, {\n      params: { format }\n    });\n    return response.data;\n  },\n\n  // Upload lots file\n  async uploadLots(tenantId, file) {\n    const formData = new FormData();\n    formData.append('tenant_id', tenantId);\n    formData.append('file', file);\n\n    const response = await api.post('/api/v1/files/lots', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // Upload sales file\n  async uploadSales(tenantId, file) {\n    const formData = new FormData();\n    formData.append('tenant_id', tenantId);\n    formData.append('file', file);\n\n    const response = await api.post('/api/v1/files/sales', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // Get CSV templates\n  async getLotsTemplate() {\n    const response = await api.get('/api/v1/files/templates/lots', {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n\n  async getSalesTemplate() {\n    const response = await api.get('/api/v1/files/templates/sales', {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}