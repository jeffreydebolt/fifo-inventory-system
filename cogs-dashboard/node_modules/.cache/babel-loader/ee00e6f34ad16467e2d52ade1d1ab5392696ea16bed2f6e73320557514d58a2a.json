{"ast":null,"code":"import { isString } from './is.js';\nimport { getGlobalObject } from './worldwide.js';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject();\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction htmlTreeAsString(elem) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = !Array.isArray(options) && options.maxStringLength || DEFAULT_MAX_STRING_LENGTH;\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {\n        break;\n      }\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el, keyAttrs) {\n  const elem = el;\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset && elem.dataset['sentryComponent']) {\n      return elem.dataset['sentryComponent'];\n    }\n  }\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)]) : null;\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nfunction getLocationHref() {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getDomElement(selector) {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector);\n  }\n  return null;\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` attribute. This attribute is added at build-time\n * by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nfunction getComponentName(elem) {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n  let currentElem = elem;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n    if (currentElem instanceof HTMLElement && currentElem.dataset['sentryComponent']) {\n      return currentElem.dataset['sentryComponent'];\n    }\n    currentElem = currentElem.parentNode;\n  }\n  return null;\n}\nexport { getComponentName, getDomElement, getLocationHref, htmlTreeAsString };","map":{"version":3,"names":["WINDOW","getGlobalObject","DEFAULT_MAX_STRING_LENGTH","htmlTreeAsString","elem","options","arguments","length","undefined","currentElem","MAX_TRAVERSE_HEIGHT","out","height","len","separator","sepLength","nextStr","keyAttrs","Array","isArray","maxStringLength","_htmlElementAsString","push","parentNode","reverse","join","_oO","el","className","classes","key","attr","i","tagName","HTMLElement","dataset","toLowerCase","keyAttrPairs","filter","keyAttr","getAttribute","map","forEach","keyAttrPair","id","isString","split","allowedAttrs","getLocationHref","document","location","href","oO","getDomElement","selector","querySelector","getComponentName"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/@sentry/src/browser.ts"],"sourcesContent":["import { isString } from './is';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\ntype SimpleNode = {\n  parentNode: SimpleNode;\n} | null;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(\n  elem: unknown,\n  options: string[] | { keyAttrs?: string[]; maxStringLength?: number } = {},\n): string {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset && elem.dataset['sentryComponent']) {\n      return elem.dataset['sentryComponent'];\n    }\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getDomElement<E = any>(selector: string): E | null {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector) as unknown as E;\n  }\n  return null;\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` attribute. This attribute is added at build-time\n * by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nexport function getComponentName(elem: unknown): string | null {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n\n  let currentElem = elem as SimpleNode;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n\n    if (currentElem instanceof HTMLElement && currentElem.dataset['sentryComponent']) {\n      return currentElem.dataset['sentryComponent'];\n    }\n\n    currentElem = currentElem.parentNode;\n  }\n\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}