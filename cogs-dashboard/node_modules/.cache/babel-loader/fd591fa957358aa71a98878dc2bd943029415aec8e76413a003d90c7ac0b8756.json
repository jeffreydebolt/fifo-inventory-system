{"ast":null,"code":"import { dropUndefinedKeys, logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { getCurrentHub } from '../hub.js';\nimport { getMetricSummaryJsonForSpan } from '../metrics/metric-summary.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE } from '../semanticAttributes.js';\nimport { spanTimeInputToSeconds, spanToJSON, spanToTraceContext } from '../utils/spanUtils.js';\nimport { getDynamicSamplingContextFromSpan } from './dynamicSamplingContext.js';\nimport { Span, SpanRecorder } from './span.js';\nimport { getCapturedScopesOnSpan } from './trace.js';\n\n/** JSDoc */\nclass Transaction extends Span {\n  /**\n   * The reference to the current hub.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n\n  // DO NOT yet remove this property, it is used in a hack for v7 backwards compatibility.\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   *\n   * @deprecated Transactions will be removed in v8. Use spans instead.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  constructor(transactionContext, hub) {\n    super(transactionContext);\n    this._contexts = {};\n\n    // eslint-disable-next-line deprecation/deprecation\n    this._hub = hub || getCurrentHub();\n    this._name = transactionContext.name || '';\n    this._metadata = {\n      // eslint-disable-next-line deprecation/deprecation\n      ...transactionContext.metadata\n    };\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    // TODO (v8): Replace this with another way to set the root span\n    // eslint-disable-next-line deprecation/deprecation\n    this.transaction = this;\n\n    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n    const incomingDynamicSamplingContext = this._metadata.dynamicSamplingContext;\n    if (incomingDynamicSamplingContext) {\n      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n      this._frozenDynamicSamplingContext = {\n        ...incomingDynamicSamplingContext\n      };\n    }\n  }\n\n  // This sadly conflicts with the getter/setter ordering :(\n  /* eslint-disable @typescript-eslint/member-ordering */\n\n  /**\n   * Getter for `name` property.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Setter for `name` property, which also sets `source` as custom.\n   * @deprecated Use `updateName()` and `setMetadata()` instead.\n   */\n  set name(newName) {\n    // eslint-disable-next-line deprecation/deprecation\n    this.setName(newName);\n  }\n\n  /**\n   * Get the metadata for this transaction.\n   * @deprecated Use `spanGetMetadata(transaction)` instead.\n   */\n  get metadata() {\n    // We merge attributes in for backwards compatibility\n    return {\n      // Defaults\n      // eslint-disable-next-line deprecation/deprecation\n      source: 'custom',\n      spanMetadata: {},\n      // Legacy metadata\n      ...this._metadata,\n      // From attributes\n      ...(this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] && {\n        source: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]\n      }),\n      ...(this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] && {\n        sampleRate: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]\n      })\n    };\n  }\n\n  /**\n   * Update the metadata for this transaction.\n   * @deprecated Use `spanGetMetadata(transaction)` instead.\n   */\n  set metadata(metadata) {\n    this._metadata = metadata;\n  }\n\n  /* eslint-enable @typescript-eslint/member-ordering */\n\n  /**\n   * Setter for `name` property, which also sets `source` on the metadata.\n   *\n   * @deprecated Use `.updateName()` and `.setAttribute()` instead.\n   */\n  setName(name) {\n    let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'custom';\n    this._name = name;\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, source);\n  }\n\n  /** @inheritdoc */\n  updateName(name) {\n    this._name = name;\n    return this;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  initSpanRecorder() {\n    let maxlen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.spanRecorder) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Set the context of a transaction event.\n   * @deprecated Use either `.setAttribute()`, or set the context on the scope before creating the transaction.\n   */\n  setContext(key, context) {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use top-level `setMeasurement()` instead.\n   */\n  setMeasurement(name, value) {\n    let unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    this._measurements[name] = {\n      value,\n      unit\n    };\n  }\n\n  /**\n   * Store metadata on this transaction.\n   * @deprecated Use attributes or store data on the scope instead.\n   */\n  setMetadata(newMetadata) {\n    this._metadata = {\n      ...this._metadata,\n      ...newMetadata\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  end(endTimestamp) {\n    const timestampInS = spanTimeInputToSeconds(endTimestamp);\n    const transaction = this._finishTransaction(timestampInS);\n    if (!transaction) {\n      return undefined;\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toContext() {\n    // eslint-disable-next-line deprecation/deprecation\n    const spanContext = super.toContext();\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this._name,\n      trimEnd: this._trimEnd\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateWithContext(transactionContext) {\n    // eslint-disable-next-line deprecation/deprecation\n    super.updateWithContext(transactionContext);\n    this._name = transactionContext.name || '';\n    this._trimEnd = transactionContext.trimEnd;\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @experimental\n   *\n   * @deprecated Use top-level `getDynamicSamplingContextFromSpan` instead.\n   */\n  getDynamicSamplingContext() {\n    return getDynamicSamplingContextFromSpan(this);\n  }\n\n  /**\n   * Override the current hub with a new one.\n   * Used if you want another hub to finish the transaction.\n   *\n   * @internal\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  setHub(hub) {\n    this._hub = hub;\n  }\n\n  /**\n   * Get the profile id of the transaction.\n   */\n  getProfileId() {\n    if (this._contexts !== undefined && this._contexts['profile'] !== undefined) {\n      return this._contexts['profile'].profile_id;\n    }\n    return undefined;\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n  _finishTransaction(endTimestamp) {\n    // This transaction is already finished, so we should not flush it again.\n    if (this._endTime !== undefined) {\n      return undefined;\n    }\n    if (!this._name) {\n      DEBUG_BUILD && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.end(endTimestamp);\n\n    // eslint-disable-next-line deprecation/deprecation\n    const client = this._hub.getClient();\n    if (client && client.emit) {\n      client.emit('finishTransaction', this);\n    }\n    if (this._sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      DEBUG_BUILD && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n      return undefined;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const finishedSpans = this.spanRecorder ?\n    // eslint-disable-next-line deprecation/deprecation\n    this.spanRecorder.spans.filter(span => span !== this && spanToJSON(span).timestamp) : [];\n    if (this._trimEnd && finishedSpans.length > 0) {\n      const endTimes = finishedSpans.map(span => spanToJSON(span).timestamp).filter(Boolean);\n      this._endTime = endTimes.reduce((prev, current) => {\n        return prev > current ? prev : current;\n      });\n    }\n    const {\n      scope: capturedSpanScope,\n      isolationScope: capturedSpanIsolationScope\n    } = getCapturedScopesOnSpan(this);\n\n    // eslint-disable-next-line deprecation/deprecation\n    const {\n      metadata\n    } = this;\n    // eslint-disable-next-line deprecation/deprecation\n    const {\n      source\n    } = metadata;\n    const transaction = {\n      contexts: {\n        ...this._contexts,\n        // We don't want to override trace context\n        trace: spanToTraceContext(this)\n      },\n      // TODO: Pass spans serialized via `spanToJSON()` here instead in v8.\n      spans: finishedSpans,\n      start_timestamp: this._startTime,\n      // eslint-disable-next-line deprecation/deprecation\n      tags: this.tags,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        ...metadata,\n        capturedSpanScope,\n        capturedSpanIsolationScope,\n        ...dropUndefinedKeys({\n          dynamicSamplingContext: getDynamicSamplingContextFromSpan(this)\n        })\n      },\n      _metrics_summary: getMetricSummaryJsonForSpan(this),\n      ...(source && {\n        transaction_info: {\n          source\n        }\n      })\n    };\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n    if (hasMeasurements) {\n      DEBUG_BUILD && logger.log('[Measurements] Adding measurements to transaction', JSON.stringify(this._measurements, undefined, 2));\n      transaction.measurements = this._measurements;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    DEBUG_BUILD && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this._name}.`);\n    return transaction;\n  }\n}\nexport { Transaction };","map":{"version":3,"names":["Transaction","Span","constructor","transactionContext","hub","_contexts","_hub","getCurrentHub","_name","name","_metadata","metadata","_trimEnd","trimEnd","transaction","incomingDynamicSamplingContext","dynamicSamplingContext","_frozenDynamicSamplingContext","newName","setName","source","spanMetadata","_attributes","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE","sampleRate","arguments","length","undefined","setAttribute","updateName","initSpanRecorder","maxlen","spanRecorder","SpanRecorder","add","setContext","key","context","setMeasurement","value","unit","_measurements","setMetadata","newMetadata","end","endTimestamp","timestampInS","spanTimeInputToSeconds","_finishTransaction","captureEvent","toContext","spanContext","dropUndefinedKeys","updateWithContext","getDynamicSamplingContext","getDynamicSamplingContextFromSpan","setHub","getProfileId","profile_id","_endTime","DEBUG_BUILD","logger","warn","client","getClient","emit","_sampled","log","recordDroppedEvent","finishedSpans","spans","filter","span","spanToJSON","timestamp","endTimes","map","Boolean","reduce","prev","current","scope","capturedSpanScope","isolationScope","capturedSpanIsolationScope","getCapturedScopesOnSpan","contexts","trace","spanToTraceContext","start_timestamp","_startTime","tags","type","sdkProcessingMetadata","_metrics_summary","getMetricSummaryJsonForSpan","transaction_info","hasMeasurements","Object","keys","JSON","stringify","measurements","op"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/@sentry/src/tracing/transaction.ts"],"sourcesContent":["import type {\n  Context,\n  Contexts,\n  DynamicSamplingContext,\n  MeasurementUnit,\n  SpanTimeInput,\n  Transaction as TransactionInterface,\n  TransactionContext,\n  TransactionEvent,\n  TransactionMetadata,\n} from '@sentry/types';\nimport { dropUndefinedKeys, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Hub } from '../hub';\nimport { getCurrentHub } from '../hub';\nimport { getMetricSummaryJsonForSpan } from '../metrics/metric-summary';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '../semanticAttributes';\nimport { spanTimeInputToSeconds, spanToJSON, spanToTraceContext } from '../utils/spanUtils';\nimport { getDynamicSamplingContextFromSpan } from './dynamicSamplingContext';\nimport { Span as SpanClass, SpanRecorder } from './span';\nimport { getCapturedScopesOnSpan } from './trace';\n\n/** JSDoc */\nexport class Transaction extends SpanClass implements TransactionInterface {\n  /**\n   * The reference to the current hub.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  public _hub: Hub;\n\n  protected _name: string;\n\n  private _contexts: Contexts;\n\n  private _trimEnd?: boolean | undefined;\n\n  // DO NOT yet remove this property, it is used in a hack for v7 backwards compatibility.\n  private _frozenDynamicSamplingContext: Readonly<Partial<DynamicSamplingContext>> | undefined;\n\n  private _metadata: Partial<TransactionMetadata>;\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   *\n   * @deprecated Transactions will be removed in v8. Use spans instead.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  public constructor(transactionContext: TransactionContext, hub?: Hub) {\n    super(transactionContext);\n    this._contexts = {};\n\n    // eslint-disable-next-line deprecation/deprecation\n    this._hub = hub || getCurrentHub();\n\n    this._name = transactionContext.name || '';\n\n    this._metadata = {\n      // eslint-disable-next-line deprecation/deprecation\n      ...transactionContext.metadata,\n    };\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    // TODO (v8): Replace this with another way to set the root span\n    // eslint-disable-next-line deprecation/deprecation\n    this.transaction = this;\n\n    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n    const incomingDynamicSamplingContext = this._metadata.dynamicSamplingContext;\n    if (incomingDynamicSamplingContext) {\n      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n      this._frozenDynamicSamplingContext = { ...incomingDynamicSamplingContext };\n    }\n  }\n\n  // This sadly conflicts with the getter/setter ordering :(\n  /* eslint-disable @typescript-eslint/member-ordering */\n\n  /**\n   * Getter for `name` property.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Setter for `name` property, which also sets `source` as custom.\n   * @deprecated Use `updateName()` and `setMetadata()` instead.\n   */\n  public set name(newName: string) {\n    // eslint-disable-next-line deprecation/deprecation\n    this.setName(newName);\n  }\n\n  /**\n   * Get the metadata for this transaction.\n   * @deprecated Use `spanGetMetadata(transaction)` instead.\n   */\n  public get metadata(): TransactionMetadata {\n    // We merge attributes in for backwards compatibility\n    return {\n      // Defaults\n      // eslint-disable-next-line deprecation/deprecation\n      source: 'custom',\n      spanMetadata: {},\n\n      // Legacy metadata\n      ...this._metadata,\n\n      // From attributes\n      ...(this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] && {\n        source: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] as TransactionMetadata['source'],\n      }),\n      ...(this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] && {\n        sampleRate: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] as TransactionMetadata['sampleRate'],\n      }),\n    };\n  }\n\n  /**\n   * Update the metadata for this transaction.\n   * @deprecated Use `spanGetMetadata(transaction)` instead.\n   */\n  public set metadata(metadata: TransactionMetadata) {\n    this._metadata = metadata;\n  }\n\n  /* eslint-enable @typescript-eslint/member-ordering */\n\n  /**\n   * Setter for `name` property, which also sets `source` on the metadata.\n   *\n   * @deprecated Use `.updateName()` and `.setAttribute()` instead.\n   */\n  public setName(name: string, source: TransactionMetadata['source'] = 'custom'): void {\n    this._name = name;\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, source);\n  }\n\n  /** @inheritdoc */\n  public updateName(name: string): this {\n    this._name = name;\n    return this;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initSpanRecorder(maxlen: number = 1000): void {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.spanRecorder) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Set the context of a transaction event.\n   * @deprecated Use either `.setAttribute()`, or set the context on the scope before creating the transaction.\n   */\n  public setContext(key: string, context: Context | null): void {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use top-level `setMeasurement()` instead.\n   */\n  public setMeasurement(name: string, value: number, unit: MeasurementUnit = ''): void {\n    this._measurements[name] = { value, unit };\n  }\n\n  /**\n   * Store metadata on this transaction.\n   * @deprecated Use attributes or store data on the scope instead.\n   */\n  public setMetadata(newMetadata: Partial<TransactionMetadata>): void {\n    this._metadata = { ...this._metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public end(endTimestamp?: SpanTimeInput): string | undefined {\n    const timestampInS = spanTimeInputToSeconds(endTimestamp);\n    const transaction = this._finishTransaction(timestampInS);\n    if (!transaction) {\n      return undefined;\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): TransactionContext {\n    // eslint-disable-next-line deprecation/deprecation\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this._name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(transactionContext: TransactionContext): this {\n    // eslint-disable-next-line deprecation/deprecation\n    super.updateWithContext(transactionContext);\n\n    this._name = transactionContext.name || '';\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @experimental\n   *\n   * @deprecated Use top-level `getDynamicSamplingContextFromSpan` instead.\n   */\n  public getDynamicSamplingContext(): Readonly<Partial<DynamicSamplingContext>> {\n    return getDynamicSamplingContextFromSpan(this);\n  }\n\n  /**\n   * Override the current hub with a new one.\n   * Used if you want another hub to finish the transaction.\n   *\n   * @internal\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  public setHub(hub: Hub): void {\n    this._hub = hub;\n  }\n\n  /**\n   * Get the profile id of the transaction.\n   */\n  public getProfileId(): string | undefined {\n    if (this._contexts !== undefined && this._contexts['profile'] !== undefined) {\n      return this._contexts['profile'].profile_id as string;\n    }\n    return undefined;\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n  protected _finishTransaction(endTimestamp?: number): TransactionEvent | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this._endTime !== undefined) {\n      return undefined;\n    }\n\n    if (!this._name) {\n      DEBUG_BUILD && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.end(endTimestamp);\n\n    // eslint-disable-next-line deprecation/deprecation\n    const client = this._hub.getClient();\n    if (client && client.emit) {\n      client.emit('finishTransaction', this);\n    }\n\n    if (this._sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      DEBUG_BUILD && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n\n      return undefined;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const finishedSpans = this.spanRecorder\n      ? // eslint-disable-next-line deprecation/deprecation\n        this.spanRecorder.spans.filter(span => span !== this && spanToJSON(span).timestamp)\n      : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      const endTimes = finishedSpans.map(span => spanToJSON(span).timestamp).filter(Boolean) as number[];\n      this._endTime = endTimes.reduce((prev, current) => {\n        return prev > current ? prev : current;\n      });\n    }\n\n    const { scope: capturedSpanScope, isolationScope: capturedSpanIsolationScope } = getCapturedScopesOnSpan(this);\n\n    // eslint-disable-next-line deprecation/deprecation\n    const { metadata } = this;\n    // eslint-disable-next-line deprecation/deprecation\n    const { source } = metadata;\n\n    const transaction: TransactionEvent = {\n      contexts: {\n        ...this._contexts,\n        // We don't want to override trace context\n        trace: spanToTraceContext(this),\n      },\n      // TODO: Pass spans serialized via `spanToJSON()` here instead in v8.\n      spans: finishedSpans,\n      start_timestamp: this._startTime,\n      // eslint-disable-next-line deprecation/deprecation\n      tags: this.tags,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        ...metadata,\n        capturedSpanScope,\n        capturedSpanIsolationScope,\n        ...dropUndefinedKeys({\n          dynamicSamplingContext: getDynamicSamplingContextFromSpan(this),\n        }),\n      },\n      _metrics_summary: getMetricSummaryJsonForSpan(this),\n      ...(source && {\n        transaction_info: {\n          source,\n        },\n      }),\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      DEBUG_BUILD &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction',\n          JSON.stringify(this._measurements, undefined, 2),\n        );\n      transaction.measurements = this._measurements;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    DEBUG_BUILD && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this._name}.`);\n\n    return transaction;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}