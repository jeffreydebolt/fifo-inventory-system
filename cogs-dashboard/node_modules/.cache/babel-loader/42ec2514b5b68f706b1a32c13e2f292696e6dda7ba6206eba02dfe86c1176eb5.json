{"ast":null,"code":"import '@sentry-internal/tracing';\nimport { withScope, captureException } from '@sentry/core';\nimport { GLOBAL_OBJ, getOriginalFunction, markFunctionWrapped, addNonEnumerableProperty, addExceptionTypeValue, addExceptionMechanism } from '@sentry/utils';\nconst WINDOW = GLOBAL_OBJ;\nlet ignoreOnError = 0;\n\n/**\n * @hidden\n */\nfunction shouldIgnoreOnError() {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nfunction ignoreNextOnError() {\n  // onerror should trigger before setTimeout\n  ignoreOnError++;\n  setTimeout(() => {\n    ignoreOnError--;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always\n * has a correct `this` context.\n * @returns The wrapped function.\n * @hidden\n */\nfunction wrap(fn) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let before\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  = arguments.length > 2 ? arguments[2] : undefined;\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    const wrapper = fn.__sentry_wrapped__;\n    if (wrapper) {\n      if (typeof wrapper === 'function') {\n        return wrapper;\n      } else {\n        // If we find that the `__sentry_wrapped__` function is not a function at the time of accessing it, it means\n        // that something messed with it. In that case we want to return the originally passed function.\n        return fn;\n      }\n    }\n\n    // We don't wanna wrap it twice\n    if (getOriginalFunction(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`\n  const sentryWrapped = function () {\n    const args = Array.prototype.slice.call(arguments);\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map(arg => wrap(arg, options));\n\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n      withScope(scope => {\n        scope.addEventProcessor(event => {\n          if (options.mechanism) {\n            addExceptionTypeValue(event, undefined, undefined);\n            addExceptionMechanism(event, options.mechanism);\n          }\n          event.extra = {\n            ...event.extra,\n            arguments: args\n          };\n          return event;\n        });\n        captureException(ex);\n      });\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  markFunctionWrapped(sentryWrapped, fn);\n  addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name');\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get() {\n          return fn.name;\n        }\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n  return sentryWrapped;\n}\nexport { WINDOW, ignoreNextOnError, shouldIgnoreOnError, wrap };","map":{"version":3,"names":["WINDOW","GLOBAL_OBJ","ignoreOnError","shouldIgnoreOnError","ignoreNextOnError","setTimeout","wrap","fn","options","arguments","length","undefined","before","wrapper","__sentry_wrapped__","getOriginalFunction","e","sentryWrapped","args","Array","prototype","slice","call","apply","wrappedArguments","map","arg","ex","withScope","scope","addEventProcessor","event","mechanism","addExceptionTypeValue","addExceptionMechanism","extra","captureException","property","Object","hasOwnProperty","_oO","markFunctionWrapped","addNonEnumerableProperty","descriptor","getOwnPropertyDescriptor","configurable","defineProperty","get","name"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/helpers.ts"],"sourcesContent":["import type { browserTracingIntegration } from '@sentry-internal/tracing';\nimport { BrowserTracing } from '@sentry-internal/tracing';\nimport { captureException, withScope } from '@sentry/core';\nimport type { DsnLike, Integration, Mechanism, WrappedFunction } from '@sentry/types';\nimport {\n  GLOBAL_OBJ,\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  addNonEnumerableProperty,\n  getOriginalFunction,\n  markFunctionWrapped,\n} from '@sentry/utils';\n\nexport const WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError++;\n  setTimeout(() => {\n    ignoreOnError--;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always\n * has a correct `this` context.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    const wrapper = fn.__sentry_wrapped__;\n    if (wrapper) {\n      if (typeof wrapper === 'function') {\n        return wrapper;\n      } else {\n        // If we find that the `__sentry_wrapped__` function is not a function at the time of accessing it, it means\n        // that something messed with it. In that case we want to return the originally passed function.\n        return fn;\n      }\n    }\n\n    // We don't wanna wrap it twice\n    if (getOriginalFunction(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`\n  const sentryWrapped: WrappedFunction = function (this: unknown): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope(scope => {\n        scope.addEventProcessor(event => {\n          if (options.mechanism) {\n            addExceptionTypeValue(event, undefined, undefined);\n            addExceptionMechanism(event, options.mechanism);\n          }\n\n          event.extra = {\n            ...event.extra,\n            arguments: args,\n          };\n\n          return event;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  markFunctionWrapped(sentryWrapped, fn);\n\n  addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n *\n * @deprecated This type will be removed in the next major version of the Sentry SDK. `showReportDialog` will still be around, however the `eventId` option will now be required.\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(this: void): void;\n  /** Callback after reportDialog closed */\n  onClose?(this: void): void;\n}\n\n/**\n * This is a slim shim of `browserTracingIntegration` for the CDN bundles.\n * Since the actual functional integration uses a different code from `BrowserTracing`,\n * we want to avoid shipping both of them in the CDN bundles, as that would blow up the size.\n * Instead, we provide a functional integration with the same API, but the old implementation.\n * This means that it's not possible to register custom routing instrumentation, but that's OK for now.\n * We also don't expose the utilities for this anyhow in the CDN bundles.\n * For users that need custom routing in CDN bundles, they have to continue using `new BrowserTracing()` until v8.\n */\nexport function bundleBrowserTracingIntegration(\n  options: Parameters<typeof browserTracingIntegration>[0] = {},\n): Integration {\n  // Migrate some options from the old integration to the new one\n  // eslint-disable-next-line deprecation/deprecation\n  const opts: ConstructorParameters<typeof BrowserTracing>[0] = options;\n\n  if (typeof options.markBackgroundSpan === 'boolean') {\n    opts.markBackgroundTransactions = options.markBackgroundSpan;\n  }\n\n  if (typeof options.instrumentPageLoad === 'boolean') {\n    opts.startTransactionOnPageLoad = options.instrumentPageLoad;\n  }\n\n  if (typeof options.instrumentNavigation === 'boolean') {\n    opts.startTransactionOnLocationChange = options.instrumentNavigation;\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  return new BrowserTracing(opts);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}