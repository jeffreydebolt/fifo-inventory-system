{"ast":null,"code":"import { node } from './node-stack-trace.js';\nexport { filenameIsInApp } from './node-stack-trace.js';\nconst STACKTRACE_FRAME_LIMIT = 50;\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nfunction createStackParser() {\n  for (var _len = arguments.length, parsers = new Array(_len), _key = 0; _key < _len; _key++) {\n    parsers[_key] = arguments[_key];\n  }\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n  return function (stack) {\n    let skipFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const frames = [];\n    const lines = stack.split('\\n');\n    for (let i = skipFirst; i < lines.length; i++) {\n      const line = lines[i];\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n      if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n        break;\n      }\n    }\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nfunction stackParserFromStackParserOptions(stackParser) {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nfunction stripSentryFramesAndReverse(stack) {\n  if (!stack.length) {\n    return [];\n  }\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(localStack[localStack.length - 1].function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the hub itself, making it:\n    //\n    //   Sentry.captureException()\n    //   getCurrentHub().captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || '')) {\n      localStack.pop();\n    }\n  }\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || localStack[localStack.length - 1].filename,\n    function: frame.function || '?'\n  }));\n}\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nfunction getFunctionName(fn) {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nfunction nodeStackLineParser(getModule) {\n  return [90, node(getModule)];\n}\nexport { createStackParser, getFunctionName, nodeStackLineParser, stackParserFromStackParserOptions, stripSentryFramesAndReverse };","map":{"version":3,"names":["STACKTRACE_FRAME_LIMIT","WEBPACK_ERROR_REGEXP","STRIP_FRAME_REGEXP","createStackParser","_len","arguments","length","parsers","Array","_key","sortedParsers","sort","a","b","map","p","stack","skipFirst","undefined","frames","lines","split","i","line","cleanedLine","test","replace","match","parser","frame","push","stripSentryFramesAndReverse","stackParserFromStackParserOptions","stackParser","isArray","localStack","from","function","pop","reverse","slice","filename","defaultFunctionName","getFunctionName","fn","name","e","nodeStackLineParser","getModule","node"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/@sentry/src/stacktrace.ts"],"sourcesContent":["import type { StackFrame, StackLineParser, StackParser } from '@sentry/types';\n\nimport type { GetModuleFn } from './node-stack-trace';\nimport { filenameIsInApp, node } from './node-stack-trace';\n\nexport { filenameIsInApp };\n\nconst STACKTRACE_FRAME_LIMIT = 50;\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirst: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n    const lines = stack.split('\\n');\n\n    for (let i = skipFirst; i < lines.length; i++) {\n      const line = lines[i];\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n\n      if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n        break;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: ReadonlyArray<StackFrame>): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(localStack[localStack.length - 1].function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the hub itself, making it:\n    //\n    //   Sentry.captureException()\n    //   getCurrentHub().captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || '')) {\n      localStack.pop();\n    }\n  }\n\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || localStack[localStack.length - 1].filename,\n    function: frame.function || '?',\n  }));\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}