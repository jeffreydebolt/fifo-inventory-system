{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/src/contexts/ClientContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClientContext = /*#__PURE__*/createContext({});\nexport const useClient = () => {\n  _s();\n  const context = useContext(ClientContext);\n  if (!context) {\n    throw new Error('useClient must be used within ClientProvider');\n  }\n  return context;\n};\n_s(useClient, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ClientProvider = ({\n  children\n}) => {\n  _s2();\n  const [client, setClient] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for existing session\n    const storedClient = localStorage.getItem('fifo_client');\n    if (storedClient) {\n      try {\n        const clientData = JSON.parse(storedClient);\n        setClient(clientData);\n      } catch (e) {\n        localStorage.removeItem('fifo_client');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (clientId, password) => {\n    try {\n      // Simple login - in production this would be an API call\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          client_id: clientId,\n          password\n        })\n      });\n      if (response.ok) {\n        const clientData = await response.json();\n        setClient(clientData);\n        localStorage.setItem('fifo_client', JSON.stringify(clientData));\n        return {\n          success: true\n        };\n      } else {\n        const error = await response.text();\n        return {\n          success: false,\n          error\n        };\n      }\n    } catch (err) {\n      // Demo: Simple credential check\n      const demoClients = {\n        'acme_corp': {\n          password: 'test123',\n          company_name: 'Acme Corp',\n          email: 'test1@acme.com'\n        },\n        'beta_industries': {\n          password: 'test456',\n          company_name: 'Beta Industries',\n          email: 'test2@beta.com'\n        }\n      };\n      const clientData = demoClients[clientId];\n      if (clientData && password === clientData.password) {\n        const loginData = {\n          client_id: clientId,\n          company_name: clientData.company_name,\n          email: clientData.email\n        };\n        setClient(loginData);\n        localStorage.setItem('fifo_client', JSON.stringify(loginData));\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: 'Invalid credentials'\n      };\n    }\n  };\n  const logout = () => {\n    setClient(null);\n    localStorage.removeItem('fifo_client');\n  };\n  const value = {\n    client,\n    login,\n    logout,\n    loading,\n    isAuthenticated: !!client\n  };\n  return /*#__PURE__*/_jsxDEV(ClientContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s2(ClientProvider, \"/LHhdaDqA5segNTB23Vi+2i0azg=\");\n_c = ClientProvider;\nvar _c;\n$RefreshReg$(_c, \"ClientProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ClientContext","useClient","_s","context","Error","ClientProvider","children","_s2","client","setClient","loading","setLoading","storedClient","localStorage","getItem","clientData","JSON","parse","e","removeItem","login","clientId","password","response","fetch","method","headers","body","stringify","client_id","ok","json","setItem","success","error","text","err","demoClients","company_name","email","loginData","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/src/contexts/ClientContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst ClientContext = createContext({});\n\nexport const useClient = () => {\n  const context = useContext(ClientContext);\n  if (!context) {\n    throw new Error('useClient must be used within ClientProvider');\n  }\n  return context;\n};\n\nexport const ClientProvider = ({ children }) => {\n  const [client, setClient] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing session\n    const storedClient = localStorage.getItem('fifo_client');\n    if (storedClient) {\n      try {\n        const clientData = JSON.parse(storedClient);\n        setClient(clientData);\n      } catch (e) {\n        localStorage.removeItem('fifo_client');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (clientId, password) => {\n    try {\n      // Simple login - in production this would be an API call\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ client_id: clientId, password })\n      });\n\n      if (response.ok) {\n        const clientData = await response.json();\n        setClient(clientData);\n        localStorage.setItem('fifo_client', JSON.stringify(clientData));\n        return { success: true };\n      } else {\n        const error = await response.text();\n        return { success: false, error };\n      }\n    } catch (err) {\n      // Demo: Simple credential check\n      const demoClients = {\n        'acme_corp': { password: 'test123', company_name: 'Acme Corp', email: 'test1@acme.com' },\n        'beta_industries': { password: 'test456', company_name: 'Beta Industries', email: 'test2@beta.com' }\n      };\n      \n      const clientData = demoClients[clientId];\n      \n      if (clientData && password === clientData.password) {\n        const loginData = {\n          client_id: clientId,\n          company_name: clientData.company_name,\n          email: clientData.email\n        };\n        setClient(loginData);\n        localStorage.setItem('fifo_client', JSON.stringify(loginData));\n        return { success: true };\n      }\n      \n      return { success: false, error: 'Invalid credentials' };\n    }\n  };\n\n  const logout = () => {\n    setClient(null);\n    localStorage.removeItem('fifo_client');\n  };\n\n  const value = {\n    client,\n    login,\n    logout,\n    loading,\n    isAuthenticated: !!client\n  };\n\n  return (\n    <ClientContext.Provider value={value}>\n      {children}\n    </ClientContext.Provider>\n  );\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}