{"ast":null,"code":"var _jsxFileName = \"/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/src/contexts/ClientContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClientContext = /*#__PURE__*/createContext({});\nexport const useClient = () => {\n  _s();\n  const context = useContext(ClientContext);\n  if (!context) {\n    throw new Error('useClient must be used within ClientProvider');\n  }\n  return context;\n};\n_s(useClient, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ClientProvider = ({\n  children\n}) => {\n  _s2();\n  const [client, setClient] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for existing session\n    const storedClient = localStorage.getItem('fifo_client');\n    if (storedClient) {\n      try {\n        const clientData = JSON.parse(storedClient);\n        setClient(clientData);\n      } catch (e) {\n        localStorage.removeItem('fifo_client');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (clientId, password) => {\n    // Demo: Simple credential check (for beta deployment)\n    const demoClients = {\n      'acme_corp': {\n        password: 'test123',\n        company_name: 'Acme Corp',\n        email: 'test1@acme.com'\n      },\n      'beta_industries': {\n        password: 'test456',\n        company_name: 'Beta Industries',\n        email: 'test2@beta.com'\n      },\n      '1001': {\n        password: 'client1001',\n        company_name: 'FirstLot Client 1001',\n        email: 'client1001@firstlot.co'\n      }\n    };\n    const clientData = demoClients[clientId];\n    if (clientData && password === clientData.password) {\n      const loginData = {\n        client_id: clientId,\n        company_name: clientData.company_name,\n        email: clientData.email\n      };\n      setClient(loginData);\n      localStorage.setItem('fifo_client', JSON.stringify(loginData));\n      return {\n        success: true\n      };\n    }\n    return {\n      success: false,\n      error: 'Invalid credentials'\n    };\n  };\n  const logout = () => {\n    setClient(null);\n    localStorage.removeItem('fifo_client');\n  };\n  const value = {\n    client,\n    login,\n    logout,\n    loading,\n    isAuthenticated: !!client\n  };\n  return /*#__PURE__*/_jsxDEV(ClientContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s2(ClientProvider, \"/LHhdaDqA5segNTB23Vi+2i0azg=\");\n_c = ClientProvider;\nvar _c;\n$RefreshReg$(_c, \"ClientProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ClientContext","useClient","_s","context","Error","ClientProvider","children","_s2","client","setClient","loading","setLoading","storedClient","localStorage","getItem","clientData","JSON","parse","e","removeItem","login","clientId","password","demoClients","company_name","email","loginData","client_id","setItem","stringify","success","error","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/src/contexts/ClientContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst ClientContext = createContext({});\n\nexport const useClient = () => {\n  const context = useContext(ClientContext);\n  if (!context) {\n    throw new Error('useClient must be used within ClientProvider');\n  }\n  return context;\n};\n\nexport const ClientProvider = ({ children }) => {\n  const [client, setClient] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing session\n    const storedClient = localStorage.getItem('fifo_client');\n    if (storedClient) {\n      try {\n        const clientData = JSON.parse(storedClient);\n        setClient(clientData);\n      } catch (e) {\n        localStorage.removeItem('fifo_client');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (clientId, password) => {\n    // Demo: Simple credential check (for beta deployment)\n    const demoClients = {\n      'acme_corp': { password: 'test123', company_name: 'Acme Corp', email: 'test1@acme.com' },\n      'beta_industries': { password: 'test456', company_name: 'Beta Industries', email: 'test2@beta.com' },\n      '1001': { password: 'client1001', company_name: 'FirstLot Client 1001', email: 'client1001@firstlot.co' }\n    };\n    \n    const clientData = demoClients[clientId];\n    \n    if (clientData && password === clientData.password) {\n      const loginData = {\n        client_id: clientId,\n        company_name: clientData.company_name,\n        email: clientData.email\n      };\n      setClient(loginData);\n      localStorage.setItem('fifo_client', JSON.stringify(loginData));\n      return { success: true };\n    }\n    \n    return { success: false, error: 'Invalid credentials' };\n  };\n\n  const logout = () => {\n    setClient(null);\n    localStorage.removeItem('fifo_client');\n  };\n\n  const value = {\n    client,\n    login,\n    logout,\n    loading,\n    isAuthenticated: !!client\n  };\n\n  return (\n    <ClientContext.Provider value={value}>\n      {children}\n    </ClientContext.Provider>\n  );\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}