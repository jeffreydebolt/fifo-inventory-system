{"ast":null,"code":"import { hasTracingEnabled, getCurrentScope, getClient, startInactiveSpan, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, getIsolationScope, spanToTraceHeader, getDynamicSamplingContextFromSpan, getDynamicSamplingContextFromClient, setHttpStatus } from '@sentry/core';\nimport { parseUrl, generateSentryTraceHeader, dynamicSamplingContextToSentryBaggageHeader, isInstanceOf, BAGGAGE_HEADER_NAME } from '@sentry/utils';\n\n/**\n * Create and track fetch request spans for usage in combination with `addInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction instrumentFetchRequest(handlerData, shouldCreateSpan, shouldAttachHeaders, spans, spanOrigin = 'auto.http.browser') {\n  if (!hasTracingEnabled() || !handlerData.fetchData) {\n    return undefined;\n  }\n  const shouldCreateSpanResult = shouldCreateSpan(handlerData.fetchData.url);\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n    const span = spans[spanId];\n    if (span) {\n      endSpan(span, handlerData);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n  const scope = getCurrentScope();\n  const client = getClient();\n  const {\n    method,\n    url\n  } = handlerData.fetchData;\n  const fullUrl = getFullURL(url);\n  const host = fullUrl ? parseUrl(fullUrl).host : undefined;\n  const span = shouldCreateSpanResult ? startInactiveSpan({\n    name: `${method} ${url}`,\n    onlyIfParent: true,\n    attributes: {\n      url,\n      type: 'fetch',\n      'http.method': method,\n      'http.url': fullUrl,\n      'server.address': host,\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin\n    },\n    op: 'http.client'\n  }) : undefined;\n  if (span) {\n    handlerData.fetchData.__span = span.spanContext().spanId;\n    spans[span.spanContext().spanId] = span;\n  }\n  if (shouldAttachHeaders(handlerData.fetchData.url) && client) {\n    const request = handlerData.args[0];\n\n    // In case the user hasn't set the second argument of a fetch call we default it to `{}`.\n    handlerData.args[1] = handlerData.args[1] || {};\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = handlerData.args[1];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n    options.headers = addTracingHeadersToFetchRequest(request, client, scope, options, span);\n  }\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers\n */\nfunction addTracingHeadersToFetchRequest(request,\n// unknown is actually type Request but we can't export DOM types from this package,\nclient, scope, options, requestSpan) {\n  // eslint-disable-next-line deprecation/deprecation\n  const span = requestSpan || scope.getSpan();\n  const isolationScope = getIsolationScope();\n  const {\n    traceId,\n    spanId,\n    sampled,\n    dsc\n  } = {\n    ...isolationScope.getPropagationContext(),\n    ...scope.getPropagationContext()\n  };\n  const sentryTraceHeader = span ? spanToTraceHeader(span) : generateSentryTraceHeader(traceId, spanId, sampled);\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dsc || (span ? getDynamicSamplingContextFromSpan(span) : getDynamicSamplingContextFromClient(traceId, client, scope)));\n  const headers = options.headers || (typeof Request !== 'undefined' && isInstanceOf(request, Request) ? request.headers : undefined);\n  if (!headers) {\n    return {\n      'sentry-trace': sentryTraceHeader,\n      baggage: sentryBaggageHeader\n    };\n  } else if (typeof Headers !== 'undefined' && isInstanceOf(headers, Headers)) {\n    const newHeaders = new Headers(headers);\n    newHeaders.append('sentry-trace', sentryTraceHeader);\n    if (sentryBaggageHeader) {\n      // If the same header is appended multiple times the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.append(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n    return newHeaders;\n  } else if (Array.isArray(headers)) {\n    const newHeaders = [...headers, ['sentry-trace', sentryTraceHeader]];\n    if (sentryBaggageHeader) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push([BAGGAGE_HEADER_NAME, sentryBaggageHeader]);\n    }\n    return newHeaders;\n  } else {\n    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    const newBaggageHeaders = [];\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders.push(...existingBaggageHeader);\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(existingBaggageHeader);\n    }\n    if (sentryBaggageHeader) {\n      newBaggageHeaders.push(sentryBaggageHeader);\n    }\n    return {\n      ...headers,\n      'sentry-trace': sentryTraceHeader,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined\n    };\n  }\n}\nfunction getFullURL(url) {\n  try {\n    const parsed = new URL(url);\n    return parsed.href;\n  } catch (e) {\n    return undefined;\n  }\n}\nfunction endSpan(span, handlerData) {\n  if (handlerData.response) {\n    setHttpStatus(span, handlerData.response.status);\n    const contentLength = handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');\n    if (contentLength) {\n      const contentLengthNum = parseInt(contentLength);\n      if (contentLengthNum > 0) {\n        span.setAttribute('http.response_content_length', contentLengthNum);\n      }\n    }\n  } else if (handlerData.error) {\n    span.setStatus('internal_error');\n  }\n  span.end();\n}\nexport { addTracingHeadersToFetchRequest, instrumentFetchRequest };","map":{"version":3,"names":["instrumentFetchRequest","handlerData","shouldCreateSpan","shouldAttachHeaders","spans","spanOrigin","hasTracingEnabled","fetchData","undefined","shouldCreateSpanResult","url","endTimestamp","spanId","__span","span","endSpan","scope","getCurrentScope","client","getClient","method","fullUrl","getFullURL","host","parseUrl","startInactiveSpan","name","onlyIfParent","attributes","type","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","op","spanContext","request","args","options","headers","addTracingHeadersToFetchRequest","requestSpan","getSpan","isolationScope","getIsolationScope","traceId","sampled","dsc","getPropagationContext","sentryTraceHeader","spanToTraceHeader","generateSentryTraceHeader","sentryBaggageHeader","dynamicSamplingContextToSentryBaggageHeader","getDynamicSamplingContextFromSpan","getDynamicSamplingContextFromClient","Request","isInstanceOf","baggage","Headers","newHeaders","append","BAGGAGE_HEADER_NAME","Array","isArray","push","existingBaggageHeader","newBaggageHeaders","length","join","parsed","URL","href","e","response","setHttpStatus","status","contentLength","get","contentLengthNum","parseInt","setAttribute","error","setStatus","end"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/@sentry-internal/src/common/fetch.ts"],"sourcesContent":["import {\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  getClient,\n  getCurrentScope,\n  getDynamicSamplingContextFromClient,\n  getDynamicSamplingContextFromSpan,\n  getIsolationScope,\n  hasTracingEnabled,\n  setHttpStatus,\n  spanToTraceHeader,\n  startInactiveSpan,\n} from '@sentry/core';\nimport type { Client, HandlerDataFetch, Scope, Span, SpanOrigin } from '@sentry/types';\nimport {\n  BAGGAGE_HEADER_NAME,\n  dynamicSamplingContextToSentryBaggageHeader,\n  generateSentryTraceHeader,\n  isInstanceOf,\n  parseUrl,\n} from '@sentry/utils';\n\ntype PolymorphicRequestHeaders =\n  | Record<string, string | undefined>\n  | Array<[string, string]>\n  // the below is not preicsely the Header type used in Request, but it'll pass duck-typing\n  | {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      append: (key: string, value: string) => void;\n      get: (key: string) => string | null | undefined;\n    };\n\n/**\n * Create and track fetch request spans for usage in combination with `addInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nexport function instrumentFetchRequest(\n  handlerData: HandlerDataFetch,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n  spanOrigin: SpanOrigin = 'auto.http.browser',\n): Span | undefined {\n  if (!hasTracingEnabled() || !handlerData.fetchData) {\n    return undefined;\n  }\n\n  const shouldCreateSpanResult = shouldCreateSpan(handlerData.fetchData.url);\n\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      endSpan(span, handlerData);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const scope = getCurrentScope();\n  const client = getClient();\n\n  const { method, url } = handlerData.fetchData;\n\n  const fullUrl = getFullURL(url);\n  const host = fullUrl ? parseUrl(fullUrl).host : undefined;\n\n  const span = shouldCreateSpanResult\n    ? startInactiveSpan({\n        name: `${method} ${url}`,\n        onlyIfParent: true,\n        attributes: {\n          url,\n          type: 'fetch',\n          'http.method': method,\n          'http.url': fullUrl,\n          'server.address': host,\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n        },\n        op: 'http.client',\n      })\n    : undefined;\n\n  if (span) {\n    handlerData.fetchData.__span = span.spanContext().spanId;\n    spans[span.spanContext().spanId] = span;\n  }\n\n  if (shouldAttachHeaders(handlerData.fetchData.url) && client) {\n    const request: string | Request = handlerData.args[0];\n\n    // In case the user hasn't set the second argument of a fetch call we default it to `{}`.\n    handlerData.args[1] = handlerData.args[1] || {};\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options: { [key: string]: any } = handlerData.args[1];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n    options.headers = addTracingHeadersToFetchRequest(request, client, scope, options, span);\n  }\n\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers\n */\nexport function addTracingHeadersToFetchRequest(\n  request: string | unknown, // unknown is actually type Request but we can't export DOM types from this package,\n  client: Client,\n  scope: Scope,\n  options: {\n    headers?:\n      | {\n          [key: string]: string[] | string | undefined;\n        }\n      | PolymorphicRequestHeaders;\n  },\n  requestSpan?: Span,\n): PolymorphicRequestHeaders | undefined {\n  // eslint-disable-next-line deprecation/deprecation\n  const span = requestSpan || scope.getSpan();\n\n  const isolationScope = getIsolationScope();\n\n  const { traceId, spanId, sampled, dsc } = {\n    ...isolationScope.getPropagationContext(),\n    ...scope.getPropagationContext(),\n  };\n\n  const sentryTraceHeader = span ? spanToTraceHeader(span) : generateSentryTraceHeader(traceId, spanId, sampled);\n\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(\n    dsc ||\n      (span ? getDynamicSamplingContextFromSpan(span) : getDynamicSamplingContextFromClient(traceId, client, scope)),\n  );\n\n  const headers =\n    options.headers ||\n    (typeof Request !== 'undefined' && isInstanceOf(request, Request) ? (request as Request).headers : undefined);\n\n  if (!headers) {\n    return { 'sentry-trace': sentryTraceHeader, baggage: sentryBaggageHeader };\n  } else if (typeof Headers !== 'undefined' && isInstanceOf(headers, Headers)) {\n    const newHeaders = new Headers(headers as Headers);\n\n    newHeaders.append('sentry-trace', sentryTraceHeader);\n\n    if (sentryBaggageHeader) {\n      // If the same header is appended multiple times the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.append(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else if (Array.isArray(headers)) {\n    const newHeaders = [...headers, ['sentry-trace', sentryTraceHeader]];\n\n    if (sentryBaggageHeader) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push([BAGGAGE_HEADER_NAME, sentryBaggageHeader]);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else {\n    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    const newBaggageHeaders: string[] = [];\n\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders.push(...existingBaggageHeader);\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(existingBaggageHeader);\n    }\n\n    if (sentryBaggageHeader) {\n      newBaggageHeaders.push(sentryBaggageHeader);\n    }\n\n    return {\n      ...(headers as Exclude<typeof headers, Headers>),\n      'sentry-trace': sentryTraceHeader,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n\nfunction getFullURL(url: string): string | undefined {\n  try {\n    const parsed = new URL(url);\n    return parsed.href;\n  } catch {\n    return undefined;\n  }\n}\n\nfunction endSpan(span: Span, handlerData: HandlerDataFetch): void {\n  if (handlerData.response) {\n    setHttpStatus(span, handlerData.response.status);\n\n    const contentLength =\n      handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');\n\n    if (contentLength) {\n      const contentLengthNum = parseInt(contentLength);\n      if (contentLengthNum > 0) {\n        span.setAttribute('http.response_content_length', contentLengthNum);\n      }\n    }\n  } else if (handlerData.error) {\n    span.setStatus('internal_error');\n  }\n  span.end();\n}\n"],"mappings":";;;AAgCA;AACA;AACA;AACA;AACA;AACO,SAASA,sBAAsBA,CACpCC,WAAW,EACXC,gBAAgB,EAChBC,mBAAmB,EACnBC,KAAK,EACLC,UAAU,GAAe,mBAAmB,EAC1B;EAClB,IAAI,CAACC,iBAAiB,EAAG,IAAG,CAACL,WAAW,CAACM,SAAS,EAAE;IAClD,OAAOC,SAAS;EACpB;EAEE,MAAMC,sBAAuB,GAAEP,gBAAgB,CAACD,WAAW,CAACM,SAAS,CAACG,GAAG,CAAC;EAE1E,IAAIT,WAAW,CAACU,YAAa,IAAGF,sBAAsB,EAAE;IACtD,MAAMG,MAAO,GAAEX,WAAW,CAACM,SAAS,CAACM,MAAM;IAC3C,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,IAAK,GAAEV,KAAK,CAACQ,MAAM,CAAC;IAC1B,IAAIE,IAAI,EAAE;MACRC,OAAO,CAACD,IAAI,EAAEb,WAAW,CAAC;MAChC;MACM,OAAOG,KAAK,CAACQ,MAAM,CAAC;IAC1B;IACI,OAAOJ,SAAS;EACpB;EAEE,MAAMQ,KAAA,GAAQC,eAAe,EAAE;EAC/B,MAAMC,MAAA,GAASC,SAAS,EAAE;EAE1B,MAAM;IAAEC,MAAM;IAAEV;EAAA,CAAM,GAAET,WAAW,CAACM,SAAS;EAE7C,MAAMc,OAAQ,GAAEC,UAAU,CAACZ,GAAG,CAAC;EAC/B,MAAMa,IAAA,GAAOF,OAAA,GAAUG,QAAQ,CAACH,OAAO,CAAC,CAACE,IAAK,GAAEf,SAAS;EAEzD,MAAMM,IAAA,GAAOL,sBAAA,GACTgB,iBAAiB,CAAC;IAChBC,IAAI,EAAE,GAACN,MAAA,IAAAV,GAAA;IACAiB,YAAA;IACAC,UAAA;MACAlB,GAAA;MACAmB,IAAA;MACA,eAAAT,MAAA;MACA,YAAAC,OAAA;MACA,kBAAAE,IAAA;MACA,CAAAO,gCAAA,GAAAzB;IACA;IACA0B,EAAA;EACA,KACAvB,SAAA;EAEA,IAAAM,IAAA;IACAb,WAAA,CAAAM,SAAA,CAAAM,MAAA,GAAAC,IAAA,CAAAkB,WAAA,GAAApB,MAAA;IACAR,KAAA,CAAAU,IAAA,CAAAkB,WAAA,GAAApB,MAAA,IAAAE,IAAA;EACA;EAEA,IAAAX,mBAAA,CAAAF,WAAA,CAAAM,SAAA,CAAAG,GAAA,KAAAQ,MAAA;IACA,MAAAe,OAAA,GAAAhC,WAAA,CAAAiC,IAAA;;IAEA;IACAjC,WAAA,CAAAiC,IAAA,MAAAjC,WAAA,CAAAiC,IAAA;;IAEA;IACA,MAAAC,OAAA,GAAAlC,WAAA,CAAAiC,IAAA;;IAEA;IACAC,OAAA,CAAAC,OAAA,GAAAC,+BAAA,CAAAJ,OAAA,EAAAf,MAAA,EAAAF,KAAA,EAAAmB,OAAA,EAAArB,IAAA;EACA;EAEA,OAAAA,IAAA;AACA;;AAEA;AACA;AACA;AACA,SAAAuB,gCACAJ,OAAA;AAAA;AACAf,MAAA,EACAF,KAAA,EACAmB,OAAA,EAOAG,WAAA,EACA;EACA;EACA,MAAAxB,IAAA,GAAAwB,WAAA,IAAAtB,KAAA,CAAAuB,OAAA;EAEA,MAAAC,cAAA,GAAAC,iBAAA;EAEA;IAAAC,OAAA;IAAA9B,MAAA;IAAA+B,OAAA;IAAAC;EAAA;IACA,GAAAJ,cAAA,CAAAK,qBAAA;IACA,GAAA7B,KAAA,CAAA6B,qBAAA;EACA;EAEA,MAAAC,iBAAA,GAAAhC,IAAA,GAAAiC,iBAAA,CAAAjC,IAAA,IAAAkC,yBAAA,CAAAN,OAAA,EAAA9B,MAAA,EAAA+B,OAAA;EAEA,MAAAM,mBAAA,GAAAC,2CAAA,CACAN,GAAA,KACA9B,IAAA,GAAAqC,iCAAA,CAAArC,IAAA,IAAAsC,mCAAA,CAAAV,OAAA,EAAAxB,MAAA,EAAAF,KAAA,EACA;EAEA,MAAAoB,OAAA,GACAD,OAAA,CAAAC,OAAA,KACA,OAAAiB,OAAA,oBAAAC,YAAA,CAAArB,OAAA,EAAAoB,OAAA,IAAApB,OAAA,CAAAG,OAAA,GAAA5B,SAAA;EAEA,KAAA4B,OAAA;IACA;MAAA,gBAAAU,iBAAA;MAAAS,OAAA,EAAAN;IAAA;EACA,kBAAAO,OAAA,oBAAAF,YAAA,CAAAlB,OAAA,EAAAoB,OAAA;IACA,MAAAC,UAAA,OAAAD,OAAA,CAAApB,OAAA;IAEAqB,UAAA,CAAAC,MAAA,iBAAAZ,iBAAA;IAEA,IAAAG,mBAAA;MACA;MACA;MACAQ,UAAA,CAAAC,MAAA,CAAAC,mBAAA,EAAAV,mBAAA;IACA;IAEA,OAAAQ,UAAA;EACA,WAAAG,KAAA,CAAAC,OAAA,CAAAzB,OAAA;IACA,MAAAqB,UAAA,OAAArB,OAAA,mBAAAU,iBAAA;IAEA,IAAAG,mBAAA;MACA;MACA;MACAQ,UAAA,CAAAK,IAAA,EAAAH,mBAAA,EAAAV,mBAAA;IACA;IAEA,OAAAQ,UAAA;EACA;IACA,MAAAM,qBAAA,gBAAA3B,OAAA,GAAAA,OAAA,CAAAmB,OAAA,GAAA/C,SAAA;IACA,MAAAwD,iBAAA;IAEA,IAAAJ,KAAA,CAAAC,OAAA,CAAAE,qBAAA;MACAC,iBAAA,CAAAF,IAAA,IAAAC,qBAAA;IACA,WAAAA,qBAAA;MACAC,iBAAA,CAAAF,IAAA,CAAAC,qBAAA;IACA;IAEA,IAAAd,mBAAA;MACAe,iBAAA,CAAAF,IAAA,CAAAb,mBAAA;IACA;IAEA;MACA,GAAAb,OAAA;MACA,gBAAAU,iBAAA;MACAS,OAAA,EAAAS,iBAAA,CAAAC,MAAA,OAAAD,iBAAA,CAAAE,IAAA,QAAA1D;IACA;EACA;AACA;AAEA,SAAAc,WAAAZ,GAAA;EACA;IACA,MAAAyD,MAAA,OAAAC,GAAA,CAAA1D,GAAA;IACA,OAAAyD,MAAA,CAAAE,IAAA;EACA,SAAAC,CAAA;IACA,OAAA9D,SAAA;EACA;AACA;AAEA,SAAAO,QAAAD,IAAA,EAAAb,WAAA;EACA,IAAAA,WAAA,CAAAsE,QAAA;IACAC,aAAA,CAAA1D,IAAA,EAAAb,WAAA,CAAAsE,QAAA,CAAAE,MAAA;IAEA,MAAAC,aAAA,GACAzE,WAAA,CAAAsE,QAAA,IAAAtE,WAAA,CAAAsE,QAAA,CAAAnC,OAAA,IAAAnC,WAAA,CAAAsE,QAAA,CAAAnC,OAAA,CAAAuC,GAAA;IAEA,IAAAD,aAAA;MACA,MAAAE,gBAAA,GAAAC,QAAA,CAAAH,aAAA;MACA,IAAAE,gBAAA;QACA9D,IAAA,CAAAgE,YAAA,iCAAAF,gBAAA;MACA;IACA;EACA,WAAA3E,WAAA,CAAA8E,KAAA;IACAjE,IAAA,CAAAkE,SAAA;EACA;EACAlE,IAAA,CAAAmE,GAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}