{"ast":null,"code":"import { defineIntegration, convertIntegrationFnToClass } from '@sentry/core';\nimport { stripUrlQueryAndFragment, addContextToFrame, GLOBAL_OBJ } from '@sentry/utils';\nconst WINDOW = GLOBAL_OBJ;\nconst DEFAULT_LINES_OF_CONTEXT = 7;\nconst INTEGRATION_NAME = 'ContextLines';\nconst _contextLinesIntegration = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const contextLines = options.frameContextLines != null ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {},\n    // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    }\n  };\n};\nconst contextLinesIntegration = defineIntegration(_contextLinesIntegration);\n\n/**\n * Collects source context lines around the lines of stackframes pointing to JS embedded in\n * the current page's HTML.\n *\n * This integration DOES NOT work for stack frames pointing to JS files that are loaded by the browser.\n * For frames pointing to files, context lines are added during ingestion and symbolication\n * by attempting to download the JS files to the Sentry backend.\n *\n * Use this integration if you have inline JS code in HTML pages that can't be accessed\n * by our backend (e.g. due to a login-protected page).\n *\n * @deprecated Use `contextLinesIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst ContextLines = convertIntegrationFnToClass(INTEGRATION_NAME, contextLinesIntegration);\n\n/**\n * Processes an event and adds context lines.\n */\nfunction addSourceContext(event, contextLines) {\n  const doc = WINDOW.document;\n  const htmlFilename = WINDOW.location && stripUrlQueryAndFragment(WINDOW.location.href);\n  if (!doc || !htmlFilename) {\n    return event;\n  }\n  const exceptions = event.exception && event.exception.values;\n  if (!exceptions || !exceptions.length) {\n    return event;\n  }\n  const html = doc.documentElement.innerHTML;\n  if (!html) {\n    return event;\n  }\n  const htmlLines = ['<!DOCTYPE html>', '<html>', ...html.split('\\n'), '</html>'];\n  exceptions.forEach(exception => {\n    const stacktrace = exception.stacktrace;\n    if (stacktrace && stacktrace.frames) {\n      stacktrace.frames = stacktrace.frames.map(frame => applySourceContextToFrame(frame, htmlLines, htmlFilename, contextLines));\n    }\n  });\n  return event;\n}\n\n/**\n * Only exported for testing\n */\nfunction applySourceContextToFrame(frame, htmlLines, htmlFilename, linesOfContext) {\n  if (frame.filename !== htmlFilename || !frame.lineno || !htmlLines.length) {\n    return frame;\n  }\n  addContextToFrame(htmlLines, frame, linesOfContext);\n  return frame;\n}\nexport { ContextLines, applySourceContextToFrame, contextLinesIntegration };","map":{"version":3,"names":["WINDOW","GLOBAL_OBJ","DEFAULT_LINES_OF_CONTEXT","INTEGRATION_NAME","_contextLinesIntegration","options","arguments","length","undefined","contextLines","frameContextLines","name","setupOnce","processEvent","event","addSourceContext","contextLinesIntegration","defineIntegration","ContextLines","convertIntegrationFnToClass","doc","document","htmlFilename","location","stripUrlQueryAndFragment","href","exceptions","exception","values","html","documentElement","innerHTML","htmlLines","split","forEach","stacktrace","frames","map","frame","applySourceContextToFrame","linesOfContext","filename","lineno","addContextToFrame"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/contextlines.ts"],"sourcesContent":["import { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport type { Event, Integration, IntegrationClass, IntegrationFn, StackFrame } from '@sentry/types';\nimport { GLOBAL_OBJ, addContextToFrame, stripUrlQueryAndFragment } from '@sentry/utils';\n\nconst WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n\nconst DEFAULT_LINES_OF_CONTEXT = 7;\n\nconst INTEGRATION_NAME = 'ContextLines';\n\ninterface ContextLinesOptions {\n  /**\n   * Sets the number of context lines for each frame when loading a file.\n   * Defaults to 7.\n   *\n   * Set to 0 to disable loading and inclusion of source files.\n   **/\n  frameContextLines?: number;\n}\n\nconst _contextLinesIntegration = ((options: ContextLinesOptions = {}) => {\n  const contextLines = options.frameContextLines != null ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const contextLinesIntegration = defineIntegration(_contextLinesIntegration);\n\n/**\n * Collects source context lines around the lines of stackframes pointing to JS embedded in\n * the current page's HTML.\n *\n * This integration DOES NOT work for stack frames pointing to JS files that are loaded by the browser.\n * For frames pointing to files, context lines are added during ingestion and symbolication\n * by attempting to download the JS files to the Sentry backend.\n *\n * Use this integration if you have inline JS code in HTML pages that can't be accessed\n * by our backend (e.g. due to a login-protected page).\n *\n * @deprecated Use `contextLinesIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const ContextLines = convertIntegrationFnToClass(INTEGRATION_NAME, contextLinesIntegration) as IntegrationClass<\n  Integration & { processEvent: (event: Event) => Event }\n> & { new (options?: { frameContextLines?: number }): Integration };\n\n/**\n * Processes an event and adds context lines.\n */\nfunction addSourceContext(event: Event, contextLines: number): Event {\n  const doc = WINDOW.document;\n  const htmlFilename = WINDOW.location && stripUrlQueryAndFragment(WINDOW.location.href);\n  if (!doc || !htmlFilename) {\n    return event;\n  }\n\n  const exceptions = event.exception && event.exception.values;\n  if (!exceptions || !exceptions.length) {\n    return event;\n  }\n\n  const html = doc.documentElement.innerHTML;\n  if (!html) {\n    return event;\n  }\n\n  const htmlLines = ['<!DOCTYPE html>', '<html>', ...html.split('\\n'), '</html>'];\n\n  exceptions.forEach(exception => {\n    const stacktrace = exception.stacktrace;\n    if (stacktrace && stacktrace.frames) {\n      stacktrace.frames = stacktrace.frames.map(frame =>\n        applySourceContextToFrame(frame, htmlLines, htmlFilename, contextLines),\n      );\n    }\n  });\n\n  return event;\n}\n\n/**\n * Only exported for testing\n */\nexport function applySourceContextToFrame(\n  frame: StackFrame,\n  htmlLines: string[],\n  htmlFilename: string,\n  linesOfContext: number,\n): StackFrame {\n  if (frame.filename !== htmlFilename || !frame.lineno || !htmlLines.length) {\n    return frame;\n  }\n\n  addContextToFrame(htmlLines, frame, linesOfContext);\n\n  return frame;\n}\n"],"mappings":";;AAIA,MAAMA,MAAA,GAASC,UAAW;AAE1B,MAAMC,wBAAA,GAA2B,CAAC;AAElC,MAAMC,gBAAA,GAAmB,cAAc;AAYvC,MAAMC,wBAAA,GAA4B,SAAAA,CAAA,EAAuC;EAAA,IAAtCC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAwB,EAAE;EAClE,MAAMG,YAAA,GAAeJ,OAAO,CAACK,iBAAA,IAAqB,OAAOL,OAAO,CAACK,iBAAA,GAAoBR,wBAAwB;EAE7G,OAAO;IACLS,IAAI,EAAER,gBAAgB;IAC1B;IACIS,SAASA,CAAA,EAAG,EAAE;IAAA;IACdC,YAAYA,CAACC,KAAK,EAAE;MAClB,OAAOC,gBAAgB,CAACD,KAAK,EAAEL,YAAY,CAAC;IAClD;EACA,CAAG;AACH,CAAG;MAEUO,uBAAwB,GAAEC,iBAAiB,CAACb,wBAAwB;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMc,YAAA,GAAeC,2BAA2B,CAAChB,gBAAgB,EAAEa,uBAAuB,CAAE;;AAInG;AACA;AACA;AACA,SAASD,gBAAgBA,CAACD,KAAK,EAASL,YAAY,EAAiB;EACnE,MAAMW,GAAA,GAAMpB,MAAM,CAACqB,QAAQ;EAC3B,MAAMC,YAAA,GAAetB,MAAM,CAACuB,QAAS,IAAGC,wBAAwB,CAACxB,MAAM,CAACuB,QAAQ,CAACE,IAAI,CAAC;EACtF,IAAI,CAACL,GAAA,IAAO,CAACE,YAAY,EAAE;IACzB,OAAOR,KAAK;EAChB;EAEE,MAAMY,UAAW,GAAEZ,KAAK,CAACa,SAAU,IAAGb,KAAK,CAACa,SAAS,CAACC,MAAM;EAC5D,IAAI,CAACF,UAAA,IAAc,CAACA,UAAU,CAACnB,MAAM,EAAE;IACrC,OAAOO,KAAK;EAChB;EAEE,MAAMe,IAAK,GAAET,GAAG,CAACU,eAAe,CAACC,SAAS;EAC1C,IAAI,CAACF,IAAI,EAAE;IACT,OAAOf,KAAK;EAChB;EAEE,MAAMkB,SAAU,GAAE,CAAC,iBAAiB,EAAE,QAAQ,EAAE,GAAGH,IAAI,CAACI,KAAK,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC;EAE/EP,UAAU,CAACQ,OAAO,CAACP,SAAA,IAAa;IAC9B,MAAMQ,UAAA,GAAaR,SAAS,CAACQ,UAAU;IACvC,IAAIA,UAAA,IAAcA,UAAU,CAACC,MAAM,EAAE;MACnCD,UAAU,CAACC,MAAA,GAASD,UAAU,CAACC,MAAM,CAACC,GAAG,CAACC,KAAM,IAC9CC,yBAAyB,CAACD,KAAK,EAAEN,SAAS,EAAEV,YAAY,EAAEb,YAAY,CAC9E,CAAO;IACP;EACA,CAAG,CAAC;EAEF,OAAOK,KAAK;AACd;;AAEA;AACA;AACA;AACO,SAASyB,yBAAyBA,CACvCD,KAAK,EACLN,SAAS,EACTV,YAAY,EACZkB,cAAc,EACF;EACZ,IAAIF,KAAK,CAACG,QAAA,KAAanB,YAAa,IAAG,CAACgB,KAAK,CAACI,MAAO,IAAG,CAACV,SAAS,CAACzB,MAAM,EAAE;IACzE,OAAO+B,KAAK;EAChB;EAEEK,iBAAiB,CAACX,SAAS,EAAEM,KAAK,EAAEE,cAAc,CAAC;EAEnD,OAAOF,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}