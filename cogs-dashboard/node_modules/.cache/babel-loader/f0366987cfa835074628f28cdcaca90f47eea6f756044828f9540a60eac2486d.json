{"ast":null,"code":"import api from './api';\nexport const runsService = {\n  // Get all runs for a tenant\n  async getRuns(tenantId, params = {}) {\n    const response = await api.get('/api/v1/runs', {\n      params: {\n        tenant_id: tenantId,\n        ...params\n      }\n    });\n    return response.data;\n  },\n  // Get a specific run\n  async getRun(runId) {\n    const response = await api.get(`/api/v1/runs/${runId}`);\n    return response.data;\n  },\n  // Create and execute a new run\n  async createRun(data) {\n    const response = await api.post('/api/v1/runs', data);\n    return response.data;\n  },\n  // Rollback a run\n  async rollbackRun(runId) {\n    const response = await api.post(`/api/v1/runs/${runId}/rollback`);\n    return response.data;\n  },\n  // Get journal entry for a run\n  async getJournalEntry(runId, format = 'csv') {\n    const response = await api.get(`/api/v1/runs/${runId}/journal-entry`, {\n      params: {\n        format\n      }\n    });\n    return response.data;\n  },\n  // Upload lots file\n  async uploadLots(tenantId, file) {\n    const formData = new FormData();\n    formData.append('tenant_id', tenantId);\n    formData.append('file', file);\n    const response = await api.post('/api/v1/files/lots', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Upload sales file\n  async uploadSales(tenantId, file) {\n    const formData = new FormData();\n    formData.append('tenant_id', tenantId);\n    formData.append('file', file);\n    const response = await api.post('/api/v1/files/sales', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Get CSV templates\n  async getLotsTemplate() {\n    const response = await api.get('/api/v1/files/templates/lots', {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  async getSalesTemplate() {\n    const response = await api.get('/api/v1/files/templates/sales', {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","runsService","getRuns","tenantId","params","response","get","tenant_id","data","getRun","runId","createRun","post","rollbackRun","getJournalEntry","format","uploadLots","file","formData","FormData","append","headers","uploadSales","getLotsTemplate","responseType","getSalesTemplate"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/src/services/runs.js"],"sourcesContent":["import api from './api';\n\nexport const runsService = {\n  // Get all runs for a tenant\n  async getRuns(tenantId, params = {}) {\n    const response = await api.get('/api/v1/runs', {\n      params: { tenant_id: tenantId, ...params }\n    });\n    return response.data;\n  },\n\n  // Get a specific run\n  async getRun(runId) {\n    const response = await api.get(`/api/v1/runs/${runId}`);\n    return response.data;\n  },\n\n  // Create and execute a new run\n  async createRun(data) {\n    const response = await api.post('/api/v1/runs', data);\n    return response.data;\n  },\n\n  // Rollback a run\n  async rollbackRun(runId) {\n    const response = await api.post(`/api/v1/runs/${runId}/rollback`);\n    return response.data;\n  },\n\n  // Get journal entry for a run\n  async getJournalEntry(runId, format = 'csv') {\n    const response = await api.get(`/api/v1/runs/${runId}/journal-entry`, {\n      params: { format }\n    });\n    return response.data;\n  },\n\n  // Upload lots file\n  async uploadLots(tenantId, file) {\n    const formData = new FormData();\n    formData.append('tenant_id', tenantId);\n    formData.append('file', file);\n\n    const response = await api.post('/api/v1/files/lots', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // Upload sales file\n  async uploadSales(tenantId, file) {\n    const formData = new FormData();\n    formData.append('tenant_id', tenantId);\n    formData.append('file', file);\n\n    const response = await api.post('/api/v1/files/sales', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // Get CSV templates\n  async getLotsTemplate() {\n    const response = await api.get('/api/v1/files/templates/lots', {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n\n  async getSalesTemplate() {\n    const response = await api.get('/api/v1/files/templates/sales', {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,WAAW,GAAG;EACzB;EACA,MAAMC,OAAOA,CAACC,QAAQ,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;IACnC,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,cAAc,EAAE;MAC7CF,MAAM,EAAE;QAAEG,SAAS,EAAEJ,QAAQ;QAAE,GAAGC;MAAO;IAC3C,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED;EACA,MAAMC,MAAMA,CAACC,KAAK,EAAE;IAClB,MAAML,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,gBAAgBI,KAAK,EAAE,CAAC;IACvD,OAAOL,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED;EACA,MAAMG,SAASA,CAACH,IAAI,EAAE;IACpB,MAAMH,QAAQ,GAAG,MAAML,GAAG,CAACY,IAAI,CAAC,cAAc,EAAEJ,IAAI,CAAC;IACrD,OAAOH,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED;EACA,MAAMK,WAAWA,CAACH,KAAK,EAAE;IACvB,MAAML,QAAQ,GAAG,MAAML,GAAG,CAACY,IAAI,CAAC,gBAAgBF,KAAK,WAAW,CAAC;IACjE,OAAOL,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED;EACA,MAAMM,eAAeA,CAACJ,KAAK,EAAEK,MAAM,GAAG,KAAK,EAAE;IAC3C,MAAMV,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,gBAAgBI,KAAK,gBAAgB,EAAE;MACpEN,MAAM,EAAE;QAAEW;MAAO;IACnB,CAAC,CAAC;IACF,OAAOV,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED;EACA,MAAMQ,UAAUA,CAACb,QAAQ,EAAEc,IAAI,EAAE;IAC/B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEjB,QAAQ,CAAC;IACtCe,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAE7B,MAAMZ,QAAQ,GAAG,MAAML,GAAG,CAACY,IAAI,CAAC,oBAAoB,EAAEM,QAAQ,EAAE;MAC9DG,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOhB,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED;EACA,MAAMc,WAAWA,CAACnB,QAAQ,EAAEc,IAAI,EAAE;IAChC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEjB,QAAQ,CAAC;IACtCe,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAE7B,MAAMZ,QAAQ,GAAG,MAAML,GAAG,CAACY,IAAI,CAAC,qBAAqB,EAAEM,QAAQ,EAAE;MAC/DG,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOhB,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED;EACA,MAAMe,eAAeA,CAAA,EAAG;IACtB,MAAMlB,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,8BAA8B,EAAE;MAC7DkB,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAOnB,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED,MAAMiB,gBAAgBA,CAAA,EAAG;IACvB,MAAMpB,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,+BAA+B,EAAE;MAC9DkB,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAOnB,QAAQ,CAACG,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}