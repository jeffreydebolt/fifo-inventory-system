{"ast":null,"code":"import { defineIntegration, convertIntegrationFnToClass, getClient, withScope, captureMessage } from '@sentry/core';\nimport { supportsReportingObserver, GLOBAL_OBJ } from '@sentry/utils';\nconst WINDOW = GLOBAL_OBJ;\nconst INTEGRATION_NAME = 'ReportingObserver';\nconst SETUP_CLIENTS = new WeakMap();\nconst _reportingObserverIntegration = (options = {}) => {\n  const types = options.types || ['crash', 'deprecation', 'intervention'];\n\n  /** Handler for the reporting observer. */\n  function handler(reports) {\n    if (!SETUP_CLIENTS.has(getClient())) {\n      return;\n    }\n    for (const report of reports) {\n      withScope(scope => {\n        scope.setExtra('url', report.url);\n        const label = `ReportingObserver [${report.type}]`;\n        let details = 'No details available';\n        if (report.body) {\n          // Object.keys doesn't work on ReportBody, as all properties are inheirted\n          const plainBody = {};\n\n          // eslint-disable-next-line guard-for-in\n          for (const prop in report.body) {\n            plainBody[prop] = report.body[prop];\n          }\n          scope.setExtra('body', plainBody);\n          if (report.type === 'crash') {\n            const body = report.body;\n            // A fancy way to create a message out of crashId OR reason OR both OR fallback\n            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n          } else {\n            const body = report.body;\n            details = body.message || details;\n          }\n        }\n        captureMessage(`${label}: ${details}`);\n      });\n    }\n  }\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      if (!supportsReportingObserver()) {\n        return;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      const observer = new WINDOW.ReportingObserver(handler, {\n        buffered: true,\n        types\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      observer.observe();\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    }\n  };\n};\nconst reportingObserverIntegration = defineIntegration(_reportingObserverIntegration);\n\n/**\n * Reporting API integration - https://w3c.github.io/reporting/\n * @deprecated Use `reportingObserverIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst ReportingObserver = convertIntegrationFnToClass(INTEGRATION_NAME, reportingObserverIntegration);\nexport { ReportingObserver, reportingObserverIntegration };","map":{"version":3,"names":["WINDOW","GLOBAL_OBJ","INTEGRATION_NAME","SETUP_CLIENTS","WeakMap","_reportingObserverIntegration","options","types","handler","reports","has","getClient","report","withScope","scope","setExtra","url","label","type","details","body","plainBody","prop","crashId","reason","join","trim","message","captureMessage","name","setupOnce","supportsReportingObserver","observer","ReportingObserver","buffered","observe","setup","client","set","reportingObserverIntegration","defineIntegration","convertIntegrationFnToClass"],"sources":["/Users/jeffreydebolt/Documents/fifo/cogs-dashboard/node_modules/src/reportingobserver.ts"],"sourcesContent":["import { captureMessage, convertIntegrationFnToClass, defineIntegration, getClient, withScope } from '@sentry/core';\nimport type { Client, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport { GLOBAL_OBJ, supportsReportingObserver } from '@sentry/utils';\n\nconst WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n\nconst INTEGRATION_NAME = 'ReportingObserver';\n\ninterface Report {\n  [key: string]: unknown;\n  type: ReportTypes;\n  url: string;\n  body?: ReportBody;\n}\n\ntype ReportTypes = 'crash' | 'deprecation' | 'intervention';\n\ntype ReportBody = CrashReportBody | DeprecationReportBody | InterventionReportBody;\n\ninterface CrashReportBody {\n  [key: string]: unknown;\n  crashId: string;\n  reason?: string;\n}\n\ninterface DeprecationReportBody {\n  [key: string]: unknown;\n  id: string;\n  anticipatedRemoval?: Date;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\ninterface InterventionReportBody {\n  [key: string]: unknown;\n  id: string;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\ninterface ReportingObserverOptions {\n  types?: ReportTypes[];\n}\n\nconst SETUP_CLIENTS = new WeakMap<Client, boolean>();\n\nconst _reportingObserverIntegration = ((options: ReportingObserverOptions = {}) => {\n  const types = options.types || ['crash', 'deprecation', 'intervention'];\n\n  /** Handler for the reporting observer. */\n  function handler(reports: Report[]): void {\n    if (!SETUP_CLIENTS.has(getClient() as Client)) {\n      return;\n    }\n\n    for (const report of reports) {\n      withScope(scope => {\n        scope.setExtra('url', report.url);\n\n        const label = `ReportingObserver [${report.type}]`;\n        let details = 'No details available';\n\n        if (report.body) {\n          // Object.keys doesn't work on ReportBody, as all properties are inheirted\n          const plainBody: {\n            [key: string]: unknown;\n          } = {};\n\n          // eslint-disable-next-line guard-for-in\n          for (const prop in report.body) {\n            plainBody[prop] = report.body[prop];\n          }\n\n          scope.setExtra('body', plainBody);\n\n          if (report.type === 'crash') {\n            const body = report.body as CrashReportBody;\n            // A fancy way to create a message out of crashId OR reason OR both OR fallback\n            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n          } else {\n            const body = report.body as DeprecationReportBody | InterventionReportBody;\n            details = body.message || details;\n          }\n        }\n\n        captureMessage(`${label}: ${details}`);\n      });\n    }\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      if (!supportsReportingObserver()) {\n        return;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      const observer = new (WINDOW as any).ReportingObserver(handler, {\n        buffered: true,\n        types,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      observer.observe();\n    },\n\n    setup(client): void {\n      SETUP_CLIENTS.set(client, true);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const reportingObserverIntegration = defineIntegration(_reportingObserverIntegration);\n\n/**\n * Reporting API integration - https://w3c.github.io/reporting/\n * @deprecated Use `reportingObserverIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const ReportingObserver = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  reportingObserverIntegration,\n) as IntegrationClass<Integration & { setup: (client: Client) => void }> & {\n  new (options?: {\n    types?: ReportTypes[];\n  }): Integration;\n};\n"],"mappings":";;AAIA,MAAMA,MAAA,GAASC,UAAW;AAE1B,MAAMC,gBAAA,GAAmB,mBAAmB;AA0C5C,MAAMC,aAAc,GAAE,IAAIC,OAAO,EAAmB;AAEpD,MAAMC,6BAAA,GAAiCA,CAACC,OAAO,GAA6B,EAAE,KAAK;EACjF,MAAMC,KAAA,GAAQD,OAAO,CAACC,KAAA,IAAS,CAAC,OAAO,EAAE,aAAa,EAAE,cAAc,CAAC;;EAEzE;EACE,SAASC,OAAOA,CAACC,OAAO,EAAkB;IACxC,IAAI,CAACN,aAAa,CAACO,GAAG,CAACC,SAAS,EAAG,CAAU,EAAE;MAC7C;IACN;IAEI,KAAK,MAAMC,MAAO,IAAGH,OAAO,EAAE;MAC5BI,SAAS,CAACC,KAAA,IAAS;QACjBA,KAAK,CAACC,QAAQ,CAAC,KAAK,EAAEH,MAAM,CAACI,GAAG,CAAC;QAEjC,MAAMC,KAAM,GAAE,sBAAsBL,MAAM,CAACM,IAAI,GAAG;QAClD,IAAIC,OAAQ,GAAE,sBAAsB;QAEpC,IAAIP,MAAM,CAACQ,IAAI,EAAE;UACzB;UACU,MAAMC,SAAS,GAEX,EAAE;;UAEhB;UACU,KAAK,MAAMC,IAAA,IAAQV,MAAM,CAACQ,IAAI,EAAE;YAC9BC,SAAS,CAACC,IAAI,CAAE,GAAEV,MAAM,CAACQ,IAAI,CAACE,IAAI,CAAC;UAC/C;UAEUR,KAAK,CAACC,QAAQ,CAAC,MAAM,EAAEM,SAAS,CAAC;UAEjC,IAAIT,MAAM,CAACM,IAAK,KAAI,OAAO,EAAE;YAC3B,MAAME,IAAA,GAAOR,MAAM,CAACQ,IAAK;YACrC;YACYD,OAAA,GAAU,CAACC,IAAI,CAACG,OAAA,IAAW,EAAE,EAAEH,IAAI,CAACI,MAAA,IAAU,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,EAAG,IAAGP,OAAO;UACzF,OAAiB;YACL,MAAMC,IAAA,GAAOR,MAAM,CAACQ,IAAK;YACzBD,OAAA,GAAUC,IAAI,CAACO,OAAA,IAAWR,OAAO;UAC7C;QACA;QAEQS,cAAc,CAAC,GAACX,KAAA,KAAAE,OAAA;MACA;IACA;EACA;EAEA;IACAU,IAAA,EAAA3B,gBAAA;IACA4B,UAAA;MACA,KAAAC,yBAAA;QACA;MACA;;MAEA;MACA,MAAAC,QAAA,OAAAhC,MAAA,CAAAiC,iBAAA,CAAAzB,OAAA;QACA0B,QAAA;QACA3B;MACA;;MAEA;MACAyB,QAAA,CAAAG,OAAA;IACA;IAEAC,MAAAC,MAAA;MACAlC,aAAA,CAAAmC,GAAA,CAAAD,MAAA;IACA;EACA;AACA;AAEA,MAAAE,4BAAA,GAAAC,iBAAA,CAAAnC,6BAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAA4B,iBAAA,GAAAQ,2BAAA,CACAvC,gBAAA,EACAqC,4BACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}